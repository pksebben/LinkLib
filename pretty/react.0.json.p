{
    "anchor": 0,
    "found_anchor": false,
    "found_newest": true,
    "found_oldest": true,
    "history_limited": false,
    "messages": [
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5fc3428127f9bf92b1d03f9694617e10?d=identicon&version=1",
            "client": "website",
            "content": "<p>does anyone have recommendations for good resources for getting started w/ react/flux?  i found this (<a href=\"http://tylermcginnis.com/reactjs-tutorial-a-comprehensive-guide-to-building-apps-with-react/\" target=\"_blank\" title=\"http://tylermcginnis.com/reactjs-tutorial-a-comprehensive-guide-to-building-apps-with-react/\">http://tylermcginnis.com/reactjs-tutorial-a-comprehensive-guide-to-building-apps-with-react/</a>) which might be good, but welcome others</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39391490,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "irvin.hwang@gmail.com",
            "sender_full_name": "Irvin Hwang (m6'19)",
            "sender_id": 6916,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "react tutorials",
            "submessages": [],
            "timestamp": 1431373787,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/5fc3428127f9bf92b1d03f9694617e10?d=identicon&version=1",
            "client": "website",
            "content": "<p>please direct react related messages to the javascript stream</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39392822,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "irvin.hwang@gmail.com",
            "sender_full_name": "Irvin Hwang (m6'19)",
            "sender_id": 6916,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "javascript stream",
            "submessages": [],
            "timestamp": 1431375394,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span class=\"nx\">stream</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span><span class=\"nx\">deprecated</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">});</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39392836,
            "is_me_message": false,
            "last_edit_timestamp": 1431375439,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "javascript stream",
            "submessages": [],
            "timestamp": 1431375425,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/06d4a7e1ffcb35ace2fcfc5c2208d6b83a0dc6ab?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Haha <img alt=\":smile:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/smile.png\" title=\":smile:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 39395961,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "rpsoko@gmail.com",
            "sender_full_name": "Rob Sokolowski (W'14)",
            "sender_id": 4995,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "javascript stream",
            "submessages": [],
            "timestamp": 1431379537,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f5348e1061215cf50eb1682b5da444ea?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"http://andrewhfarmer.com/starter-project/\" target=\"_blank\" title=\"http://andrewhfarmer.com/starter-project/\">http://andrewhfarmer.com/starter-project/</a></p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 60861885,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "cestdiego@gmail.com",
            "sender_full_name": "Diego Berrocal (m1'17)",
            "sender_id": 8685,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Find the right boilerplate",
            "submessages": [],
            "timestamp": 1466449381,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3b5be0e833575b2a2c33aad70f6f5fd8?d=identicon&version=1",
            "client": "website",
            "content": "<p>niiiiiiice</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 60903733,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "giorgio.m.leveroni@gmail.com",
            "sender_full_name": "Giorgio Leveroni (S2'14)",
            "sender_id": 6185,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Find the right boilerplate",
            "submessages": [],
            "timestamp": 1466534182,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3b5be0e833575b2a2c33aad70f6f5fd8?d=identicon&version=1",
            "client": "website",
            "content": "<p>now which one do I pick :p?</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 60903737,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "giorgio.m.leveroni@gmail.com",
            "sender_full_name": "Giorgio Leveroni (S2'14)",
            "sender_id": 6185,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Find the right boilerplate",
            "submessages": [],
            "timestamp": 1466534193,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a6ac867cbcefd0b2623d3fd1b31c907ce7e83606?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"https://github.com/facebookincubator/create-react-app\" target=\"_blank\" title=\"https://github.com/facebookincubator/create-react-app\">https://github.com/facebookincubator/create-react-app</a> is the official facebook one, came out in july for those interested</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 101539690,
            "is_me_message": false,
            "last_edit_timestamp": 1474912237,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "imjuansoto@gmail.com",
            "sender_full_name": "Juan Soto (F1'16)",
            "sender_id": 100019,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Find the right boilerplate",
            "submessages": [],
            "timestamp": 1474912167,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c0051e8b52b9030d03a079f19e461c474bf2b16?x=x&version=1",
            "client": "website",
            "content": "<p>what's the fastest way to learn react with a $500 budget?</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104045443,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "me@anfedorov.com",
            "sender_full_name": "Andrey Fedorov (S2'15)",
            "sender_id": 8323,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "learning",
            "submessages": [],
            "timestamp": 1480472971,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c0051e8b52b9030d03a079f19e461c474bf2b16?x=x&version=1",
            "client": "website",
            "content": "<p>(preferably a high-production-value course)</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104045484,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "me@anfedorov.com",
            "sender_full_name": "Andrey Fedorov (S2'15)",
            "sender_id": 8323,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "learning",
            "submessages": [],
            "timestamp": 1480473018,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/70201dad8f30b376c8e9f8ede010e43b63266850?x=x&version=6",
            "client": "website",
            "content": "<p>.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104051522,
            "is_me_message": false,
            "last_edit_timestamp": 1605718967,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "stanley@zheng.nyc",
            "sender_full_name": "Stanley Zheng (they) (W1'19)",
            "sender_id": 100315,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "learning",
            "submessages": [],
            "timestamp": 1480488246,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c0051e8b52b9030d03a079f19e461c474bf2b16?x=x&version=1",
            "client": "website",
            "content": "<p>noice, thanks! my experience with egghead was sub-par with Angular videos, but perhaps that was inherent to Angular</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 104160981,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "me@anfedorov.com",
            "sender_full_name": "Andrey Fedorov (S2'15)",
            "sender_id": 8323,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "learning",
            "submessages": [],
            "timestamp": 1480709921,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/373cedf8b07bbc701ba5f5f8fcae6dfa?d=identicon&version=1",
            "client": "website",
            "content": "<p>Is JSX something most React-users use? Or do they do something else? Just taking my first dip into it</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114290201,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "andrew.cove@gmail.com",
            "sender_full_name": "Andrew Cove (SP2'17)",
            "sender_id": 100813,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "JSX",
            "submessages": [],
            "timestamp": 1502056974,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6f8ddedf593eefcabbc13434b183e7d7?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"andrew.cove@gmail.com\" data-user-id=\"100813\">@Andrew Cove (SP2'17)</span> React code almost universally uses JSX, in my experience. You could write React without it but the plain JS APIs are really verbose and not very pleasant to use.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 114290263,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "daniel.rigberg@gmail.com",
                        "full_name": "Daniel Lucas Rigberg (he) (W1'16)",
                        "id": 100342
                    },
                    "user_id": 100342
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vicmiclovich@gmail.com",
                        "full_name": "Victor Miclovich (W'14)",
                        "id": 5073
                    },
                    "user_id": 5073
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andrew.cove@gmail.com",
                        "full_name": "Andrew Cove (SP2'17)",
                        "id": 100813
                    },
                    "user_id": 100813
                }
            ],
            "recipient_id": 41095,
            "sender_email": "allie.jones@gmail.com",
            "sender_full_name": "Allie Jones (she/they) (W'13)",
            "sender_id": 821,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "JSX",
            "submessages": [],
            "timestamp": 1502057148,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/004f4d0f8e28926bab53ba931183845fab9e6cbf?x=x&version=1",
            "client": "website",
            "content": "<p>v16.2 added Fragment support: <a href=\"https://reactjs.org/blog/2017/11/28/react-v16.2.0-fragment-support.html\" target=\"_blank\" title=\"https://reactjs.org/blog/2017/11/28/react-v16.2.0-fragment-support.html\">https://reactjs.org/blog/2017/11/28/react-v16.2.0-fragment-support.html</a></p>\n<p>Pretty cool <span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119151740,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vicmiclovich@gmail.com",
                        "full_name": "Victor Miclovich (W'14)",
                        "id": 5073
                    },
                    "user_id": 5073
                }
            ],
            "recipient_id": 41095,
            "sender_email": "reeddunkle@gmail.com",
            "sender_full_name": "Reed Dunkle (SP2'16)",
            "sender_id": 9255,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "v16.2 Fragments",
            "submessages": [],
            "timestamp": 1512061193,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/26fa664d693a3fa50e6b1431b777a8d27015fbdc?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"#narrow/stream/javascript/subject/faster.20to.20check.20state.20or.20just.20set.20it.3F/near/119716644\" title=\"#narrow/stream/javascript/subject/faster.20to.20check.20state.20or.20just.20set.20it.3F/near/119716644\">https://recurse.zulipchat.com/#narrow/stream/javascript/subject/faster.20to.20check.20state.20or.20just.20set.20it.3F/near/119716644</a></p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 119716889,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "benschac@gmail.com",
                        "full_name": "Benjamin Schachter (he/they) (W1'16)",
                        "id": 100320
                    },
                    "user_id": 100320
                }
            ],
            "recipient_id": 41095,
            "sender_email": "alecbarrett@gmail.com",
            "sender_full_name": "Alec Barrett (he) (W2'17)",
            "sender_id": 100451,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "cross posting from js",
            "submessages": [],
            "timestamp": 1513182485,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2e72ab5ecb011ed0118fd4ff3ff2330f?d=identicon&version=1",
            "client": "website",
            "content": "<p>hey everyone! beginner question:   i'm working on a project where i want to style one specific component separately from all of the others. this is proving difficult because, as far as i can tell, it goes against the spirit of react, which bundles all of the css files together. are there any favored workarounds out there? i don't think it would be feasible to do in-line styling as the css for this last component is quite expansive (it's to format a resume page).</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 123825391,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "chungjsm@gmail.com",
            "sender_full_name": "Mike Chung (W2'17)",
            "sender_id": 100445,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "independently styling components",
            "submessages": [],
            "timestamp": 1521254751,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/27f18c8e071b5fb513029f36abf4d92d?d=identicon&version=1",
            "client": "website",
            "content": "<p>Have you checked out PostCss and CSS Modules? <a href=\"http://postcss.org/\" target=\"_blank\" title=\"http://postcss.org/\">http://postcss.org/</a></p>\n<p>Additionally I saw this article yesterday: <a href=\"https://engineeringblog.yelp.com/2018/03/css-in-the-age-of-react.html?utm_source=CSS-Weekly&amp;utm_campaign=Issue-307&amp;utm_medium=email\" target=\"_blank\" title=\"https://engineeringblog.yelp.com/2018/03/css-in-the-age-of-react.html?utm_source=CSS-Weekly&amp;utm_campaign=Issue-307&amp;utm_medium=email\">https://engineeringblog.yelp.com/2018/03/css-in-the-age-of-react.html?utm_source=CSS-Weekly&amp;utm_campaign=Issue-307&amp;utm_medium=email</a></p>\n<p>V. similar to what I'm doing at work and it's working p. well. <span class=\"user-mention\" data-user-id=\"100445\">@Mike Chung (W2'17)</span></p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124017373,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "benschac@gmail.com",
            "sender_full_name": "Benjamin Schachter (he/they) (W1'16)",
            "sender_id": 100320,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "independently styling components",
            "submessages": [],
            "timestamp": 1521647081,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2e72ab5ecb011ed0118fd4ff3ff2330f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'd heard briefly about CSS Modules but am a little wary of making my stack more complicated at this point. Had not seen this article! I'll take a look at both of these and see where they take me. Thanks <span class=\"user-mention\" data-user-id=\"100320\">@Benjamin Schachter (W1'16)</span>!</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124027213,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "chungjsm@gmail.com",
            "sender_full_name": "Mike Chung (W2'17)",
            "sender_id": 100445,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "independently styling components",
            "submessages": [],
            "timestamp": 1521661433,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4b6aae6cae274fb83b0d155f0255298c2d3b22b7?x=x&version=2",
            "client": "website",
            "content": "<p>Do you use scss? Nesting your css rules could make scoping them easier</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 124075195,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "fundirap@gmail.com",
            "sender_full_name": "Panashe Machinda Fundira (he) (S1'16)",
            "sender_id": 9339,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "independently styling components",
            "submessages": [],
            "timestamp": 1521746993,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e08fe80fd3eb696b931b953b25d789d9?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Afternoon, all! I'm trying to lazy load some data and I've gotten to the point where I can read the chunks in a <code>new ReadableStream</code>, but I'm struggling to stream them to the page. Has anyone done anything like this before?</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126056839,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "coleamurphy@gmail.com",
            "sender_full_name": "Cole Murphy (she) (m2'18)",
            "sender_id": 7859,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "streaming ajax response with redux",
            "submessages": [],
            "timestamp": 1525370129,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e08fe80fd3eb696b931b953b25d789d9?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I've got an action that calls to an api that loads a bunch of data. so I've created this <code>readResponseBody</code> function to get the chunks. That calls <code>getChunk</code>, where I can see and transform each chunk:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kr\">const</span> <span class=\"nx\">getChunk</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">reader</span><span class=\"p\">,</span> <span class=\"nx\">controller</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">reader</span><span class=\"p\">.</span><span class=\"nx\">read</span><span class=\"p\">().</span><span class=\"nx\">then</span><span class=\"p\">(({</span> <span class=\"nx\">done</span><span class=\"p\">,</span> <span class=\"nx\">value</span> <span class=\"p\">})</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kr\">const</span> <span class=\"nx\">chunk</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">TextDecoder</span><span class=\"p\">(</span><span class=\"s2\">&quot;utf-8&quot;</span><span class=\"p\">).</span><span class=\"nx\">decode</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">({</span> <span class=\"nx\">chunk</span> <span class=\"p\">});</span>\n  <span class=\"c1\">// When no more data needs to be consumed, close the stream</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">controller</span><span class=\"p\">.</span><span class=\"nx\">close</span><span class=\"p\">();</span>\n    <span class=\"k\">return</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"c1\">// Enqueue the next data chunk into our target stream</span>\n  <span class=\"nx\">controller</span><span class=\"p\">.</span><span class=\"nx\">enqueue</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n  <span class=\"nx\">getChunk</span><span class=\"p\">(</span><span class=\"nx\">reader</span><span class=\"p\">,</span> <span class=\"nx\">controller</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">readResponseBody</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">rs</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kr\">const</span> <span class=\"nx\">reader</span> <span class=\"o\">=</span> <span class=\"nx\">rs</span><span class=\"p\">.</span><span class=\"nx\">getReader</span><span class=\"p\">();</span>\n  <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nx\">ReadableStream</span><span class=\"p\">({</span>\n    <span class=\"nx\">start</span><span class=\"p\">(</span><span class=\"nx\">controller</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"nx\">getChunk</span><span class=\"p\">(</span><span class=\"nx\">reader</span><span class=\"p\">,</span> <span class=\"nx\">controller</span><span class=\"p\">);</span>\n    <span class=\"p\">},</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">};</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126056950,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "coleamurphy@gmail.com",
            "sender_full_name": "Cole Murphy (she) (m2'18)",
            "sender_id": 7859,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "streaming ajax response with redux",
            "submessages": [],
            "timestamp": 1525370291,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e08fe80fd3eb696b931b953b25d789d9?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>so I'm making the request, then doing:</p>\n<div class=\"codehilite\"><pre><span></span>      <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">resp</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">readResponseBody</span><span class=\"p\">(</span><span class=\"nx\">resp</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">))</span>\n      <span class=\"c1\">// stream being the ReadableStream</span>\n      <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">stream</span> <span class=\"p\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nx\">Response</span><span class=\"p\">(</span><span class=\"nx\">stream</span><span class=\"p\">));</span>\n</pre></div>\n\n\n<p>but I don't know how to spawn a dispatch every time we get a new chunk to send data to the reducer.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126057084,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "coleamurphy@gmail.com",
            "sender_full_name": "Cole Murphy (she) (m2'18)",
            "sender_id": 7859,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "streaming ajax response with redux",
            "submessages": [],
            "timestamp": 1525370485,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e08fe80fd3eb696b931b953b25d789d9?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I tried passing <code>dispatch</code> into <code>getChunk</code> but that doesn't seem to be working.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126057139,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "coleamurphy@gmail.com",
            "sender_full_name": "Cole Murphy (she) (m2'18)",
            "sender_id": 7859,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "streaming ajax response with redux",
            "submessages": [],
            "timestamp": 1525370536,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I haven't used those APIs before and I'm actually not quite following what's going on. When you make your request, are you immediately downloading all of the chunks?</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126076768,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "streaming ajax response with redux",
            "submessages": [],
            "timestamp": 1525402065,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I take it you want to update the UI separately for each chunk, rather than waiting for them to all come in. What actually happens when you stick a <code>dispatch</code> into <code>getChunk</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126076934,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "streaming ajax response with redux",
            "submessages": [],
            "timestamp": 1525402344,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>And are you doing anything besides <code>.then(stream =&gt; new Response(stream))</code> to actually kick off the streaming? Are you sure the chunks are actually getting downloaded? I would have expected that sticking a <code>dispatch</code> into <code>getChunk</code> would have worked\u2014although I don't think that's the intended way to use streams.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126076945,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "streaming ajax response with redux",
            "submessages": [],
            "timestamp": 1525402417,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Also, for what it's worth, you might be able to get away with something a bit simpler, assuming you don't need the full Streams API (e.g. passing it to multiple consumers, tee-ing it, etc.):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">readResponseBody</span><span class=\"p\">(</span><span class=\"nx\">rs</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kr\">const</span> <span class=\"nx\">reader</span> <span class=\"o\">=</span> <span class=\"nx\">rs</span><span class=\"p\">.</span><span class=\"nx\">getReader</span><span class=\"p\">();</span>\n  <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"p\">{</span> <span class=\"nx\">done</span><span class=\"p\">,</span> <span class=\"nx\">value</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">await</span> <span class=\"nx\">reader</span><span class=\"p\">.</span><span class=\"nx\">read</span><span class=\"p\">();</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">chunk</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">TextDecoder</span><span class=\"p\">(</span><span class=\"s2\">&quot;utf-8&quot;</span><span class=\"p\">).</span><span class=\"nx\">decode</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n    <span class=\"c1\">// assuming the chunk is ok...</span>\n    <span class=\"nx\">dispatch</span><span class=\"p\">({</span> <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"nx\">CHUNK_ALERT</span><span class=\"p\">,</span> <span class=\"nx\">chunk</span><span class=\"o\">:</span> <span class=\"nx\">chunk</span> <span class=\"p\">});</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">dispatch</span><span class=\"p\">({</span> <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"nx\">DONE_CHUNKING</span> <span class=\"p\">});</span>\n      <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126077235,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "streaming ajax response with redux",
            "submessages": [],
            "timestamp": 1525403018,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>(That'll definitely be too simple if you want to do things like cancel the stream midway through.)</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126077278,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "streaming ajax response with redux",
            "submessages": [],
            "timestamp": 1525403089,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e08fe80fd3eb696b931b953b25d789d9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've used <code>console.log({ chunk })</code>, which lists all of the chunks but when I put a dispatch in I only get the first chunk</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126077287,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "coleamurphy@gmail.com",
            "sender_full_name": "Cole Murphy (she) (m2'18)",
            "sender_id": 7859,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "streaming ajax response with redux",
            "submessages": [],
            "timestamp": 1525403133,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Meaning only one chunk makes it through redux?</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126077290,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "streaming ajax response with redux",
            "submessages": [],
            "timestamp": 1525403155,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e08fe80fd3eb696b931b953b25d789d9?d=identicon&version=1",
            "client": "website",
            "content": "<p>right</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126077328,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "coleamurphy@gmail.com",
            "sender_full_name": "Cole Murphy (she) (m2'18)",
            "sender_id": 7859,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "streaming ajax response with redux",
            "submessages": [],
            "timestamp": 1525403164,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>If you stick in the dispatch, do you still log all the other chunks too?</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126077329,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "streaming ajax response with redux",
            "submessages": [],
            "timestamp": 1525403165,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e08fe80fd3eb696b931b953b25d789d9?d=identicon&version=1",
            "client": "website",
            "content": "<p>no and I'm not doing anything more than <code>.then(stream =&gt; new Response(stream))</code></p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126077332,
            "is_me_message": false,
            "last_edit_timestamp": 1525403187,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "coleamurphy@gmail.com",
            "sender_full_name": "Cole Murphy (she) (m2'18)",
            "sender_id": 7859,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "streaming ajax response with redux",
            "submessages": [],
            "timestamp": 1525403169,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ok, cool\u2014I should read up some more on the streams API.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126077337,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "streaming ajax response with redux",
            "submessages": [],
            "timestamp": 1525403209,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e08fe80fd3eb696b931b953b25d789d9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I wasn't sure what to do with that response, that was just copied from the mozilla mdn docs</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126077338,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "coleamurphy@gmail.com",
            "sender_full_name": "Cole Murphy (she) (m2'18)",
            "sender_id": 7859,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "streaming ajax response with redux",
            "submessages": [],
            "timestamp": 1525403222,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e08fe80fd3eb696b931b953b25d789d9?d=identicon&version=1",
            "client": "website",
            "content": "<p>haha yeah, I should, too <span class=\"emoji emoji-1f605\" title=\"sweat smile\">:sweat_smile:</span></p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126077343,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "coleamurphy@gmail.com",
            "sender_full_name": "Cole Murphy (she) (m2'18)",
            "sender_id": 7859,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "streaming ajax response with redux",
            "submessages": [],
            "timestamp": 1525403233,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Is it possible there's some error in redux? I don't see how you could log all the chunks and then have only one of them successfully dispatch.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126077344,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "streaming ajax response with redux",
            "submessages": [],
            "timestamp": 1525403238,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e08fe80fd3eb696b931b953b25d789d9?d=identicon&version=1",
            "client": "website",
            "content": "<p>the other chunks don't log if I dispatch</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126077345,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "coleamurphy@gmail.com",
            "sender_full_name": "Cole Murphy (she) (m2'18)",
            "sender_id": 7859,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "streaming ajax response with redux",
            "submessages": [],
            "timestamp": 1525403253,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e08fe80fd3eb696b931b953b25d789d9?d=identicon&version=1",
            "client": "website",
            "content": "<p>just the first one</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126077346,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "coleamurphy@gmail.com",
            "sender_full_name": "Cole Murphy (she) (m2'18)",
            "sender_id": 7859,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "streaming ajax response with redux",
            "submessages": [],
            "timestamp": 1525403255,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e08fe80fd3eb696b931b953b25d789d9?d=identicon&version=1",
            "client": "website",
            "content": "<p>so dispatching seems to stop the controller</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126077348,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "coleamurphy@gmail.com",
            "sender_full_name": "Cole Murphy (she) (m2'18)",
            "sender_id": 7859,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "streaming ajax response with redux",
            "submessages": [],
            "timestamp": 1525403274,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah, ok, that makes me feel like the call the dispatch could be throwing or something.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126077349,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "streaming ajax response with redux",
            "submessages": [],
            "timestamp": 1525403276,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e08fe80fd3eb696b931b953b25d789d9?d=identicon&version=1",
            "client": "website",
            "content": "<p>maybe so!</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126077390,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "coleamurphy@gmail.com",
            "sender_full_name": "Cole Murphy (she) (m2'18)",
            "sender_id": 7859,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "streaming ajax response with redux",
            "submessages": [],
            "timestamp": 1525403293,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>You're inside a promise and promises are notoriously quiet when they decide to fail :/</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126077392,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "streaming ajax response with redux",
            "submessages": [],
            "timestamp": 1525403307,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>You could try sticking a <code>.catch(hmm =&gt; ...)</code> at the very end of the <code>getChunk</code> method?</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126077398,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "streaming ajax response with redux",
            "submessages": [],
            "timestamp": 1525403338,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e08fe80fd3eb696b931b953b25d789d9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'll try it!</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126077411,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "coleamurphy@gmail.com",
            "sender_full_name": "Cole Murphy (she) (m2'18)",
            "sender_id": 7859,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "streaming ajax response with redux",
            "submessages": [],
            "timestamp": 1525403386,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e08fe80fd3eb696b931b953b25d789d9?d=identicon&version=1",
            "client": "website",
            "content": "<p>ohh, I am getting an error!</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126077587,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "coleamurphy@gmail.com",
            "sender_full_name": "Cole Murphy (she) (m2'18)",
            "sender_id": 7859,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "streaming ajax response with redux",
            "submessages": [],
            "timestamp": 1525403716,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e08fe80fd3eb696b931b953b25d789d9?d=identicon&version=1",
            "client": "website",
            "content": "<p>good thinking</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126077588,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "coleamurphy@gmail.com",
            "sender_full_name": "Cole Murphy (she) (m2'18)",
            "sender_id": 7859,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "streaming ajax response with redux",
            "submessages": [],
            "timestamp": 1525403719,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126077591,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "streaming ajax response with redux",
            "submessages": [],
            "timestamp": 1525403761,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e08fe80fd3eb696b931b953b25d789d9?d=identicon&version=1",
            "client": "website",
            "content": "<p>it's working!!</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126077801,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "coleamurphy@gmail.com",
            "sender_full_name": "Cole Murphy (she) (m2'18)",
            "sender_id": 7859,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "streaming ajax response with redux",
            "submessages": [],
            "timestamp": 1525404137,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e08fe80fd3eb696b931b953b25d789d9?d=identicon&version=1",
            "client": "website",
            "content": "<p>thank you!!!</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126077802,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "coleamurphy@gmail.com",
            "sender_full_name": "Cole Murphy (she) (m2'18)",
            "sender_id": 7859,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "streaming ajax response with redux",
            "submessages": [],
            "timestamp": 1525404139,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e08fe80fd3eb696b931b953b25d789d9?d=identicon&version=1",
            "client": "website",
            "content": "<p>very fortuitous that I got back online when you were responding.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 126077809,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "coleamurphy@gmail.com",
            "sender_full_name": "Cole Murphy (she) (m2'18)",
            "sender_id": 7859,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "streaming ajax response with redux",
            "submessages": [],
            "timestamp": 1525404190,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1d95d8a68ebfd041cd0bb7ec32c8a4ca2ef8c1a9?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>react revival <img alt=\":omgyes:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/13/emoji/images/3218.png\" title=\"omgyes\">  <span class=\"user-mention\" data-user-id=\"130196\">@George Hyun (F2'18)</span>  <span class=\"user-mention\" data-user-id=\"130018\">@Zev Benjamin Averbach (F2'18)</span> <span class=\"user-mention\" data-user-id=\"120346\">@Daniel J Miller (F2'18)</span> <span class=\"user-mention\" data-user-id=\"129956\">@Chun Li (F2'18)</span> <span class=\"user-mention\" data-user-id=\"130406\">@Heime S Ashkenazie (F2'18)</span> <span class=\"user-mention\" data-user-id=\"130326\">@Carl Schubert (F2'18)</span></p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 134704443,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "katkitay@gmail.com",
            "sender_full_name": "Kat Kitay (she) (F2'18)",
            "sender_id": 129926,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "fall 2018 batch",
            "submessages": [],
            "timestamp": 1537997277,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1d95d8a68ebfd041cd0bb7ec32c8a4ca2ef8c1a9?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>Going fwd, I booked a room for us to do this twice a week on Tues/Thurs (but obvy can always post stuff here or pair up anytime). The calendar event is here: <a href=\"https://www.recurse.com/calendar/3212\" target=\"_blank\" title=\"https://www.recurse.com/calendar/3212\">https://www.recurse.com/calendar/3212</a></p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 134708484,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "katkitay@gmail.com",
            "sender_full_name": "Kat Kitay (she) (F2'18)",
            "sender_id": 129926,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "fall 2018 batch",
            "submessages": [],
            "timestamp": 1538002367,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fe783e04644862c30823614f31b9a996?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p><span class=\"user-mention\" data-user-id=\"130326\">@Carl Schubert (F2'18)</span> or <span class=\"user-mention\" data-user-id=\"129929\">@Douglas Gordon (F2'18)</span> any recommendations for React testing (libraries, best practices)?</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 134969672,
            "is_me_message": false,
            "last_edit_timestamp": 1538400070,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "zev@averba.ch",
            "sender_full_name": "Zev Benjamin Averbach (he) (F2'18)",
            "sender_id": 130018,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "React TDD",
            "submessages": [],
            "timestamp": 1538400032,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7614b2155716cc9e51f8be991671ed44?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I have personally used jest and mocha  for testing react.  They are both are what you would expect, any test framework will work as we are just dealing with javascript.  There is a airbnb framework called enzyme that is more focused on component output.  Personally I think you should be primarily concerned with testing that you are passing the correct props.  If the data is correct the component should be as well.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 134971655,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "zev@averba.ch",
                        "full_name": "Zev Benjamin Averbach (he) (F2'18)",
                        "id": 130018
                    },
                    "user_id": 130018
                }
            ],
            "recipient_id": 41095,
            "sender_email": "carl.schubert@gmail.com",
            "sender_full_name": "Carl Schubert (he) (F2'18)",
            "sender_id": 130326,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "React TDD",
            "submessages": [],
            "timestamp": 1538402209,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/98737fe40fbe9c08878a1bb50e63b023505f9ef8?x=x&version=2",
            "client": "website",
            "content": "<p>For the test-runner itself, I've been a big fan of jest - it's a great, zero-config way to get up and running. I've had to fight test-runners many times in the past, so was happy with the ease of use around jest.</p>\n<p>For a library, although I haven't used it, I've heard many good things about <a href=\"https://github.com/kentcdodds/react-testing-library\" target=\"_blank\" title=\"https://github.com/kentcdodds/react-testing-library\">https://github.com/kentcdodds/react-testing-library</a> by Kent C. Dodds. It's a replacement for enzyme and seeks to solve for many of the pain points that Kent found with it. I've been wanting to dig deeper into it for a new project.</p>\n<p>Kent is also big on React testing and has great videos floating around (YouTube, Frontend Masters, etc.). If you're interested that's a good rabbit hole to go down.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 134982413,
            "is_me_message": false,
            "last_edit_timestamp": 1538413011,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "zev@averba.ch",
                        "full_name": "Zev Benjamin Averbach (he) (F2'18)",
                        "id": 130018
                    },
                    "user_id": 130018
                }
            ],
            "recipient_id": 41095,
            "sender_email": "pratik@ringshia.com",
            "sender_full_name": "Pratik Ringshia (he) (F1'18)",
            "sender_id": 125403,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "React TDD",
            "submessages": [],
            "timestamp": 1538412927,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed08506a2165a36be3ed28630ff49cc8?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hi React experts! I'm trying to get my head around a problem where I am trying to take a stream of single actions and turn it into an aggregated action. For example, I want to receive an action as it's happening, but only emit an action every second which contains all the information from the previous second. Does anyone have any architectural advice on this, or time to pair?</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 134996064,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "wylieconlon@gmail.com",
            "sender_full_name": "Wylie Conlon (he) (F2'18)",
            "sender_id": 130475,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Advice on combining actions into a single batch",
            "submessages": [],
            "timestamp": 1538427395,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fe783e04644862c30823614f31b9a996?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p><span class=\"user-mention\" data-user-id=\"130475\">@Wylie Conlon (F2'18)</span> I\u2019d be interested in pairing on this, though I\u2019m currently trying to sweat out some kind of nasty bug (illness) off-site. I\u2019m guessing lifecycle methods are going to be the key.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135003764,
            "is_me_message": false,
            "last_edit_timestamp": 1538437847,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "zev@averba.ch",
            "sender_full_name": "Zev Benjamin Averbach (he) (F2'18)",
            "sender_id": 130018,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Advice on combining actions into a single batch",
            "submessages": [],
            "timestamp": 1538437805,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fe783e04644862c30823614f31b9a996?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>By actions, do you mean state changes?</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135004810,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "zev@averba.ch",
            "sender_full_name": "Zev Benjamin Averbach (he) (F2'18)",
            "sender_id": 130018,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Advice on combining actions into a single batch",
            "submessages": [],
            "timestamp": 1538439465,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1d95d8a68ebfd041cd0bb7ec32c8a4ca2ef8c1a9?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>does anyone have advice for finding one nested object by key and updating its value without having to loop/map through the whole array of objects?</p>\n<p>sample:<br>\nchicken = [{ key: 1, hunger: 10}, {key: 2, hunger: 5}, {key: 3, hunger: 10}] </p>\n<p>in this case I want to update key:2 and decrement its hunger.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135006653,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "katkitay@gmail.com",
            "sender_full_name": "Kat Kitay (she) (F2'18)",
            "sender_id": 129926,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Updating a nested object",
            "submessages": [],
            "timestamp": 1538442497,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d48812709bdc0ff86746b7fbe56b0f13?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>If you're into lodash and are OK mutating <code>chicken</code>, you can write this as <code>_.find(chicken, {key: 2}).hunger -= hungerDrop</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135007029,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "joshuah@alum.mit.edu",
            "sender_full_name": "Joshua Horowitz (he) (F1'18)",
            "sender_id": 124997,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Updating a nested object",
            "submessages": [],
            "timestamp": 1538443133,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d48812709bdc0ff86746b7fbe56b0f13?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Caveats:<br>\n1. If there's nothing matching <code>{key: 2}</code>, <code>_.find</code> will return <code>undefined</code> and this will throw an error.<br>\n2. If you're concerned about the performance implications of looping, rather than just the code-concision implications, this won't help at all \u2013 <code>_.find</code> is just doing a loop for you. If you care about the performance, you probably want to keep an object indexed by <code>key</code>, like <code>chicken = {1: {key: 1, hunger: 10}, 2: {key: 2, hunger: 5}, 3: {key: 3, hunger: 10}}</code>. Depends on what you're doing.<br>\n3. If you DO care about mutation, and want to return a new array without messing with the original, you'll need to do some more work.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135007154,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "joshuah@alum.mit.edu",
            "sender_full_name": "Joshua Horowitz (he) (F1'18)",
            "sender_id": 124997,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Updating a nested object",
            "submessages": [],
            "timestamp": 1538443388,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1d95d8a68ebfd041cd0bb7ec32c8a4ca2ef8c1a9?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>thank you!! i think #2 seems like the best choice. i think i'll try refactoring to do that.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135007229,
            "is_me_message": false,
            "last_edit_timestamp": 1538443577,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "katkitay@gmail.com",
            "sender_full_name": "Kat Kitay (she) (F2'18)",
            "sender_id": 129926,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Updating a nested object",
            "submessages": [],
            "timestamp": 1538443562,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, the mutation point is kind of a bummer in React (not React's fault, but it's a bummer). You often really don't want to mutate things, e.g. redux would really prefer that you not mutate your state object, and it's surprisingly easy to accidentally mutate things in JS even if you're trying not to. <a href=\"https://github.com/mweststrate/immer\" target=\"_blank\" title=\"https://github.com/mweststrate/immer\">https://github.com/mweststrate/immer</a> is a neat trick to get around this (I'm not totally sure how well it works in practice, but it seems legit).</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135007577,
            "is_me_message": false,
            "last_edit_timestamp": 1538444222,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Updating a nested object",
            "submessages": [],
            "timestamp": 1538444152,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed08506a2165a36be3ed28630ff49cc8?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hope you get better <span class=\"user-mention\" data-user-id=\"130018\">@Zev Benjamin Averbach (F2'18)</span> I'm not sure how to use lifecycle methods to get the kind of effect I'm looking for, so I've been looking into using sagas. My goal is:</p>\n<div class=\"codehilite\"><pre><span></span>Time | Action received   | Action output\n1    | LOG(message1)     | BATCH_LOG([message1])\n2    | LOG(message2)     |\n3    |                   |\n4    | LOG(message3)     |\n5    |                   | BATCH_LOG([message2, message3])\n6    |                   |\n7    | LOG(message4)     |\n8    |                   |\n9    | LOG(message5)     |\n10   |                   | BATCH_LOG([message4, message5])\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135050330,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "wylieconlon@gmail.com",
            "sender_full_name": "Wylie Conlon (he) (F2'18)",
            "sender_id": 130475,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Advice on combining actions into a single batch",
            "submessages": [],
            "timestamp": 1538501156,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed08506a2165a36be3ed28630ff49cc8?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>If anyone has ideas on how to get redux (with or without sagas) to have the kind of output I'm describing above, I'd love to talk</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135050399,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "wylieconlon@gmail.com",
            "sender_full_name": "Wylie Conlon (he) (F2'18)",
            "sender_id": 130475,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Advice on combining actions into a single batch",
            "submessages": [],
            "timestamp": 1538501263,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/fab1c8c51d45fa5e04d9f0d4e4421a8247b86d58?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><code>lodash</code>'s <code>debounce</code>/<code>throttle</code> might be one potential way to do this</p>\n<p><a href=\"https://css-tricks.com/debouncing-throttling-explained-examples/\" target=\"_blank\" title=\"https://css-tricks.com/debouncing-throttling-explained-examples/\">this article</a> is very useful to visualize what all the params do</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135062390,
            "is_me_message": false,
            "last_edit_timestamp": 1538512776,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "oscardub@gmail.com",
            "sender_full_name": "Oscar Dub (he) (F1'18)",
            "sender_id": 125392,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Advice on combining actions into a single batch",
            "submessages": [],
            "timestamp": 1538512763,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed08506a2165a36be3ed28630ff49cc8?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Thanks, but the issue is that both debounce and throttle are throwing away actions. I actually did find a solution which I am about to share</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135062577,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "wylieconlon@gmail.com",
            "sender_full_name": "Wylie Conlon (he) (F2'18)",
            "sender_id": 130475,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Advice on combining actions into a single batch",
            "submessages": [],
            "timestamp": 1538512926,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed08506a2165a36be3ed28630ff49cc8?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>The solution I found is actually based on redux-saga's internal implementation of <code>debounce</code> and <code>throttle</code>, but with an expanding buffer:</p>\n<div class=\"codehilite\"><pre><span></span>function* watchLogs() {\n  const logChannel = yield actionChannel(&#39;LOG_PRODUCED&#39;, buffers.expanding());\n\n  while (true) {\n    const action = yield take(logChannel);\n\n    yield delay(1000);\n\n    const remainingActions = yield flush(logChannel);\n\n    const allActions = [action].concat(remainingActions);\n    yield put({\n      type: &#39;LOG_BATCH_PRODUCED&#39;,\n      payload: allActions,\n      meta: action.meta,\n    });\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135062623,
            "is_me_message": false,
            "last_edit_timestamp": 1538513016,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "wylieconlon@gmail.com",
            "sender_full_name": "Wylie Conlon (he) (F2'18)",
            "sender_id": 130475,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Advice on combining actions into a single batch",
            "submessages": [],
            "timestamp": 1538513009,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed08506a2165a36be3ed28630ff49cc8?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I feel like I've learned a lot about streams by debugging this</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135062809,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "wylieconlon@gmail.com",
            "sender_full_name": "Wylie Conlon (he) (F2'18)",
            "sender_id": 130475,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Advice on combining actions into a single batch",
            "submessages": [],
            "timestamp": 1538513217,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/fab1c8c51d45fa5e04d9f0d4e4421a8247b86d58?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I think I'll need a walkthrough of both the generator syntax and the saga model to get this\u00a0\u2013\u00a0I've only used thunk previously</p>\n<p>Does this produce the behavior of <code>message1</code> you described where it fires through immediately?</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135063102,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "oscardub@gmail.com",
            "sender_full_name": "Oscar Dub (he) (F1'18)",
            "sender_id": 125392,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Advice on combining actions into a single batch",
            "submessages": [],
            "timestamp": 1538513485,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed08506a2165a36be3ed28630ff49cc8?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Right, basically this keeps looping the following behavior:</p>\n<p>1. If there is nothing waiting, take the first action<br>\n2. After taking the first action, wait 1000ms before processing anything else<br>\n3. After 1000ms, flush the queue of actions that have not been processed<br>\n4. Combine the first action with the queue of actions and dispatch a combined action</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135063276,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "wylieconlon@gmail.com",
            "sender_full_name": "Wylie Conlon (he) (F2'18)",
            "sender_id": 130475,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Advice on combining actions into a single batch",
            "submessages": [],
            "timestamp": 1538513680,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/fab1c8c51d45fa5e04d9f0d4e4421a8247b86d58?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Does that mean that <code>message1</code> gets sent through only after a 1000ms delay?</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135063409,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "oscardub@gmail.com",
            "sender_full_name": "Oscar Dub (he) (F1'18)",
            "sender_id": 125392,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Advice on combining actions into a single batch",
            "submessages": [],
            "timestamp": 1538513825,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed08506a2165a36be3ed28630ff49cc8?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Yes, I think that changing the behavior would require code like this:</p>\n<div class=\"codehilite\"><pre><span></span>const logChannel = yield actionChannel(&#39;CONSOLE_LOG_PRODUCED&#39;, buffers.expanding());\n\nwhile (true) {\n  const action = yield take(logChannel);\n  yield put({\n    type: &#39;CONSOLE_LOG_BATCH_PRODUCED&#39;,\n    payload: [action],\n    meta: action.meta,\n  });\n\n  yield delay(1000);\n\n  const remainingActions = yield flush(logChannel);\n  if (remainingActions.length &gt; 0) {\n    yield put({\n      type: &#39;CONSOLE_LOG_BATCH_PRODUCED&#39;,\n      payload: remainingActions,\n      meta: action.meta,\n    });\n  }\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135063609,
            "is_me_message": false,
            "last_edit_timestamp": 1538514035,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "wylieconlon@gmail.com",
            "sender_full_name": "Wylie Conlon (he) (F2'18)",
            "sender_id": 130475,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Advice on combining actions into a single batch",
            "submessages": [],
            "timestamp": 1538514020,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/fab1c8c51d45fa5e04d9f0d4e4421a8247b86d58?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>That's more as I was expecting, thanks for clarifying+sharing! Generator syntax looks like a really natural way to handle this situation</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135063739,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "oscardub@gmail.com",
            "sender_full_name": "Oscar Dub (he) (F1'18)",
            "sender_id": 125392,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Advice on combining actions into a single batch",
            "submessages": [],
            "timestamp": 1538514161,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed08506a2165a36be3ed28630ff49cc8?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Yeah, generators are really intimidating at first! I'm definitely interested in going deeper on this style of programming during the batch</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135063840,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "wylieconlon@gmail.com",
            "sender_full_name": "Wylie Conlon (he) (F2'18)",
            "sender_id": 130475,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Advice on combining actions into a single batch",
            "submessages": [],
            "timestamp": 1538514259,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1d95d8a68ebfd041cd0bb7ec32c8a4ca2ef8c1a9?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>I just rewrote Chicken Rancher 2.0 with Redux. So 2.0 of 2.0. I would love some code review! <a href=\"https://github.com/kkitay/chicken-rancher\" target=\"_blank\" title=\"https://github.com/kkitay/chicken-rancher\">https://github.com/kkitay/chicken-rancher</a> cc: <span class=\"user-mention\" data-user-id=\"130326\">@Carl Schubert (F2'18)</span> <span class=\"user-mention\" data-user-id=\"129929\">@Douglas Gordon (F2'18)</span> <span class=\"user-mention\" data-user-id=\"130018\">@Zev Benjamin Averbach (F2'18)</span></p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135263639,
            "is_me_message": false,
            "last_edit_timestamp": 1538755364,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "katkitay@gmail.com",
            "sender_full_name": "Kat Kitay (she) (F2'18)",
            "sender_id": 129926,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Code review for Chicken Rancher",
            "submessages": [],
            "timestamp": 1538755317,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1d95d8a68ebfd041cd0bb7ec32c8a4ca2ef8c1a9?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>you can play the game here: <a href=\"https://chicken-rancher.kitay.co/\" target=\"_blank\" title=\"https://chicken-rancher.kitay.co/\">https://chicken-rancher.kitay.co/</a></p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135264163,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f423",
                    "emoji_name": "hatching_chick",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nekanek@protonmail.com",
                        "full_name": "Marina Inina (she) (F2'18)",
                        "id": 129939
                    },
                    "user_id": 129939
                },
                {
                    "emoji_code": "1f423",
                    "emoji_name": "hatching_chick",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "joshuah@alum.mit.edu",
                        "full_name": "Joshua Horowitz (he) (F1'18)",
                        "id": 124997
                    },
                    "user_id": 124997
                }
            ],
            "recipient_id": 41095,
            "sender_email": "katkitay@gmail.com",
            "sender_full_name": "Kat Kitay (she) (F2'18)",
            "sender_id": 129926,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Code review for Chicken Rancher",
            "submessages": [],
            "timestamp": 1538755848,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fe783e04644862c30823614f31b9a996?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"129926\">@Kat Kitay (F2'18)</span> did you end up getting sufficient code review?  I am down for that tomorrow if not.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135426784,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "zev@averba.ch",
            "sender_full_name": "Zev Benjamin Averbach (he) (F2'18)",
            "sender_id": 130018,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Code review for Chicken Rancher",
            "submessages": [],
            "timestamp": 1539031088,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1d95d8a68ebfd041cd0bb7ec32c8a4ca2ef8c1a9?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>i didn't! are you saying do code review IRL?</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135488495,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "katkitay@gmail.com",
            "sender_full_name": "Kat Kitay (she) (F2'18)",
            "sender_id": 129926,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Code review for Chicken Rancher",
            "submessages": [],
            "timestamp": 1539109665,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1d95d8a68ebfd041cd0bb7ec32c8a4ca2ef8c1a9?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>the only code review im used to is over github but im down for whatever</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135488499,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "katkitay@gmail.com",
            "sender_full_name": "Kat Kitay (she) (F2'18)",
            "sender_id": 129926,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Code review for Chicken Rancher",
            "submessages": [],
            "timestamp": 1539109674,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1d95d8a68ebfd041cd0bb7ec32c8a4ca2ef8c1a9?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>it's also a huge codebase now that I think about it, it's probably not a reasonable code review request. I'm turning the Sprite component into an NPM package, maybe that would be better for review.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135488557,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "katkitay@gmail.com",
            "sender_full_name": "Kat Kitay (she) (F2'18)",
            "sender_id": 129926,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Code review for Chicken Rancher",
            "submessages": [],
            "timestamp": 1539109702,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1d95d8a68ebfd041cd0bb7ec32c8a4ca2ef8c1a9?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>we're finding out exactly what's in Create-React-App at the pairing stations instead of in Sammet</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135495898,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "katkitay@gmail.com",
            "sender_full_name": "Kat Kitay (she) (F2'18)",
            "sender_id": 129926,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Weekly React Time",
            "submessages": [],
            "timestamp": 1539116397,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fe783e04644862c30823614f31b9a996?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"129926\">@Kat Kitay (F2'18)</span>  dang just saw this, sorry. (@ me if you can!) The sprite thing sounds interesting, so yes, whenever you're free, that'd be cool to check out.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135501395,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "zev@averba.ch",
            "sender_full_name": "Zev Benjamin Averbach (he) (F2'18)",
            "sender_id": 130018,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Code review for Chicken Rancher",
            "submessages": [],
            "timestamp": 1539121612,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fe783e04644862c30823614f31b9a996?d=identicon&version=1",
            "client": "website",
            "content": "<p>React folks:  I need some help improving the performance of my first iteration of an interactive transcript.   Anyone free to pair?</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135501423,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "zev@averba.ch",
            "sender_full_name": "Zev Benjamin Averbach (he) (F2'18)",
            "sender_id": 130018,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Code review for Chicken Rancher",
            "submessages": [],
            "timestamp": 1539121669,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1d95d8a68ebfd041cd0bb7ec32c8a4ca2ef8c1a9?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>I've got server side rendering kind of working with my Create React App 2.0 app. But it's doing something really funky on one of my pages - reversing the classNames on two of my divs. Anyone familiar w/ SSR and can help a girl out?</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135617261,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "katkitay@gmail.com",
            "sender_full_name": "Kat Kitay (she) (F2'18)",
            "sender_id": 129926,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "server side rendering trouble",
            "submessages": [],
            "timestamp": 1539272532,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1d95d8a68ebfd041cd0bb7ec32c8a4ca2ef8c1a9?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>actually, I just figured it out somehow. <span class=\"emoji emoji-1f914\" title=\"thinking\">:thinking:</span> The issue was the renderer wasn't using the right URL, so it was rendering the wrong page and then React was trying to render the right one on top of it (somehow)</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 135617505,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "katkitay@gmail.com",
            "sender_full_name": "Kat Kitay (she) (F2'18)",
            "sender_id": 129926,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "server side rendering trouble",
            "submessages": [],
            "timestamp": 1539272777,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ed08506a2165a36be3ed28630ff49cc8?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>This might be a good question to discuss during react time, but here's the premise: I want to display a tree structure in React, as in a <code>Node</code> that has <code>children</code> which are also <code>Node</code>s. What kind of state should I be tracking at the top level, and should I be doing anything special to make rendering more performant?</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136049910,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "wylieconlon@gmail.com",
            "sender_full_name": "Wylie Conlon (he) (F2'18)",
            "sender_id": 130475,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Help with thinking in React",
            "submessages": [],
            "timestamp": 1539875615,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d48812709bdc0ff86746b7fbe56b0f13?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>I've done a bunch of stuff in React that (roughly?) matches that pattern, so I'd be happy to chat about it some time.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136050789,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "joshuah@alum.mit.edu",
            "sender_full_name": "Joshua Horowitz (he) (F1'18)",
            "sender_id": 124997,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Help with thinking in React",
            "submessages": [],
            "timestamp": 1539876540,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d48812709bdc0ff86746b7fbe56b0f13?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>(I'll be at RC around 12:30.)</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136050824,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "joshuah@alum.mit.edu",
            "sender_full_name": "Joshua Horowitz (he) (F1'18)",
            "sender_id": 124997,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Help with thinking in React",
            "submessages": [],
            "timestamp": 1539876581,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7614b2155716cc9e51f8be991671ed44?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>You can make a <code>TreeNode</code> component that expects props like </p>\n<div class=\"codehilite\"><pre><span></span>const data = [{\n      id: 1\n    }, {\n      id: 2, childrenNode: [\n        {\n          id: 3, childrenNode: [{id: 5 }]\n        }, {\n          id: 4\n        }\n    }]\n</pre></div>\n\n\n<p>And then have a render that does something like this</p>\n<div class=\"codehilite\"><pre><span></span>class TreeNode extends Component {\n...\n render: function() {\n    var childNodes;\n    if (this.props.node.childrenNode != null) {\n      childNodes = this.props.node.childrenNode.map((node, index) =&gt; {&lt;li key={`treekey-${index}-${this.props.node.id}`}&gt;&lt;TreeNode node={node}&lt;/li&gt;\n      });\n    return (\n      &lt;div&gt;\n        &lt;h5&gt;\n          {this.props.node.id}\n        &lt;/h5&gt;\n        &lt;ul style={style}&gt;\n          {childNodes}\n        &lt;/ul&gt;\n      &lt;/div&gt;\n    );\n}\n</pre></div>\n\n\n<p>The key to make it performant is to make sure every node has a unique key.  In my example I use id to make keys as they are unique.  But you could also pass down something else though props.  Let me know if this is useful</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136051947,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "carl.schubert@gmail.com",
            "sender_full_name": "Carl Schubert (he) (F2'18)",
            "sender_id": 130326,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Help with thinking in React",
            "submessages": [],
            "timestamp": 1539877778,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d48812709bdc0ff86746b7fbe56b0f13?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"130326\">@Carl Schubert (F2'18)</span> The basic pattern there is right. But FYI \u2013 there's no reason not to simply set <code>key={this.props.node.id}</code>. (Also, for the record, those keys only need to be unique between siblings; there's no need for global uniqueness. Though it's often good to have globally unique IDs for other reasons. Depends what <span class=\"user-mention\" data-user-id=\"130475\">@Wylie Conlon (F2'18)</span> is doing.)</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136055807,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "joshuah@alum.mit.edu",
            "sender_full_name": "Joshua Horowitz (he) (F1'18)",
            "sender_id": 124997,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Help with thinking in React",
            "submessages": [],
            "timestamp": 1539881243,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d48812709bdc0ff86746b7fbe56b0f13?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>And as far as performance goes \u2013 if your trees are small and rendering nodes is cheap, don't worry about it. If one of those isn't true, you'll need to do a better job of controlling when rendering happens. The classic way of doing that is using <code>PureComponent</code>s and managing your tree as an immutable data structure (a la <a href=\"https://github.com/kolodny/immutability-helper\" target=\"_blank\" title=\"https://github.com/kolodny/immutability-helper\">https://github.com/kolodny/immutability-helper</a>).</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136056131,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "joshuah@alum.mit.edu",
            "sender_full_name": "Joshua Horowitz (he) (F1'18)",
            "sender_id": 124997,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Help with thinking in React",
            "submessages": [],
            "timestamp": 1539881620,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7614b2155716cc9e51f8be991671ed44?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"124997\">@Joshua Horowitz (F1'18)</span> Yeah you are right.  The component I has no reason to be a class component.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 136059822,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "carl.schubert@gmail.com",
            "sender_full_name": "Carl Schubert (he) (F2'18)",
            "sender_id": 130326,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Help with thinking in React",
            "submessages": [],
            "timestamp": 1539885030,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d7f66e3aca9270099c8dcf5be86878eb?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hi! <span class=\"user-mention\" data-user-id=\"130196\">@George Hyun (F2'18)</span> and I are trying to port portraits, which uses Peerjs to react-native and we're running into trouble with our import. Does anyone have any experience using RTC in react-native? Or more generally, importing javascript into react-native apps?</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 151405147,
            "is_me_message": false,
            "last_edit_timestamp": 1544479664,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "david.mahfouda@gmail.com",
            "sender_full_name": "David Mahfouda (he/they) (F2'18)",
            "sender_id": 129928,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Help with imports to react-native",
            "submessages": [],
            "timestamp": 1544479653,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fab048d6c3f7059f681e8e9595f05127?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Does anyone know of a quality source of practice for react patterns? Something equivalent in some way to leetcode for this domain? Or some good methodology for practicing for code interviews targeting React?</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157315585,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "ethanzanemiller@gmail.com",
            "sender_full_name": "Ethan Zane Miller (he) (F2'18)",
            "sender_id": 130321,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "React patterns practice",
            "submessages": [],
            "timestamp": 1548976173,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d7d116f690a46012581361874413f63b67ed9ddc?x=x&version=1",
            "client": "website",
            "content": "<p>These are not as interactive as leetcode, but a few resources I've enjoyed:<br>\n<a href=\"https://github.com/vasanthk/react-bits\" target=\"_blank\" title=\"https://github.com/vasanthk/react-bits\">https://github.com/vasanthk/react-bits</a><br>\n<a href=\"https://github.com/airbnb/javascript/tree/master/react\" target=\"_blank\" title=\"https://github.com/airbnb/javascript/tree/master/react\">https://github.com/airbnb/javascript/tree/master/react</a><br>\n<a href=\"https://reactjs.org/docs/composition-vs-inheritance.html\" target=\"_blank\" title=\"https://reactjs.org/docs/composition-vs-inheritance.html\">https://reactjs.org/docs/composition-vs-inheritance.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 157674019,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f440",
                    "emoji_name": "eyes",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "rekhviasnino@gmail.com",
                        "full_name": "Nino Rekhviashvili (she/they) (SP1'19)",
                        "id": 203433
                    },
                    "user_id": 203433
                }
            ],
            "recipient_id": 41095,
            "sender_email": "kyleschiller@gmail.com",
            "sender_full_name": "Kyle Ching Schiller (he) (m1'19)",
            "sender_id": 8704,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "React patterns practice",
            "submessages": [],
            "timestamp": 1549442163,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>What are folks' feelings about state management in React today?</p>\n<p>I'm at my new job where people want to migrate from jQuery spaghetti to React (again; this happens every place I work like Groundhog Day). I almost plugged in Redux out of rote because it's what I know, but looking at the ecosystem right now, React has this new Suspense feature, and MobX (different approach to Redux: observables, OOP) has gained a lot of fans, and the MobX author also has this new lib Immer for immutable state updates, and there's Redux-Saga for doing side effects with Redux. Also this app isn't really that big state-wise so maybe I should just use <code>setState</code>.</p>\n<p>So, what are you all using? Thoughts?</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 161302527,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "state",
            "submessages": [],
            "timestamp": 1553125724,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/441f603e9781392f41699b27170bae7ce1838dd2?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>if its a small app, I\u2019d maintain the state in the app component and create  child function components and use Hooks</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 161403136,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "scott@scott.mn",
                        "full_name": "Scott Feeney (W'13)",
                        "id": 825
                    },
                    "user_id": 825
                }
            ],
            "recipient_id": 41095,
            "sender_email": "amy@amycheng.info",
            "sender_full_name": "Amy Cheng (she) (W2'19)",
            "sender_id": 158545,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "state",
            "submessages": [],
            "timestamp": 1553209216,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"158545\">@Amy Cheng (W2'19)</span> Hooks seem cool! Have you used hooks in a project already? What do you like about them?</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 161406253,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "state",
            "submessages": [],
            "timestamp": 1553212302,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/441f603e9781392f41699b27170bae7ce1838dd2?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>nope, havent had a chance. its too new <span aria-label=\"nerd\" class=\"emoji emoji-1f913\" role=\"img\" title=\"nerd\">:nerd:</span></p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 161406999,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "amy@amycheng.info",
            "sender_full_name": "Amy Cheng (she) (W2'19)",
            "sender_id": 158545,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "state",
            "submessages": [],
            "timestamp": 1553212942,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/441f603e9781392f41699b27170bae7ce1838dd2?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>i think Hooks allow for cleaner component design aka mo\u2019 functional components</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 161407029,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "amy@amycheng.info",
            "sender_full_name": "Amy Cheng (she) (W2'19)",
            "sender_id": 158545,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "state",
            "submessages": [],
            "timestamp": 1553212985,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/441f603e9781392f41699b27170bae7ce1838dd2?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>you dont need to write Classes and have to do the all dance of passing in app-level state data through props just so you can affect state</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 161407061,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "amy@amycheng.info",
            "sender_full_name": "Amy Cheng (she) (W2'19)",
            "sender_id": 158545,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "state",
            "submessages": [],
            "timestamp": 1553213028,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>I read the <a href=\"https://reactjs.org/docs/hooks-overview.html\" target=\"_blank\" title=\"https://reactjs.org/docs/hooks-overview.html\">intro to hooks</a>. First thoughts here. Hooks have two clear advantages over React component classes:</p>\n<p>1. Easier reuse of stateful logic between components<br>\n2. Keeps related code (initialize, update, clean up upon unmount) together<br>\n.</p>\n<p>But two things stick out as being a little weird:</p>\n<p>1. Have to call effects at the top level only and in the same order every time; enforced through a linter plugin<br>\n2. To avoid needlessly rerunning effects, have to specify all the data they depend on manually; nothing enforces keeping this in sync. Disadvantage versus the <a href=\"https://mobx.js.org/intro/overview.html\" target=\"_blank\" title=\"https://mobx.js.org/intro/overview.html\">MobX library</a> that automagically keeps track of what state variables you accessed</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 161492422,
            "is_me_message": false,
            "last_edit_timestamp": 1553296243,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "state",
            "submessages": [],
            "timestamp": 1553296195,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think hooks are actually a pretty fascinating API\u2014I had the same first reaction, but my impression now after messing around with them a bit is that they really do seem quite cool (your point #2 does seem like a bummer though). But at any rate, I think it's interesting that here's this API that might actually be pretty great (and at any rate a bunch of sharp React people seem to think so), but I would have never been able to come up with it myself because I would have been too put off by the intial \"ew...\" reaction.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 161502309,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "state",
            "submessages": [],
            "timestamp": 1553308539,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>There's a <a href=\"https://github.com/facebook/react/issues/14920\" target=\"_blank\" title=\"https://github.com/facebook/react/issues/14920\">lint rule to fix #2</a> too.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 161683570,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "state",
            "submessages": [],
            "timestamp": 1553545223,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>After a few days using Hooks, I think the feature is in a \"play around with it if you have some spare time\" state, but isn't quite ready for, \"adopt it for a real thing where you need to actually produce working software.\"</p>\n<p>Some fairly average scenarios are confusing and counterintuitive, like attaching a callback to an imperative API (e.g. listen to websocket, listen to window unload), which said callback then needs to access updated state when it runs.</p>\n<p>Warnings aren't as user-friendly as you'd expect from React. For example, this mistake of mine:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">useEffect</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">stateRef</span><span class=\"p\">.</span><span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"nx\">state</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>crashes in React internals with <code>destroy is not a function</code>. (The bug is that this callback unintentionally returns <code>state</code>. And <code>useEffect</code> expects any return value to be a function to call to clean up the effect. But I'm using React's dev build. So ideally, React would notice the thing I returned isn't a function, and be a little more helpful.)</p>\n<p>Inspecting a Hook-using component in the React DevTools provides no information on its state, a significant downgrade from using <code>this.setState</code> or Redux:</p>\n<p><a href=\"/user_uploads/13/p5PnqMGlxqm2kKrqXrCYKgno/reacthooksdev.png\" target=\"_blank\" title=\"reacthooksdev.png\">reacthooksdev.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/p5PnqMGlxqm2kKrqXrCYKgno/reacthooksdev.png\" target=\"_blank\" title=\"reacthooksdev.png\"><img src=\"/user_uploads/13/p5PnqMGlxqm2kKrqXrCYKgno/reacthooksdev.png\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 162004262,
            "is_me_message": false,
            "last_edit_timestamp": 1553817446,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "state",
            "submessages": [],
            "timestamp": 1553817403,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Also I have some general discomfort with the model of \"when a variable changes, re-create ALL the closures!\"</p>\n<p>Since your callbacks cannot check <code>this.state.whatever</code> because there's no class instance and no <code>this</code>, with Hooks, changing the state makes every callback change.</p>\n<p>It feels like it's cutting against the grain, doing awkward gymnastics to solve something that's already solved more simply by a class.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 162007190,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "state",
            "submessages": [],
            "timestamp": 1553820795,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ac25c0f0dbfaa3e0d68634873943e63bdd41139c?x=x&version=1",
            "client": "website",
            "content": "<p>I enjoyed and found myself agreeing with this blog post (from the main developer of MobX) which is partly a take on whether and how hooks and related other new things affect how to do state management.  <a href=\"https://michel.codes/blogs/ui-as-an-afterthought\" target=\"_blank\" title=\"https://michel.codes/blogs/ui-as-an-afterthought\">https://michel.codes/blogs/ui-as-an-afterthought</a></p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 162069394,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "scott@scott.mn",
                        "full_name": "Scott Feeney (W'13)",
                        "id": 825
                    },
                    "user_id": 825
                }
            ],
            "recipient_id": 41095,
            "sender_email": "paul@paulwmorris.com",
            "sender_full_name": "Paul Morris (he) (SP1'17)",
            "sender_id": 100524,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "state",
            "submessages": [],
            "timestamp": 1553882368,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Forgive me, but I want to complain about <a href=\"https://redux.js.org/api/combinereducers\" target=\"_blank\" title=\"https://redux.js.org/api/combinereducers\">this</a>:</p>\n<blockquote>\n<p><code>combineReducers</code> will check your reducers by passing <code>undefined</code> to them; this is done even if you specify initial state to <code>Redux.createStore(combineReducers(...), initialState)</code>. Therefore, you must ensure your reducers work properly when receiving <code>undefined</code> as state, even if you never intend for them to actually receive <code>undefined</code> in your own code.</p>\n</blockquote>\n<p>I really wish Redux let you initialize your stores with an initial _action_, containing all the data from the server, cookies, localStorage, etc. that bootstraps your app. It adds unnecessary complexity to require the stores to be in a consistent state when they don't have any of this data.</p>\n<p>I've coped with this by passing initial state to <code>createStore</code> so the reducers should never receive <code>undefined</code>, at least. But now I have to add a meaningless default anyway to prevent Redux itself from throwing an error :(</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 162285496,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "initializing redux",
            "submessages": [],
            "timestamp": 1554158098,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/070439e129d96243cf3fa6b00cd237a6b4cc75e9?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>There will be a weekly in-person meetup happening at RC for the next 6 weeks, Thursdays at 4PM in Sammet, to discuss all things React! Thanks everyone who attended the first session today!!  </p>\n<p>For those interested, the code for the Books site I demoed can be found at <a href=\"https://github.com/jeffro94/best-books\" target=\"_blank\" title=\"https://github.com/jeffro94/best-books\">jeffro94/best-books</a> . There is currently no publicly available demo but hopefully soon and you can browse the UI code in the /ui-react subdirectory.</p>\n<p>A running example of the D3 chart &amp; tooltip component is available at: <a href=\"https://codepen.io/jeffro94/pen/LaBRyY\" target=\"_blank\" title=\"https://codepen.io/jeffro94/pen/LaBRyY\">D3 Tooltip w/ React &amp; react-faux-dom</a> </p>\n<p>If you would like to share something in the next (or any following) session, please let me know or reply to this thread!  </p>\n<p>Thanks again and see you soon<br>\n<span class=\"user-mention\" data-user-id=\"203871\">@Jaryn Colbert (SP1'19)</span> <span class=\"user-mention\" data-user-id=\"100450\">@Jason Owen (SP2'19)</span> <span class=\"user-mention\" data-user-id=\"8099\">@Michael Malis (SP2'19)</span> <span class=\"user-mention\" data-user-id=\"203433\">@Nino Rekhviashvili (SP1'19)</span> <span class=\"user-mention\" data-user-id=\"134181\">@Douglas Lerner (W1'18)</span> <span class=\"user-mention\" data-user-id=\"134387\">@Alan Chu (SP2'19)</span> <span class=\"user-mention\" data-user-id=\"203436\">@Vidhi S Shah (SP1'19)</span> <span class=\"user-mention\" data-user-id=\"203422\">@Tim Mickel (SP1'19)</span> <span class=\"user-mention\" data-user-id=\"203622\">@Isaac Pearl (SP1'19)</span> <span class=\"user-mention\" data-user-id=\"203425\">@Travis Horton (SP1'19)</span> <span class=\"user-mention\" data-user-id=\"158871\">@Sruti Modekurty (W2'19)</span> <span class=\"user-mention\" data-user-id=\"215409\">@John Paul Ashenfelter (SP2'19)</span> <span class=\"user-mention\" data-user-id=\"215548\">@Nick Aversano (SP2'19)</span> <span class=\"user-mention\" data-user-id=\"214909\">@Jared Pereira (SP2'19)</span> <span class=\"user-mention\" data-user-id=\"204350\">@Anna Walsh (SP1'19)</span> <span class=\"user-mention\" data-user-id=\"204428\">@Joe Mou (SP1'19)</span> <span class=\"user-mention\" data-user-id=\"216918\">@Jordan Marsaw (SP2'19)</span></p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 162577951,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "scott@scott.mn",
                        "full_name": "Scott Feeney (W'13)",
                        "id": 825
                    },
                    "user_id": 825
                },
                {
                    "emoji_code": "1f64f",
                    "emoji_name": "pray",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "tim@tmickel.com",
                        "full_name": "Tim Mickel (he) (SP1'19)",
                        "id": 203422
                    },
                    "user_id": 203422
                },
                {
                    "emoji_code": "1f64f",
                    "emoji_name": "pray",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "alancodes@gmail.com",
                        "full_name": "Alan Chu (he) (SP2'19)",
                        "id": 134387
                    },
                    "user_id": 134387
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "alancodes@gmail.com",
                        "full_name": "Alan Chu (he) (SP2'19)",
                        "id": 134387
                    },
                    "user_id": 134387
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nick23hi@gmail.com",
                        "full_name": "Nick Aversano (he) (SP2'19)",
                        "id": 215548
                    },
                    "user_id": 215548
                },
                {
                    "emoji_code": "1f64f",
                    "emoji_name": "pray",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "rekhviasnino@gmail.com",
                        "full_name": "Nino Rekhviashvili (she/they) (SP1'19)",
                        "id": 203433
                    },
                    "user_id": 203433
                }
            ],
            "recipient_id": 41095,
            "sender_email": "jross323@gmail.com",
            "sender_full_name": "Jeff Ross (SP1'19)",
            "sender_id": 203537,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "React meetup for Spring II",
            "submessages": [],
            "timestamp": 1554419471,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/070439e129d96243cf3fa6b00cd237a6b4cc75e9?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Thanks so much <span class=\"user-mention\" data-user-id=\"203422\">@Tim Mickel (SP1'19)</span> for sharing this week!  <br>\nUpdate: the meetup will take place on Wednesdays at 4PM going forward to avoid conflict with the PEOT meeting on Thursdays.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 163193690,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "jross323@gmail.com",
            "sender_full_name": "Jeff Ross (SP1'19)",
            "sender_id": 203537,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "React meetup for Spring II",
            "submessages": [],
            "timestamp": 1555078551,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p>I don't have much knowledge about JS or React, but I have been tasked with building a terminal-like app that receives packets from a server, processes those packets, and then displays them. The UI also keeps track of the number of messages sent/received/respondedTo. </p>\n<p>My problem is that there are some instances where the UI has to deal with ~10k packets a second. My original naive implementation used 3 calls to React.setState() every time a packet came in --once to update the \"received-packets\" UI number, a second to update the \"responses packet\" number (where the messages are actually a response to a message sent by the browser), and a third update to actually display the message to a terminal-like display. </p>\n<p>This does not work for the amount of packets the client has to handle. My current solution, is to replace every call to \"setState()\" with a call to \"addToBuffer()\", and then adding a Timer in componentDidMount() that calls \"flushBuffer()\" every 200ms. This actually seems to work quite well, but I can't help but feel that I am breaking a bunch of react laws and best-practices by manually handling the display.</p>\n<p>Does anyone have any ideas about how I might go about this ?</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171091900,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Is calling setState on a timer considered bad?",
            "submessages": [],
            "timestamp": 1563379567,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>So when 10k packets come in per second, they come in one by one? Not in batches or anything?</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171095637,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Is calling setState on a timer considered bad?",
            "submessages": [],
            "timestamp": 1563382450,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"813\">@Alan O'Donnell (he) (S1'19)</span> yes</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171099689,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Is calling setState on a timer considered bad?",
            "submessages": [],
            "timestamp": 1563385206,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p>My buffering strategy is basically the equivalent of client-side batching. It just seems like a timer is a scary way to do it and goes against the idea that React should be managing the UI and not me</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171100786,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Is calling setState on a timer considered bad?",
            "submessages": [],
            "timestamp": 1563385672,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, I'm not sure what you should do here... I sort of thought React would already batch setState calls, but I guess not well enough? Hmm.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171102206,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Is calling setState on a timer considered bad?",
            "submessages": [],
            "timestamp": 1563386483,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/26fa664d693a3fa50e6b1431b777a8d27015fbdc?x=x&version=2",
            "client": "website",
            "content": "<p>A typical situation I encounter in React is rendering DOM elements by mapping over a data Array:</p>\n<p><code>return data.map(d =&gt; &lt;div onMouseEnter={...} /&gt;)</code>)</p>\n<p>then when the user hovers over one, saving information about the hovered node to state. I'm trying to figure out whether it's more efficient to save the entire node object to state, or just a unique identifier. For example:</p>\n<p>1. <code>onMouseEnter={() =&gt; setState({ hovered: d })}</code><br>\n2. <code>onMouseEnter={() =&gt; setState({ hovered: d.key })}</code><br>\nSomewhere else in the app, I'll want to get access to the full <code>d</code> object, so either I already have it in state or I can look it up using the key. Does anyone have any ideas about efficiency/tradeoffs between these two choices?</p>\n<p>I suspect part of the answer depends on what method I use to look up the full object if I just have the key. If I'm filtering an array every time, that's not great. If I use an ES6 Map(), it's a fast lookup, but then I have a second data structure with basically the same information as my original Array. There's another option, where <code>data</code> is an ES6 Map to begin with, but I need to do:</p>\n<p>3. <code>Array.from(dataAsMap).map(d =&gt; &lt;div onMouseEnter={...} /&gt;)</code><br>\nAnd I'm not sure if that <code>Array.from</code> is just shifting the inefficiency somewhere else.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171104960,
            "is_me_message": false,
            "last_edit_timestamp": 1563388665,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "alecbarrett@gmail.com",
            "sender_full_name": "Alec Barrett (he) (W2'17)",
            "sender_id": 100451,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "efficiently save data in state",
            "submessages": [],
            "timestamp": 1563388273,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Does <code>flushBuffer</code> work by calling <code>setState</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171115362,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Is calling setState on a timer considered bad?",
            "submessages": [],
            "timestamp": 1563395904,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Both 1 and 2 seem equivalent, since 1 is just copying a pointer; it's not a deep copy. And while the state value will prevent <code>d</code> from getting GC'd, so will the rendered closure, <code>() =&gt; setState({ hovered: d })</code>. (But what happens if you re-render and the <code>hovered</code> data is no longer present?)</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171115808,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "efficiently save data in state",
            "submessages": [],
            "timestamp": 1563396220,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>The possible performance caveat I see here is the closures. When you put <code>() =&gt; whatever</code> in your render method, the closure gets re-created on every render even if the underlying data hasn't changed, which can make React do needless reconciliation work. But are you seeing a performance problem in practice? If not, don't worry about it.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171116024,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "efficiently save data in state",
            "submessages": [],
            "timestamp": 1563396371,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"825\">@Scott Feeney (W'13)</span>  yes it does. I am effectively doing client side batching. But is there a better way to do this than setting a timer? It seems incorrect</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171123418,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Is calling setState on a timer considered bad?",
            "submessages": [],
            "timestamp": 1563403189,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>What seems incorrect about it?</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171124152,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Is calling setState on a timer considered bad?",
            "submessages": [],
            "timestamp": 1563404079,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/26fa664d693a3fa50e6b1431b777a8d27015fbdc?x=x&version=2",
            "client": "website",
            "content": "<p>Thanks, I'm not observing any performance problems, so it was mostly an academic/design question.  In all of these cases I'd include an <code>onMouseLeave</code> event handler that sets <code>hovered: null</code> on state, so if the data disappears, the value on state would too.</p>\n<p>Your point about closures is very helpful - I hadn't realized the implications of <em>that</em> design choice.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171172918,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "alecbarrett@gmail.com",
            "sender_full_name": "Alec Barrett (he) (W2'17)",
            "sender_id": 100451,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "efficiently save data in state",
            "submessages": [],
            "timestamp": 1563458630,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p>Does <code>onMouseLeave</code> fire when a node is removed from the DOM?</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171295233,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "efficiently save data in state",
            "submessages": [],
            "timestamp": 1563572051,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/26fa664d693a3fa50e6b1431b777a8d27015fbdc?x=x&version=2",
            "client": "website",
            "content": "<p>That's a good question - I don't know (and will experiment to find out), but in practice the data only changes as a result of a user action, so their mouse would have to leave the node with the listener in order to get to the UI that would change the data.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171446960,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "alecbarrett@gmail.com",
            "sender_full_name": "Alec Barrett (he) (W2'17)",
            "sender_id": 100451,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "efficiently save data in state",
            "submessages": [],
            "timestamp": 1563814115,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3670aa0d1ce05f885788e64d3ad6404f7cf73962?x=x&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"102005\">@Jacquin Mininger (F2'17)</span>, it seems like this conversation petered out. FWIW, in my book there's nothing wrong with a React component owning a timer/interval. Just make sure you clear it in <code>componentWillUnmount</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171559799,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "scott@scott.mn",
            "sender_full_name": "Scott Feeney (W'13)",
            "sender_id": 825,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Is calling setState on a timer considered bad?",
            "submessages": [],
            "timestamp": 1563917523,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0031ae6808e421803a47dd48c189e6a205070b92?x=x&version=5",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"825\">@Scott Feeney (W'13)</span> Sorry, I totally didn't see your last message. In the end it seemed to work quite well -- but as I am relatively inexperienced with JS and React, I wanted to check. I was also surprised that React didn't do this for me somehow. </p>\n<p>I should clarify that it ended up being between 2500-5000 packets a second, not 10,000 (although each packet had to parsed and dealt with separately)</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 171560066,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "jacquin.mininger@gmail.com",
            "sender_full_name": "Jacquin Mininger (F2'17)",
            "sender_id": 102005,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Is calling setState on a timer considered bad?",
            "submessages": [],
            "timestamp": 1563917780,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a40cd9cd52ed9481320b55f346ffdf3a0c6db296?x=x&version=3",
            "client": "website",
            "content": "<p>Hey everyone, React newbie here. I'm not a frontend guy, but I think I have a decent understanding of basic frontend JS at this point. Can somebody recommend a React tutorial(s) that they think would be helpful?</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 173671685,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "hello@tomlisankie.com",
            "sender_full_name": "Thomas Francis Lisankie (he) (F1'19)",
            "sender_id": 233915,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "React tutorials",
            "submessages": [],
            "timestamp": 1566317560,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/06a1df35c191e2944c606e9035780a70?d=identicon&version=1",
            "client": "website",
            "content": "<p>I had a good experience working with the tutorial on the react website <a href=\"https://reactjs.org/tutorial/tutorial.html\" target=\"_blank\" title=\"https://reactjs.org/tutorial/tutorial.html\">https://reactjs.org/tutorial/tutorial.html</a> It does a solid job of clearly introducing the core concepts of the library (along with the usual make-the-thing-work guidance).</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 173673934,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "dorafraeman@gmail.com",
            "sender_full_name": "Dora Caswell (she) (S1'19)",
            "sender_id": 222366,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "React tutorials",
            "submessages": [],
            "timestamp": 1566319298,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yeah, the tutorial is good. Another resource I like is Dan Abramov's blog, <a href=\"https://overreacted.io/\" target=\"_blank\" title=\"https://overreacted.io/\">https://overreacted.io/</a>. He's one of the main React people (he might have written the tutorial actually?).</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 173674713,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "React tutorials",
            "submessages": [],
            "timestamp": 1566319939,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6f8ddedf593eefcabbc13434b183e7d7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p><a href=\"https://egghead.io\" target=\"_blank\" title=\"https://egghead.io\">https://egghead.io</a> has good introductory React and Redux courses (the latter by Dan Abramov!). Not all of their videos are free but those are.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 173685184,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "allie.jones@gmail.com",
            "sender_full_name": "Allie Jones (she/they) (W'13)",
            "sender_id": 821,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "React tutorials",
            "submessages": [],
            "timestamp": 1566327309,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/05d3b7075db36e6c7cc6d32352cf7a9c8156e6a0?x=x&version=2",
            "client": "website",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 177157903,
            "is_me_message": false,
            "last_edit_timestamp": 1570031024,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "trinityXmontoya@gmail.com",
            "sender_full_name": "Trinity Montoya (she) (S1'19)",
            "sender_id": 221831,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "NYC job opportunity",
            "submessages": [],
            "timestamp": 1570028195,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e8754e26d240fe895ca1a5ea076578?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://reactjs.org/docs/concurrent-mode-intro.html\" target=\"_blank\" title=\"https://reactjs.org/docs/concurrent-mode-intro.html\">https://reactjs.org/docs/concurrent-mode-intro.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 178975912,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "recurse@bellisar.io",
                        "full_name": "Alessia Bellisario (she) (m3'19)",
                        "id": 214910
                    },
                    "user_id": 214910
                }
            ],
            "recipient_id": 41095,
            "sender_email": "miles@blackwood.io",
            "sender_full_name": "Miles Blackwood Robinson (F2'15)",
            "sender_id": 8703,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "concurrent mode",
            "submessages": [],
            "timestamp": 1571938032,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fd76594be713b9be6da1b279449fd158?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I would love to sit with someone tomorrow (Friday, 10/25) to go over a code challenge.  I don't want to pair on the project, which would feel like cheating, but I'd like to look at the instructions with someone who knows react and redux.  I'm familiar with react but I've never really touched redux.  So I guess I would also appreciate a high-level overview of redux.  For example: what is a reducer?</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179020052,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "lp10011@gmail.com",
            "sender_full_name": "Larry Person (he) (F1'19)",
            "sender_id": 233913,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "need help with code challenge",
            "submessages": [],
            "timestamp": 1571976111,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/282da691709f4715fc3e0ff6bebd278b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Real quick, a reducer in redux is a function that takes the old state plus a value that represents \"whatever just happened\" (often a little object, e.g. <code>{ type: \"USER_CLICKED_ON_THING\" }</code>), and then computes the new state. The idea is that in redux states are immutable, so updating the state amounts to _computing_ the new state from the old.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179066490,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "alan.m.odonnell@gmail.com",
            "sender_full_name": "Alan O'Donnell (he) (S1'19)",
            "sender_id": 813,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "need help with code challenge",
            "submessages": [],
            "timestamp": 1572021465,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1e863fa66f1c367b24c00c70c2e45ee2?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'd be happy to (and am in today). Although disclaimer I'm definitely not an expert but have also wrestled with getting an intuitive understanding of redux/flux in the past</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179067044,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "alex_haak@hotmail.co.uk",
            "sender_full_name": "Alex Haak (he) (F2'19)",
            "sender_id": 241282,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "need help with code challenge",
            "submessages": [],
            "timestamp": 1572021790,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fd76594be713b9be6da1b279449fd158?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"241282\">@Alex Haak (he) (F2'19)</span> .  I'm just seeing this now.  For some reason my zulip notifications are unpredictable.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179140235,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "lp10011@gmail.com",
            "sender_full_name": "Larry Person (he) (F1'19)",
            "sender_id": 233913,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "need help with code challenge",
            "submessages": [],
            "timestamp": 1572121633,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fd76594be713b9be6da1b279449fd158?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I just created my first react app from scratch!</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179140298,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "lp10011@gmail.com",
            "sender_full_name": "Larry Person (he) (F1'19)",
            "sender_id": 233913,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "need help with code challenge",
            "submessages": [],
            "timestamp": 1572121687,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fd76594be713b9be6da1b279449fd158?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>And when I saw created, I mean I ran <code>create-react-app</code></p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 179140307,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "lp10011@gmail.com",
            "sender_full_name": "Larry Person (he) (F1'19)",
            "sender_id": 233913,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "need help with code challenge",
            "submessages": [],
            "timestamp": 1572121709,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fd76594be713b9be6da1b279449fd158?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Would anybody like to pair with me on this?  it's driving me nuts.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 183514557,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "lp10011@gmail.com",
            "sender_full_name": "Larry Person (he) (F1'19)",
            "sender_id": 233913,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "How do I simulate a mouse click using enzyme and jest?",
            "submessages": [],
            "timestamp": 1576462456,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8d1f7aeaf058d6d3aa3e994930e19bb893097c61?x=x&version=4",
            "client": "website",
            "content": "<p>I'm not in session right now but you should be able to select an element and then call <code>.click()</code> on it.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 183553789,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "steve@stevegattuso.me",
            "sender_full_name": "Steve Gattuso (he) (S1'19)",
            "sender_id": 221911,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "How do I simulate a mouse click using enzyme and jest?",
            "submessages": [],
            "timestamp": 1576506883,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8d1f7aeaf058d6d3aa3e994930e19bb893097c61?x=x&version=4",
            "client": "website",
            "content": "<p>or you can call <code>.simulate('click')</code>. here's an example from one of my tests:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nx\">c</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">&#39;.top-links li&#39;</span><span class=\"p\">).</span><span class=\"nx\">at</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">).</span><span class=\"nx\">simulate</span><span class=\"p\">(</span><span class=\"s1\">&#39;click&#39;</span><span class=\"p\">);</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 183553858,
            "is_me_message": false,
            "last_edit_timestamp": 1576506936,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "steve@stevegattuso.me",
            "sender_full_name": "Steve Gattuso (he) (S1'19)",
            "sender_id": 221911,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "How do I simulate a mouse click using enzyme and jest?",
            "submessages": [],
            "timestamp": 1576506923,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fd76594be713b9be6da1b279449fd158?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Thanks.  What you describe above is not working when I try it.  I'm expecting the simulated click to cause the click handler to be called.  That is not happening.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 183568578,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "lp10011@gmail.com",
            "sender_full_name": "Larry Person (he) (F1'19)",
            "sender_id": 233913,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "How do I simulate a mouse click using enzyme and jest?",
            "submessages": [],
            "timestamp": 1576515587,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8d1f7aeaf058d6d3aa3e994930e19bb893097c61?x=x&version=4",
            "client": "website",
            "content": "<p>hmm, could I see the click handler?</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 183568737,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "steve@stevegattuso.me",
            "sender_full_name": "Steve Gattuso (he) (S1'19)",
            "sender_id": 221911,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "How do I simulate a mouse click using enzyme and jest?",
            "submessages": [],
            "timestamp": 1576515647,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8d1f7aeaf058d6d3aa3e994930e19bb893097c61?x=x&version=4",
            "client": "website",
            "content": "<p>also are you sure there's nothing below the element you're simulating in the DOM that might be hijacking the click and calling <code>e.preventDefault()</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 183568782,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "steve@stevegattuso.me",
            "sender_full_name": "Steve Gattuso (he) (S1'19)",
            "sender_id": 221911,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "How do I simulate a mouse click using enzyme and jest?",
            "submessages": [],
            "timestamp": 1576515665,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8d1f7aeaf058d6d3aa3e994930e19bb893097c61?x=x&version=4",
            "client": "website",
            "content": "<p>or something along those lines</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 183568786,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "steve@stevegattuso.me",
            "sender_full_name": "Steve Gattuso (he) (S1'19)",
            "sender_id": 221911,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "How do I simulate a mouse click using enzyme and jest?",
            "submessages": [],
            "timestamp": 1576515667,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fd76594be713b9be6da1b279449fd158?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Thanks for responding <span class=\"user-mention\" data-user-id=\"221911\">@Steve Gattuso (he) (S1'19)</span> .  The issue turned out to be things not getting created the way I thought they were.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 184069435,
            "is_me_message": false,
            "last_edit_timestamp": 1577048796,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "lp10011@gmail.com",
            "sender_full_name": "Larry Person (he) (F1'19)",
            "sender_id": 233913,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "How do I simulate a mouse click using enzyme and jest?",
            "submessages": [],
            "timestamp": 1577048789,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0665ef8317951b605caffeb7e648d617?d=identicon&version=1",
            "client": "website",
            "content": "<p>Today we start a React club. During the first meeting I'm gonna do a brief introduction into modern React with Hooks. We're gonna build a simple todo list app from scratch and discuss the React concepts: <a href=\"https://github.com/vpavlenko/react-club\" target=\"_blank\" title=\"https://github.com/vpavlenko/react-club\">https://github.com/vpavlenko/react-club</a></p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188650984,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "cxielamiko@gmail.com",
            "sender_full_name": "Vitaly Pavlenko (he) (W2'20)",
            "sender_id": 255299,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "react club SP1'20",
            "submessages": [],
            "timestamp": 1582214405,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/590c575e650d30da45fb6b65616519acc3ac782f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>If anyone who is comfortable with react hooks wants to take a look at some code I wrote lmk! I will be around most day. <span aria-label=\"sun face\" class=\"emoji emoji-1f31e\" role=\"img\" title=\"sun face\">:sun_face:</span></p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 188936585,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "kalli.retzepi@gmail.com",
            "sender_full_name": "Kalli Retzepi (she) (SP1'20)",
            "sender_id": 263505,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "react club SP1'20",
            "submessages": [],
            "timestamp": 1582558558,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7cffd64efcfc0bc12717241617c96235381d71e0?x=x&version=9",
            "client": "website",
            "content": "<p>Does anyone <span class=\"user-group-mention\" data-user-group-id=\"41\">@Currently at RC</span> have experience with React Router and is willing to pair?</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 189923695,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "narnarshahin@gmail.com",
            "sender_full_name": "Nar Shahin (they) (SP1'20)",
            "sender_id": 246971,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "react router",
            "submessages": [],
            "timestamp": 1583521267,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/590c575e650d30da45fb6b65616519acc3ac782f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I made this quick interactive experiment in grid compositions: <a href=\"https://design-grid.now.sh/\" target=\"_blank\" title=\"https://design-grid.now.sh/\">https://design-grid.now.sh/</a> - I want to export the &lt;Grid&gt; component (code here <a href=\"https://github.com/Kallirroi/designGrid\" target=\"_blank\" title=\"https://github.com/Kallirroi/designGrid\">https://github.com/Kallirroi/designGrid</a>). Either download it as a .png file or save it to localStorage maybe?</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 190308757,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "kalli.retzepi@gmail.com",
            "sender_full_name": "Kalli Retzepi (she) (SP1'20)",
            "sender_id": 263505,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "screenshot a component",
            "submessages": [],
            "timestamp": 1583947617,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7a48902c9379b61bebcc7d4ddf51078ad881b09c?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I have a repo with a bunch on nlp stuff in python and I'm trying to add a front end in react to it. I'm totally new to react and all the tutorials I've seen so far use <code>create-react-app</code> which seems pretty neat. However, it's complaining about the stuff I already have in the repo, and I'm wondering if there's a better way to do this? Whether it means react and python stuff shouldn't live in the same repository or I should add react some other way. Does anyone have any pointers?</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 194742111,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "serena.peruzzo@gmail.com",
            "sender_full_name": "Serena Peruzzo (she) (SP2'20)",
            "sender_id": 7642,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "add react to existing project",
            "submessages": [],
            "timestamp": 1587422240,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/27f18c8e071b5fb513029f36abf4d92d?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<div class=\"codehilite\"><pre><span></span>it&#39;s complaining about the stuff I already have in the repo\n</pre></div>\n\n\n<p>Could you give a little more context or the error log?</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 194757422,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "benschac@gmail.com",
            "sender_full_name": "Benjamin Schachter (he/they) (W1'16)",
            "sender_id": 100320,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "add react to existing project",
            "submessages": [],
            "timestamp": 1587439281,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/27f18c8e071b5fb513029f36abf4d92d?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I use it. Are you still having issues?</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 194757429,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "benschac@gmail.com",
            "sender_full_name": "Benjamin Schachter (he/they) (W1'16)",
            "sender_id": 100320,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "react router",
            "submessages": [],
            "timestamp": 1587439312,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7a48902c9379b61bebcc7d4ddf51078ad881b09c?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>yeah, sorry!</p>\n<div class=\"codehilite\"><pre><span></span>npx: installed 99 in 6.048s\nThe directory on-laws contains files that could conflict:\n\n  data/\n  nlp/\n  presentations/\n\nEither try using a new directory name, or remove the files listed above.\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 194800221,
            "is_me_message": false,
            "last_edit_timestamp": 1587475219,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "serena.peruzzo@gmail.com",
            "sender_full_name": "Serena Peruzzo (she) (SP2'20)",
            "sender_id": 7642,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "add react to existing project",
            "submessages": [],
            "timestamp": 1587475211,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/27f18c8e071b5fb513029f36abf4d92d?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>it feels like generic log because the files are there before you used <code>cra</code> since you might be putting it in the same client folder.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 194806748,
            "is_me_message": false,
            "last_edit_timestamp": 1587480392,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "benschac@gmail.com",
            "sender_full_name": "Benjamin Schachter (he/they) (W1'16)",
            "sender_id": 100320,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "add react to existing project",
            "submessages": [],
            "timestamp": 1587478090,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adde79cd0c8595d1dca004910b4fcbcfb36922bc?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"7642\">@Serena Peruzzo (she) (SP2'20)</span> I think I would put the react project in its own subdirectory in the project directory, like a <code>client/</code> or <code>frontend/</code> folder</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 194811597,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "mail@jesentanadi.com",
            "sender_full_name": "Jesen Tanadi (he) (m3'20)",
            "sender_id": 276132,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "add react to existing project",
            "submessages": [],
            "timestamp": 1587480103,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/adde79cd0c8595d1dca004910b4fcbcfb36922bc?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I've also seen projects organized like:</p>\n<div class=\"codehilite\"><pre><span></span>project_dir\n|-- frontend/\n|__ backend/\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 194811830,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "mail@jesentanadi.com",
            "sender_full_name": "Jesen Tanadi (he) (m3'20)",
            "sender_id": 276132,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "add react to existing project",
            "submessages": [],
            "timestamp": 1587480186,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7a48902c9379b61bebcc7d4ddf51078ad881b09c?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 194855463,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f605",
                    "emoji_name": "sweat_smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mail@jesentanadi.com",
                        "full_name": "Jesen Tanadi (he) (m3'20)",
                        "id": 276132
                    },
                    "user_id": 276132
                }
            ],
            "recipient_id": 41095,
            "sender_email": "serena.peruzzo@gmail.com",
            "sender_full_name": "Serena Peruzzo (she) (SP2'20)",
            "sender_id": 7642,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "add react to existing project",
            "submessages": [],
            "timestamp": 1587500037,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/27f18c8e071b5fb513029f36abf4d92d?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>it's a pretty cryptic error. The way it's written feels like it's the system itself. Not just something general.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 194886306,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "benschac@gmail.com",
            "sender_full_name": "Benjamin Schachter (he/they) (W1'16)",
            "sender_id": 100320,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "add react to existing project",
            "submessages": [],
            "timestamp": 1587528231,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/034742a553006024a160b712f18f06bb74fd2adf?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"7642\">Serena Peruzzo (she) (SP2'20)</span> <a href=\"#narrow/stream/27173-react/topic/add.20react.20to.20existing.20project/near/194800221\">said</a>:</p>\n<blockquote>\n<p>yeah, sorry!</p>\n<div class=\"codehilite\"><pre><span></span><code>npx: installed 99 in 6.048s\nThe directory on-laws contains files that could conflict:\n\n  data/\n  nlp/\n  presentations/\n\nEither try using a new directory name, or remove the files listed above.\n</code></pre></div>\n\n\n</blockquote>\n<p>Did you solve the problem?</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206425667,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "steve.silverio.cruz@gmail.com",
            "sender_full_name": "Steve Cruz (he) (F1'20)",
            "sender_id": 327362,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "add react to existing project",
            "submessages": [],
            "timestamp": 1597031364,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/034742a553006024a160b712f18f06bb74fd2adf?x=x&version=2",
            "client": "website",
            "content": "<p>I have some experience with React Router. If someone needs any help, they can reach out to me</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206425718,
            "is_me_message": false,
            "last_edit_timestamp": 1597031473,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "steve.silverio.cruz@gmail.com",
            "sender_full_name": "Steve Cruz (he) (F1'20)",
            "sender_id": 327362,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "react router",
            "submessages": [],
            "timestamp": 1597031412,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/cc554841369c2f30d7cd8a76084a5c36?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm learning react, and I'm currently a bit confused by how context data is accessed by a component. Here is some code from a tutorial I'm working through:<br>\nThe context:</p>\n<div class=\"codehilite\"><pre><span></span><code>import React, { createContext, Component } from &#39;react&#39;\n\nexport const ThemeContext = createContext();\n\nclass ThemeContextProvider extends Component {\n    state = {\n        isLightTheme: true,\n        light: { syntax: &#39;#555&#39;, ui: &#39;#ddd&#39;, bg: &#39;#eee&#39; },\n        dark: { syntax: &#39;#ddd&#39;, ui: &#39;#333&#39;, bg: &#39;#555&#39; },\n    }\n\n    toggleTheme = () =&gt; {\n        this.setState({\n            isLightTheme: !this.state.isLightTheme\n        })\n    }\n\n    render() {\n        return (\n            &lt;ThemeContext.Provider value={{...this.state, toggleTheme: this.toggleTheme}}&gt;\n                {this.props.children}\n            &lt;/ThemeContext.Provider&gt;\n        );\n    }\n}\n\nexport default ThemeContextProvider;\n</code></pre></div>\n\n\n<p>The component:</p>\n<div class=\"codehilite\"><pre><span></span><code>import React, { Component } from &#39;react&#39;;\nimport { ThemeContext } from &#39;../contexts/ThemeContext&#39;;\n\nclass Navbar extends Component {\n    static contextType = ThemeContext;\n    render() {\n        console.log(this.context);\n        const { isLightTheme, light, dark } = this.context;\n        const theme = isLightTheme ? light : dark;\n        return (\n            &lt;nav style={{ background: theme.ui, color: theme.syntax }}&gt;\n                &lt;h1&gt;Context App&lt;/h1&gt;\n                &lt;ul&gt;\n                    &lt;li&gt;Home&lt;/li&gt;\n                    &lt;li&gt;About&lt;/li&gt;\n                    &lt;li&gt;Contact&lt;/li&gt;\n                &lt;/ul&gt;\n            &lt;/nav&gt;\n        );\n    }\n}\n\nexport default Navbar;\n</code></pre></div>\n\n\n<p>And here is what the app looks like:</p>\n<div class=\"codehilite\"><pre><span></span><code>import ThemeToggle from &#39;./components/ThemeToggle&#39;;\nimport AuthContextProvider from &#39;./contexts/AuthContext&#39;;\nimport ThemeContextProvider from &#39;./contexts/ThemeContext&#39;;\n\nfunction App() {\n    return (\n        &lt;div className=&quot;App&quot;&gt;\n            &lt;ThemeContextProvider&gt;\n                &lt;AuthContextProvider&gt;\n                    &lt;Navbar/&gt;\n                    &lt;BookList/&gt;\n                    &lt;ThemeToggle/&gt;\n                &lt;/AuthContextProvider&gt;\n            &lt;/ThemeContextProvider&gt;\n        &lt;/div&gt;\n    );\n}\n\nexport default App;\n</code></pre></div>\n\n\n<p>You'll notice that the navbar simply imports the context, and assigns it with <code>static contextType = ThemeContext;</code>. Well, in the ThemeContext code, that context is exported before the definition of the relevant provider class. And although the navbar is inside the provider tag, I don't understand how it's able to know that it should be getting the context from the provider. In un-educated eyes, the definition of the provider and the exporting of the context seem like two distinct and separate things, and there's no way navbar should have any idea what \"dark theme\" is. So what's going on?</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211340230,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "evanconwaymusic@gmail.com",
            "sender_full_name": "Evan Conway (he) (S2'20)",
            "sender_id": 314681,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Trouble Understanding Context Providers",
            "submessages": [],
            "timestamp": 1601091947,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/cc554841369c2f30d7cd8a76084a5c36?d=identicon&version=1",
            "client": "website",
            "content": "<p>Actually, the fact we can call <code>const { isLightTheme, light, dark } = this.context;</code> after <code>static contextType = ThemeContext</code> doesn't make sense either. Part of that is I've never seen <code>static</code> in javascript before, but also I don't know why assigning a value to <code>contextType</code> sets a value for <code>this.context</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211340555,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "evanconwaymusic@gmail.com",
            "sender_full_name": "Evan Conway (he) (S2'20)",
            "sender_id": 314681,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Trouble Understanding Context Providers",
            "submessages": [],
            "timestamp": 1601092533,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/203ece6b30be5cb94c1a95a8a4976d34a584298f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>So from what I've read, <code>context</code> acts like a global variable once set. So in the case of your code when ThemeContextProvider is called, it sets a global context with this code: </p>\n<div class=\"codehilite\"><pre><span></span><code>            &lt;ThemeContext.Provider value={{...this.state, toggleTheme: this.toggleTheme}}&gt;\n                {this.props.children}\n            &lt;/ThemeContext.Provider&gt;\n</code></pre></div>\n\n\n<p>creating a context that holds</p>\n<div class=\"codehilite\"><pre><span></span><code>        isLightTheme: true,\n        light: { syntax: &#39;#555&#39;, ui: &#39;#ddd&#39;, bg: &#39;#eee&#39; },\n        dark: { syntax: &#39;#ddd&#39;, ui: &#39;#333&#39;, bg: &#39;#555&#39; },\n        toggleTheme\n</code></pre></div>\n\n\n<p>A <code>static</code> method allows for methods to be called without a class. I think this piece creates a context and binds it to the current object it is being called within. So <code>static contextType = ThemeContext;</code> being called inside of NavBar binds context to the NavBar allowing you to retrieve the context set by ThemeContextProvider. This is also why <code>ThemeContextProvider</code> is a parent to <code>NavBar</code> in the App.js file so the value is set before NavBar access that context information.</p>\n<p>Happy to jump on a call and talk through this as well, since I am still learning and may have some holes in my thoughts on how this is functioning.</p>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211380421,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "ilawal1996@gmail.com",
            "sender_full_name": "Ifeoluwa Lawal (he) (F1'20)",
            "sender_id": 327910,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Trouble Understanding Context Providers",
            "submessages": [],
            "timestamp": 1601150767,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/203ece6b30be5cb94c1a95a8a4976d34a584298f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>To remove some of the import export abstraction, if I am thinking about this correct, if you substituted the <code>&lt;ThemeContextProvider&gt;</code> in App.js with <code>&lt;ThemeContext.Provider value={{isLightTheme: true,\n        light: { syntax: '#555', ui: '#ddd', bg: '#eee' },\n        dark: { syntax: '#ddd', ui: '#333', bg: '#555' }, toggleTheme: true }}&gt;</code> and had <code>const ThemeContext = React.createContext()</code> so App.js knows what ThemeContext is, your code should function the same (I could be missing though what the {this.props.children} part is doing).</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"kr\">import</span> <span class=\"nx\">React</span> <span class=\"nx\">from</span> <span class=\"s1\">'react'</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">ThemeContext</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createContext</span><span class=\"p\">()</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">App</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">className</span><span class=\"o\">=</span><span class=\"s\">\"App\"</span><span class=\"p\">&gt;</span>\n            <span class=\"p\">&lt;</span><span class=\"nt\">ThemeContext</span><span class=\"p\">.</span><span class=\"na\">Provider</span> <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"p\">{{</span><span class=\"nx\">isLightTheme</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n        <span class=\"nx\">light</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">syntax</span><span class=\"o\">:</span> <span class=\"s1\">'#555'</span><span class=\"p\">,</span> <span class=\"nx\">ui</span><span class=\"o\">:</span> <span class=\"s1\">'#ddd'</span><span class=\"p\">,</span> <span class=\"nx\">bg</span><span class=\"o\">:</span> <span class=\"s1\">'#eee'</span> <span class=\"p\">},</span>\n        <span class=\"nx\">dark</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">syntax</span><span class=\"o\">:</span> <span class=\"s1\">'#ddd'</span><span class=\"p\">,</span> <span class=\"nx\">ui</span><span class=\"o\">:</span> <span class=\"s1\">'#333'</span><span class=\"p\">,</span> <span class=\"nx\">bg</span><span class=\"o\">:</span> <span class=\"s1\">'#555'</span> <span class=\"p\">},</span> <span class=\"nx\">toggleTheme</span><span class=\"o\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}}&gt;</span>\n                <span class=\"p\">&lt;</span><span class=\"nt\">AuthContextProvider</span><span class=\"p\">&gt;</span>\n                    <span class=\"p\">&lt;</span><span class=\"nt\">Navbar</span><span class=\"p\">/&gt;</span>\n                    <span class=\"p\">&lt;</span><span class=\"nt\">BookList</span><span class=\"p\">/&gt;</span>\n                    <span class=\"p\">&lt;</span><span class=\"nt\">ThemeToggle</span><span class=\"p\">/&gt;</span>\n                <span class=\"p\">&lt;/</span><span class=\"nt\">AuthContextProvider</span><span class=\"p\">&gt;</span>\n            <span class=\"p\">&lt;/</span><span class=\"nt\">ThemeContext</span><span class=\"p\">.</span><span class=\"na\">Provider</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "react",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211380769,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 41095,
            "sender_email": "ilawal1996@gmail.com",
            "sender_full_name": "Ifeoluwa Lawal (he) (F1'20)",
            "sender_id": 327910,
            "sender_realm_str": "recurse",
            "stream_id": 27173,
            "subject": "Trouble Understanding Context Providers",
            "submessages": [],
            "timestamp": 1601151323,
            "topic_links": [],
            "type": "stream"
        }
    ],
    "msg": "",
    "result": "success"
}
