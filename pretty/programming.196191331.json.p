{
    "anchor": 196191331,
    "found_anchor": true,
    "found_newest": true,
    "found_oldest": false,
    "history_limited": false,
    "messages": [
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f48e978e92f5b7dbaed6e4b4115f0dda67fdac34?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hi,</p>\n<p>I'm working on some UI for my game, and I was wondering if anyone could help me code it more efficiently. The problem boils down to: I want to place a rectangular box onto a rectangular grid, where the grid may already contain other boxes. The boxes come one-at-a-time and may vary in length and width. Furthermore, two boxes can be combined to form a new box that's taller and wider.</p>\n<p>The only way I can think to solve this is brute-force. I tried doing some googling and found some stuff about the bin packing problem, but I wonder if my problem is enough related to that one.</p>\n<p>Thank you!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 196190818,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "wgmarcy@gmail.com",
            "sender_full_name": "Bill Marcy (he) (SP2'20)",
            "sender_id": 256987,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Placing rectangles",
            "submessages": [],
            "timestamp": 1588603820,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ef0cc9607b07f392f70560a43dbbb2d0efd6328?x=x&version=1",
            "client": "website",
            "content": "<p>the overlap of 2 rectangles isn't necessarily a new rectangle - what do you want to have happen in those cases?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 196191331,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "brian.kihoon.lee@gmail.com",
            "sender_full_name": "Brian Lee (F1'16)",
            "sender_id": 100043,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Placing rectangles",
            "submessages": [],
            "timestamp": 1588604041,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ef0cc9607b07f392f70560a43dbbb2d0efd6328?x=x&version=1",
            "client": "website",
            "content": "<p>maybe what you want is a boolean array of \"this 1x1 square is highlighted / not highlighted\"</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 196191445,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "brian.kihoon.lee@gmail.com",
            "sender_full_name": "Brian Lee (F1'16)",
            "sender_id": 100043,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Placing rectangles",
            "submessages": [],
            "timestamp": 1588604079,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ef0cc9607b07f392f70560a43dbbb2d0efd6328?x=x&version=1",
            "client": "website",
            "content": "<p>most languages have utilities to make boolean OR'ing very efficient/fast</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 196191506,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "brian.kihoon.lee@gmail.com",
            "sender_full_name": "Brian Lee (F1'16)",
            "sender_id": 100043,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Placing rectangles",
            "submessages": [],
            "timestamp": 1588604108,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f48e978e92f5b7dbaed6e4b4115f0dda67fdac34?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>oh yeah, forgot to mention, when a new rectangle is placed it shouldn\u2019t overlap any rectangle currently on the grid.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 196192079,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "wgmarcy@gmail.com",
            "sender_full_name": "Bill Marcy (he) (SP2'20)",
            "sender_id": 256987,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Placing rectangles",
            "submessages": [],
            "timestamp": 1588604344,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1bd49962ff0f7e7f3ee603f8243a1015bb6690bd?x=x&version=7",
            "client": "website",
            "content": "<p>If I'm understanding the question, you want to combine adjacent blocks to always form new rectangles? like a 2D version of ![bad](<a href=\"https://0fps.files.wordpress.com/2012/06/bad.png\" title=\"https://0fps.files.wordpress.com/2012/06/bad.png\">https://0fps.files.wordpress.com/2012/06/bad.png</a>) vs ![good](<a href=\"https://0fps.files.wordpress.com/2012/06/good.png\" title=\"https://0fps.files.wordpress.com/2012/06/good.png\">https://0fps.files.wordpress.com/2012/06/good.png</a>). Some variant of the array of bools should work, or at each position you could store a pointer to a merged block data structure to reduce recomputation of the boundaries of the existing block. If your scene is large and sparse you may need to use some kind of spatial partitioning structure to avoid using memory for empty areas of your scene</p>\n<div class=\"message_inline_image\"><a href=\"https://0fps.files.wordpress.com/2012/06/bad.png\" title=\"https://0fps.files.wordpress.com/2012/06/bad.png\"><img src=\"https://0fps.files.wordpress.com/2012/06/bad.png\"></a></div><div class=\"message_inline_image\"><a href=\"https://0fps.files.wordpress.com/2012/06/good.png\" title=\"https://0fps.files.wordpress.com/2012/06/good.png\"><img src=\"https://0fps.files.wordpress.com/2012/06/good.png\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 196193158,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "talyian@gmail.com",
            "sender_full_name": "Jimmy Tang (he) (SP2'20)",
            "sender_id": 276140,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Placing rectangles",
            "submessages": [],
            "timestamp": 1588604776,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f48e978e92f5b7dbaed6e4b4115f0dda67fdac34?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>The problem has to do with, in my game, placing language expressions on a workspace, so the player can combine them to form sentences. You place 'words' on the workspace which might be 1x1, or may be something like 2x2 if it's a 'function expression' which has two inputs. Expressions can then be combined together, e.g. placing two arguments within the function expression (the expressions don't combine automatically just because they're contiguous, it's an action the player performs). The combined expression may be both taller and wider than the function expression and its input. My goal is to have it so, when the player chooses a word to place, it's automatically placed in a space on the grid that's not occupied by any other expression with no overlap, and if there's no room, the grid resizes to allow for another expression. If two expressions are combined, then it would be nice to push every other expression out of the way so there's no overlap after combining.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 196194101,
            "is_me_message": false,
            "last_edit_timestamp": 1588605782,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "wgmarcy@gmail.com",
            "sender_full_name": "Bill Marcy (he) (SP2'20)",
            "sender_id": 256987,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Placing rectangles",
            "submessages": [],
            "timestamp": 1588605152,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/afcff71a280c619fe7f45af5df2f66b9617479fc?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>There are several \"profile\" type files, and loading order of those differs from system to system (Linux, Unix, Mac/BSD). It's best to open the bash manual page on your system (<code>man bash</code>), and search for <code>INVOCATION</code>.</p>\n<p>I'm on Linux/Ubuntu and it tells me this, for our normal day-to-day scenario, during which we are in an \"interactive login shell\":</p>\n<div class=\"codehilite\"><pre><span></span><code> When  bash  is invoked as an interactive login shell, or as a non-interactive shell with the\n--login option, it first reads and executes commands from the  file  /etc/profile,  if  that\nfile  exists.   After  reading  that  file, it looks for ~/.bash_profile, ~/.bash_login, and\n~/.profile, in that order, and reads and executes commands from the first  one  that  exists\nand  is  readable.   The --noprofile option may be used when the shell is started to inhibit\nthis behavior.\n</code></pre></div>\n\n\n<p>There's more, and it's worth reading the first few paragraphs of the <code>INVOCATION</code> section.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 196218396,
            "is_me_message": false,
            "last_edit_timestamp": 1588615916,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "anna.leuchtenberger@gmail.com",
                        "full_name": "Anna Dunne Leuchtenberger (she/they) (F2'19)",
                        "id": 226663
                    },
                    "user_id": 226663
                }
            ],
            "recipient_id": 20203,
            "sender_email": "aditya.athalye@gmail.com",
            "sender_full_name": "Aditya Athalye (he) (SP1'20)",
            "sender_id": 263547,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "which .profile files am I using at any one time?",
            "submessages": [],
            "timestamp": 1588615808,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/afcff71a280c619fe7f45af5df2f66b9617479fc?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"256987\">@Bill Marcy (he) (SP2'20)</span> AFAIK, <span class=\"user-mention\" data-user-id=\"7864\">@Jesse Chen (he/she) (SP1'20)</span> has been solving a lot of these sort of abstract object placement problems in her projects.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 196219114,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "aditya.athalye@gmail.com",
            "sender_full_name": "Aditya Athalye (he) (SP1'20)",
            "sender_id": 263547,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Placing rectangles",
            "submessages": [],
            "timestamp": 1588616141,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a7281da0a7289a741650707cabd4fd97b489f0e?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>This page documents a zero-day the author found in iOS which is patched in the latest beta. The bug lets you escape the iOS sandbox by exploiting differences in the XML parsers that the system uses.</p>\n<p>For such a serious bug in the system, it's super easy to understand (and very well-explained by the author). I definitely recommend reading it if it sounds interesting to you: <a href=\"https://siguza.github.io/psychicpaper/\" title=\"https://siguza.github.io/psychicpaper/\">https://siguza.github.io/psychicpaper/</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 196649913,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2410",
                    "emoji_name": "smiley_hacker",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "fabi@hey.com",
                        "full_name": "Fabian Tamp (he) (W2'20)",
                        "id": 255053
                    },
                    "user_id": 255053
                },
                {
                    "emoji_code": "2410",
                    "emoji_name": "smiley_hacker",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "alcara_m@pm.me",
                        "full_name": "Mar\u00edn Alcaraz (he) (W2'15)",
                        "id": 7082
                    },
                    "user_id": 7082
                },
                {
                    "emoji_code": "2410",
                    "emoji_name": "smiley_hacker",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "pius@alum.mit.edu",
                        "full_name": "Pius Uzamere (he) (SP2'20)",
                        "id": 256945
                    },
                    "user_id": 256945
                }
            ],
            "recipient_id": 20203,
            "sender_email": "toph.allen@gmail.com",
            "sender_full_name": "Toph Allen (he) (SP2'20)",
            "sender_id": 255104,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "an interesting iOS zero-day",
            "submessages": [],
            "timestamp": 1588778316,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<blockquote>\n<blockquote>\n<p>Imagine one day a new required class of input validation was discovered.</p>\n</blockquote>\n<p>\u201cIn what?\u201d</p>\n</blockquote>\n<p>\u201cExactly.\u201d</p>\n</blockquote>\n<p>Also:</p>\n<blockquote>\n<p>Interesting corollary is that it\u2019s impossible to have a program with exactly two features. Any program with two features has at least a third, but you don\u2019t know what it is.</p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 196661670,
            "is_me_message": false,
            "last_edit_timestamp": 1588783156,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "an interesting iOS zero-day",
            "submessages": [],
            "timestamp": 1588783081,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>Github is running <a href=\"https://github.com/features/codespaces\" title=\"https://github.com/features/codespaces\">a beta release</a> of some features to integrate with VSCode, looks like it could be neat</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 196673540,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "tobinyehle@gmail.com",
                        "full_name": "Tobin Yehle (he) (SP1'20)",
                        "id": 105607
                    },
                    "user_id": 105607
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "tansengming@me.com",
                        "full_name": "SengMing Tan (he) (W1'16)",
                        "id": 100336
                    },
                    "user_id": 100336
                }
            ],
            "recipient_id": 20203,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "github vs code integration beta release",
            "submessages": [],
            "timestamp": 1588788040,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/32721626292fa2708ee74d852696e44f426cd631?x=x&version=2",
            "client": "website",
            "content": "<p>I read this a while ago: <a href=\"https://blog.dghubble.io/post/.bashprofile-.profile-and-.bashrc-conventions/\" title=\"https://blog.dghubble.io/post/.bashprofile-.profile-and-.bashrc-conventions/\">https://blog.dghubble.io/post/.bashprofile-.profile-and-.bashrc-conventions/</a> and it was pretty helpful in grokking their order. Nowadays, my<code>.bash_profile</code> just sources the <code>.bashrc</code> and calls it a day <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 196792193,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "dabbagh.aos@gmail.com",
            "sender_full_name": "Aos Dabbagh (S2'17)",
            "sender_id": 101320,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "which .profile files am I using at any one time?",
            "submessages": [],
            "timestamp": 1588867202,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/afcff71a280c619fe7f45af5df2f66b9617479fc?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>Additionally, this post does a good job of tabulating and visualizing the load order:<br>\n<a href=\"https://shreevatsa.wordpress.com/2008/03/30/zshbash-startup-files-loading-order-bashrc-zshrc-etc/\" title=\"https://shreevatsa.wordpress.com/2008/03/30/zshbash-startup-files-loading-order-bashrc-zshrc-etc/\">https://shreevatsa.wordpress.com/2008/03/30/zshbash-startup-files-loading-order-bashrc-zshrc-etc/</a></p>\n<p>And the <a href=\"https://tldp.org/LDP/Bash-Beginners-Guide/html/sect_03_01.html\" title=\"https://tldp.org/LDP/Bash-Beginners-Guide/html/sect_03_01.html\">3.1. Shell initialization files</a> chapter of the Bash Guide for Beginners also has a complete explanation.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 196799330,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "aditya.athalye@gmail.com",
            "sender_full_name": "Aditya Athalye (he) (SP1'20)",
            "sender_id": 263547,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "which .profile files am I using at any one time?",
            "submessages": [],
            "timestamp": 1588870503,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hi all! I am starting a major project at work focused on extending our rights management system to allow customer admins to confer restricted data access to arbitrary customer users. Our current setup allows us to get extremely granular already about who can see what when, but adding this new parameter increases the complexity quite a bit, and bolting it on top has the potential to be pretty messy if done carelessly, so I want to give it some real thought before diving in. I've been gearing up for this project for a while and I'm excited to start working on it in earnest next week, but before I elaborate any more I thought I'd ask here for insight into this type of problem, or prior art, etc. We are on node and use a bespoke library to handle our rights checking, so I have a ton of leeway in what I end up doing. Any thoughts? Pitfalls? Horror/success stories?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 196872575,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Rights Management",
            "submessages": [],
            "timestamp": 1588928943,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/67d13e65f0c0ba64f8c9e06f45f94f99303b373b?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hey everyone. I have potential client looking set up a small publishing company and I'm trying to help them figure out their stack. They have maybe a handful of posts already on Wordpress. But I've been trying to figure out what would be good for them. I'd like to not have to worry about the backend too much or creating a cms for writing. So I was thinking of just leaving them on wordpress, but I was wondering if maybe that would leave them too restricted down the line. Thats why I was thinking drupal might be more flexible for future work and improvements. Does anyone have any thought our suggestions?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197069591,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "tristan.t.siegel@gmail.com",
            "sender_full_name": "Tristan Siegel (he) (SP2'20)",
            "sender_id": 279670,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Drupal vs Wordpress",
            "submessages": [],
            "timestamp": 1589134496,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/67d13e65f0c0ba64f8c9e06f45f94f99303b373b?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>At my old job we ended up going with User Groups and permissions. So permissions were very granular like editing and updating content, deleting content, changing another users settings, etc. Those permissions were then assigned to what we called a user group, like an editor or an engineer. then a person was assigned to a user group. This was they were able to have granular permissions but make them easily managed</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197069846,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "tristan.t.siegel@gmail.com",
            "sender_full_name": "Tristan Siegel (he) (SP2'20)",
            "sender_id": 279670,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Rights Management",
            "submessages": [],
            "timestamp": 1589134756,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/67d13e65f0c0ba64f8c9e06f45f94f99303b373b?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>It worked out really well. Not sure if thats the idea you were describing or not</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197069874,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "tristan.t.siegel@gmail.com",
            "sender_full_name": "Tristan Siegel (he) (SP2'20)",
            "sender_id": 279670,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Rights Management",
            "submessages": [],
            "timestamp": 1589134778,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/afcff71a280c619fe7f45af5df2f66b9617479fc?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>No real opinion either way, and some likely-impractical alternatives below (depending on the type of client, and the degree of say you may have).</p>\n<p>Since they are a <em>publisher</em>:</p>\n<ul>\n<li>\n<p><a href=\"https://docs.racket-lang.org/pollen/\" title=\"https://docs.racket-lang.org/pollen/\">Pollen</a> has always intrigued me. Maybe someone at RC has first hand input about it. </p>\n<blockquote>\n<p>Pollen is a publishing system that helps authors make functional and beautiful digital books.</p>\n</blockquote>\n</li>\n<li>\n<p>Are solutions like <a href=\"\" title=\"\">Quintype</a> (paid service), options?</p>\n<blockquote>\n<p>Quintype provides a complete suite of digital publishing solutions.</p>\n</blockquote>\n</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197070645,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "tristan.t.siegel@gmail.com",
                        "full_name": "Tristan Siegel (he) (SP2'20)",
                        "id": 279670
                    },
                    "user_id": 279670
                }
            ],
            "recipient_id": 20203,
            "sender_email": "aditya.athalye@gmail.com",
            "sender_full_name": "Aditya Athalye (he) (SP1'20)",
            "sender_id": 263547,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Drupal vs Wordpress",
            "submessages": [],
            "timestamp": 1589135435,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I used to work with Drupal and Wordpress in ~2015, so this opinion might be out of date: I found Drupal to have better code quality and architecture, but Wordpress had far and away more plugins and information available. I wouldn't worry about Wordpress being too restrictive, since IME it's extremely flexible and adaptable.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197071031,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "tristan.t.siegel@gmail.com",
                        "full_name": "Tristan Siegel (he) (SP2'20)",
                        "id": 279670
                    },
                    "user_id": 279670
                }
            ],
            "recipient_id": 20203,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Drupal vs Wordpress",
            "submessages": [],
            "timestamp": 1589135833,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/700775c1b9679bb74bd97d4ced91fadf9cc2ed17?x=x&version=2",
            "client": "website",
            "content": "<p>I'm building a networking library in Rust that I'd like to be able to link with frontend apps that I'll write in multiple languages/frameworks on multiple platforms. I'm starting by targeting a native Swift app and an Electron app on macOS; my next priorities to target are Electron on Windows and Linux, and potentially native Windows and Linux apps after that.</p>\n<p>I'm trying to figure out a good way to send arbitrary non-trivial data structures between the library and the app, and I'm not sure what my options are. Right now I'm thinking of using Protocol Buffers or some other cross-language serialization format, but what should I use to actually send blobs of data between the library and the client app? A plain old function in the library that the app can poll periodically to check for new messages? Some kind of channel (a Unix domain socket?) that the app and library can use to exchange messages?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197073930,
            "is_me_message": false,
            "last_edit_timestamp": 1589139101,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "roland@rolandcrosby.com",
            "sender_full_name": "Roland Crosby (he) (SP2'20)",
            "sender_id": 276197,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Intra-process communication",
            "submessages": [],
            "timestamp": 1589139074,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>what are the two processes? the app and the library? or something else? you say you want to \"link\" the library with your frontend apps - do you mean \"link\" in the <code>ld</code> sense of the word, or something else?</p>\n<p>for cross platform IPC, a network socket is the easiest thing (domain sockets won't work on windows, unless maybe you're running in WSL?). if you're willing to build different IPC layers for different operating systems, you may have more options.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197075472,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Intra-process communication",
            "submessages": [],
            "timestamp": 1589141084,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/700775c1b9679bb74bd97d4ced91fadf9cc2ed17?x=x&version=2",
            "client": "website",
            "content": "<p>Sorry, yes, I mean regular old static linking in the ld sense. So the data exchange would be taking place entirely within a single process - the app that uses the library. Network sockets sound like a decent option; I mainly want to make sure I'm not overlooking something simple/obvious.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197075778,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "roland@rolandcrosby.com",
            "sender_full_name": "Roland Crosby (he) (SP2'20)",
            "sender_id": 276197,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Intra-process communication",
            "submessages": [],
            "timestamp": 1589141641,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>A callback that gets called when things are completed.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197075821,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Intra-process communication",
            "submessages": [],
            "timestamp": 1589141662,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>or, better yet -- if it works for your api -- a boring, synchronous function call.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197075828,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Intra-process communication",
            "submessages": [],
            "timestamp": 1589141691,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>oh, wow, i completely misread the title, oops :)</p>\n<p>yeah, what Ori said.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197075933,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Intra-process communication",
            "submessages": [],
            "timestamp": 1589141845,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/700775c1b9679bb74bd97d4ced91fadf9cc2ed17?x=x&version=2",
            "client": "website",
            "content": "<p>thanks to you both!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197076070,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "roland@rolandcrosby.com",
            "sender_full_name": "Roland Crosby (he) (SP2'20)",
            "sender_id": 276197,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Intra-process communication",
            "submessages": [],
            "timestamp": 1589141949,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/67d13e65f0c0ba64f8c9e06f45f94f99303b373b?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Thanks you two! really helpful</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197195894,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "aditya.athalye@gmail.com",
                        "full_name": "Aditya Athalye (he) (SP1'20)",
                        "id": 263547
                    },
                    "user_id": 263547
                }
            ],
            "recipient_id": 20203,
            "sender_email": "tristan.t.siegel@gmail.com",
            "sender_full_name": "Tristan Siegel (he) (SP2'20)",
            "sender_id": 279670,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Drupal vs Wordpress",
            "submessages": [],
            "timestamp": 1589226698,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c2004dab6a5b7f7ddfca0ea3dcf1b312cf28113d?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>How do you develop a working mental model of your code when you are dealing with a number of complex components? How do you get comfortable dealing with layers of abstraction you know you won't be able to work towards understanding in a significant way while working on your project at hand? When do you decide you've gone deep enough down (in layers of abstraction) to have a decent idea of how things work. </p>\n<p>I know talking about abstraction is a bit abstract (<span aria-label=\"open mouth\" class=\"emoji emoji-1f62e\" role=\"img\" title=\"open mouth\">:open_mouth:</span> <span aria-label=\"cowboy\" class=\"emoji emoji-1f920\" role=\"img\" title=\"cowboy\">:cowboy:</span>). Just looking for any insight into your experiences and general advice. </p>\n<p><strong>Background:</strong><br>\nI'm moving from writing fun, relatively simple python projects on my local machine, to building web apps (specifically a flask REST api) and I'm having a hard time dealing with all of the layers of the stack I feel the need to understand. There is a web server (nginx maybe), wsgi middleware, flask, flask-restful, http, https, authentication, networking stack... It's kind of mucking with my ability to develop a mental model of my code and how it works. I can hack things together that work, but I want to be able to walk away understanding the code I've written. I'm beginning to make progress and prioritize what I need to understand deeply to feel confident and grok my code, but last week was tough...I felt like I was getting whiplash as many new technical elements entered my world in rapid succession.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197196741,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "pattersoncharlesl@gmail.com",
            "sender_full_name": "Charlie Patterson (he) (SP2'20)",
            "sender_id": 279703,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Dealing with Abstraction",
            "submessages": [],
            "timestamp": 1589227143,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a7281da0a7289a741650707cabd4fd97b489f0e?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I'm having a bit of the same feeling moving from doing data science projects in Python and R to working on a Swift project for macOS. No real advice here, just commiseration and shared interest</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197199558,
            "is_me_message": false,
            "last_edit_timestamp": 1589228472,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "toph.allen@gmail.com",
            "sender_full_name": "Toph Allen (he) (SP2'20)",
            "sender_id": 255104,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Dealing with Abstraction",
            "submessages": [],
            "timestamp": 1589228453,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>There's no magic bullet -- taking the time to talk to people about the architecture, and reading a <em>lot</em> of code over my career.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197202402,
            "is_me_message": false,
            "last_edit_timestamp": 1589230792,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Dealing with Abstraction",
            "submessages": [],
            "timestamp": 1589229917,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c2004dab6a5b7f7ddfca0ea3dcf1b312cf28113d?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Thank you, <span class=\"user-mention\" data-user-id=\"255104\">@Toph Allen (he) (SP2'20)</span> , for commiserating. Will let you know if I have any insights. <span class=\"user-mention\" data-user-id=\"255045\">@Ori Dean Bernstein (he) (W2'20)</span> that makes sense. Thanks for your response.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197306579,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "pattersoncharlesl@gmail.com",
            "sender_full_name": "Charlie Patterson (he) (SP2'20)",
            "sender_id": 279703,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Dealing with Abstraction",
            "submessages": [],
            "timestamp": 1589303076,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb53cab6d39356a824254196194524a4fb9e18f5?x=x&version=2",
            "client": "website",
            "content": "<blockquote>\n<p>I'm moving from writing fun, relatively simple python projects on my local machine, to building web apps (specifically a flask REST api) and I'm having a hard time dealing with all of the layers of the stack I feel the need to understand. There is a web server (nginx maybe), wsgi middleware, flask, flask-restful, http, https, authentication, networking stack... It's kind of mucking with my ability to develop a mental model of my code and how it works. I can hack things together that work, but I want to be able to walk away understanding the code I've written. I'm beginning to make progress and prioritize what I need to understand deeply to feel confident and grok my code, but last week was tough...I felt like I was getting whiplash as many new technical elements entered my world in rapid succession.</p>\n</blockquote>\n<p>HELLO THIS IS ME</p>\n<p>Going from self-contained Python projects to trying to build my first web app with Flask made me see so. Much. Red. </p>\n<p>I'm not at the place yet where I can look back and give helpful advice, but the one thing that really helped me was pair-programming. Even if I felt stuck. ESPECIALLY if I felt stuck. Especially if I felt cringey at all the things I didn't know. And then I could be like \"But why this???\" and my pairing partner would delightedly start talking about why.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197484564,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f442",
                    "emoji_name": "ear",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "pattersoncharlesl@gmail.com",
                        "full_name": "Charlie Patterson (he) (SP2'20)",
                        "id": 279703
                    },
                    "user_id": 279703
                }
            ],
            "recipient_id": 20203,
            "sender_email": "anna.leuchtenberger@gmail.com",
            "sender_full_name": "Anna Dunne Leuchtenberger (she/they) (F2'19)",
            "sender_id": 226663,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Dealing with Abstraction",
            "submessages": [],
            "timestamp": 1589408486,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb53cab6d39356a824254196194524a4fb9e18f5?x=x&version=2",
            "client": "website",
            "content": "<p>Also what helps me is a \"spiral out\" approach: do the smallest possible successful working thing, and then start building things out from there. When you have to make an arbitrary choice between two things, ask a Recurser which one they'd pick and why.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197484705,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f41a",
                    "emoji_name": "spiral_shell",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "rhotic@alum.mit.edu",
                        "full_name": "Rachel (rfong) Fong (they) (m2'20)",
                        "id": 263712
                    },
                    "user_id": 263712
                },
                {
                    "emoji_code": "1f41a",
                    "emoji_name": "spiral_shell",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "pattersoncharlesl@gmail.com",
                        "full_name": "Charlie Patterson (he) (SP2'20)",
                        "id": 279703
                    },
                    "user_id": 279703
                }
            ],
            "recipient_id": 20203,
            "sender_email": "anna.leuchtenberger@gmail.com",
            "sender_full_name": "Anna Dunne Leuchtenberger (she/they) (F2'19)",
            "sender_id": 226663,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Dealing with Abstraction",
            "submessages": [],
            "timestamp": 1589408557,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb53cab6d39356a824254196194524a4fb9e18f5?x=x&version=2",
            "client": "website",
            "content": "<p>Then each successive slightly bigger project will incorporate more bells and whistles, giving you time to add each bell or whistle to your mental model.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197484843,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f514",
                    "emoji_name": "bell",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "pattersoncharlesl@gmail.com",
                        "full_name": "Charlie Patterson (he) (SP2'20)",
                        "id": 279703
                    },
                    "user_id": 279703
                }
            ],
            "recipient_id": 20203,
            "sender_email": "anna.leuchtenberger@gmail.com",
            "sender_full_name": "Anna Dunne Leuchtenberger (she/they) (F2'19)",
            "sender_id": 226663,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Dealing with Abstraction",
            "submessages": [],
            "timestamp": 1589408653,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb53cab6d39356a824254196194524a4fb9e18f5?x=x&version=2",
            "client": "website",
            "content": "<p>I see I have not let my self-avowed inability to give advice prevent me from, in fact, giving advice. <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197484924,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f64f",
                    "emoji_name": "thank_you",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "pattersoncharlesl@gmail.com",
                        "full_name": "Charlie Patterson (he) (SP2'20)",
                        "id": 279703
                    },
                    "user_id": 279703
                }
            ],
            "recipient_id": 20203,
            "sender_email": "anna.leuchtenberger@gmail.com",
            "sender_full_name": "Anna Dunne Leuchtenberger (she/they) (F2'19)",
            "sender_id": 226663,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Dealing with Abstraction",
            "submessages": [],
            "timestamp": 1589408721,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've heard good things about <a href=\"http://aosabook.org/en/index.html\">http://aosabook.org/en/index.html</a>, and while I admit I haven't read it, it <em>sounds</em> like something that would have helped me.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197489146,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f440",
                    "emoji_name": "eyes",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "pattersoncharlesl@gmail.com",
                        "full_name": "Charlie Patterson (he) (SP2'20)",
                        "id": 279703
                    },
                    "user_id": 279703
                },
                {
                    "emoji_code": "1f440",
                    "emoji_name": "eyes",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "catwind7+recursecenter@gmail.com",
                        "full_name": "Alan Lin (he) (W1'19)",
                        "id": 247176
                    },
                    "user_id": 247176
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "catwind7+recursecenter@gmail.com",
                        "full_name": "Alan Lin (he) (W1'19)",
                        "id": 247176
                    },
                    "user_id": 247176
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "aditya.athalye@gmail.com",
                        "full_name": "Aditya Athalye (he) (SP1'20)",
                        "id": 263547
                    },
                    "user_id": 263547
                }
            ],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Dealing with Abstraction",
            "submessages": [],
            "timestamp": 1589411719,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>A lot of programs have certain shapes, and once you've seen enough of them, you can kind of start predicting how other programs are put together.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197489171,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "pattersoncharlesl@gmail.com",
                        "full_name": "Charlie Patterson (he) (SP2'20)",
                        "id": 279703
                    },
                    "user_id": 279703
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "aditya.athalye@gmail.com",
                        "full_name": "Aditya Athalye (he) (SP1'20)",
                        "id": 263547
                    },
                    "user_id": 263547
                }
            ],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Dealing with Abstraction",
            "submessages": [],
            "timestamp": 1589411739,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'd use the word \"design patterns\", and while that's technically a valid term, it's come to mean gang-of-four stuff, rather than places to look for certain kinds of data flow.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197489246,
            "is_me_message": false,
            "last_edit_timestamp": 1589411793,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Dealing with Abstraction",
            "submessages": [],
            "timestamp": 1589411764,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>I guess that comes with another piece of advice: if you're not sure, follow the data.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197489300,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "11372",
                    "emoji_name": "postgresql",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "ivan.savov@gmail.com",
                        "full_name": "Ivan Savov (SP2'17)",
                        "id": 100772
                    },
                    "user_id": 100772
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ivan.savov@gmail.com",
                        "full_name": "Ivan Savov (SP2'17)",
                        "id": 100772
                    },
                    "user_id": 100772
                },
                {
                    "emoji_code": "1f575",
                    "emoji_name": "sleuth",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "pattersoncharlesl@gmail.com",
                        "full_name": "Charlie Patterson (he) (SP2'20)",
                        "id": 279703
                    },
                    "user_id": 279703
                },
                {
                    "emoji_code": "1f575",
                    "emoji_name": "sleuth",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "aditya.athalye@gmail.com",
                        "full_name": "Aditya Athalye (he) (SP1'20)",
                        "id": 263547
                    },
                    "user_id": 263547
                }
            ],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Dealing with Abstraction",
            "submessages": [],
            "timestamp": 1589411809,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>data came from somewhere, and it's going somewhere; follow an important piece of it through the function call rabbit holes, and you'll start to get an idea for how the parts of the program are wired together.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197489340,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f407",
                    "emoji_name": "rabbit",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "pattersoncharlesl@gmail.com",
                        "full_name": "Charlie Patterson (he) (SP2'20)",
                        "id": 279703
                    },
                    "user_id": 279703
                }
            ],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Dealing with Abstraction",
            "submessages": [],
            "timestamp": 1589411852,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>(This, by the way, is a big part of why heavy OOP annoys me; code tends towards tons of places where stuff gets stashed, and then it's a real chore to figure out where it goes next. I'm very much with Alan Perlis, when he says <em>\"It is better to have 100 functions operate on one data structure than to have 10 functions operate on 10 data structures.\"</em>)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197489421,
            "is_me_message": false,
            "last_edit_timestamp": 1589411947,
            "reactions": [
                {
                    "emoji_code": "1f442",
                    "emoji_name": "ear",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "pattersoncharlesl@gmail.com",
                        "full_name": "Charlie Patterson (he) (SP2'20)",
                        "id": 279703
                    },
                    "user_id": 279703
                },
                {
                    "emoji_code": "1f4af",
                    "emoji_name": "100",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "aditya.athalye@gmail.com",
                        "full_name": "Aditya Athalye (he) (SP1'20)",
                        "id": 263547
                    },
                    "user_id": 263547
                }
            ],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Dealing with Abstraction",
            "submessages": [],
            "timestamp": 1589411893,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/afcff71a280c619fe7f45af5df2f66b9617479fc?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>Same opinion as Ori's in many ways.</p>\n<p>I've fallen into the same hole every time I've had to build a system with unfamiliar parts (logging pipelines, custom DSLs, cloud infrastructure etc.). Recently, I tried to wrap my head around web development, and felt the same way. </p>\n<p>Paper designs help a lot, and I tend to spend a lot of time trying to figure out the tradeoffs available to me.</p>\n<p>The following mental process tends to work for me:</p>\n<ol>\n<li>Research a reference architecture from my $problem ecosystem, and the explanation for the design of the same. Also if circumstance allows, find people whom I can consult.</li>\n<li>Correlate the $ReferenceArchitecture's boxes, and their stated purpose, as advertised by said architecture, with the advertised parts of the tools at hand (framework features, web server, libraries etc. \"stack\") </li>\n<li>Identify the <em>interface</em> between the boxes --- what is the API contract / data interchange protocol / schema? Why? Especially at the boundaries between systems where data flows in/out.</li>\n<li>Try to swap a box with some other box --- why or why not? (e.g. web server can be any, authentication libraries could be many, why not _that_ routing approach)</li>\n<li>And try to work out the ripple effects. Oh, if WSGI, then I can't do X, because...?</li>\n<li>Try to <em>remove</em> boxes... what if I didn't use X at all? (what is the actual <em>need</em> for X?) For example, what's the simplest possible website and the simplest possible way to make it available to Internet users? Ok, now that we have it, what if I wanted to do X or Y or Z?</li>\n<li>Compare and contrast the current reference architecture with other reference architectures (e.g. static? dynamic? high availability? load balanced? etc...)</li>\n</ol>\n<p>That said, true clarity only comes after having lived with the consequences of one's choices for a while... how it breaks, where it's hard to change, where it continues to \"just work\", where it's slow, where it's flaky, where it's smooth as butter etc.</p>\n<p>If it's new-to-me, I struggle, and I think everybody struggles.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197498124,
            "is_me_message": false,
            "last_edit_timestamp": 1589419935,
            "reactions": [
                {
                    "emoji_code": "1f442",
                    "emoji_name": "ear",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "pattersoncharlesl@gmail.com",
                        "full_name": "Charlie Patterson (he) (SP2'20)",
                        "id": 279703
                    },
                    "user_id": 279703
                }
            ],
            "recipient_id": 20203,
            "sender_email": "aditya.athalye@gmail.com",
            "sender_full_name": "Aditya Athalye (he) (SP1'20)",
            "sender_id": 263547,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Dealing with Abstraction",
            "submessages": [],
            "timestamp": 1589419708,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f9d912077b06a90128c9e07b1f5026ec0c3613b2?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Wow that's a lot of really good questions and I second the sentiment that it's something we all struggle with - particularly if it's an unfamiliar, undocumented, and untested system. </p>\n<p>I'll give my 2c on this question:</p>\n<blockquote>\n<p>When do you decide you've gone deep enough down (in layers of abstraction) to have a decent idea of how things work.</p>\n</blockquote>\n<p>I've come to learn that I'm usually motivated by a mix of two motivations when abstraction diving (is that a thing?)</p>\n<ol>\n<li>A desire to understand</li>\n<li>A desire to complete the task at hand</li>\n</ol>\n<p>If I'm primarily motivated by #1, \"deep enough\" usually means I get bored or I'm super interested but can't sit anymore and I need some water.</p>\n<p>If I'm primarily motivated by #2, \"deep enough\" means I understand enough of what's going on to move on / make progress on my task. In most cases, this boils down to \"Oh, this function I need to  call returns data in this way. Cool.\". Do I care how it does it? Maybe a teeny bit, but probably not enough to get sidetracked. </p>\n<p>#2 is ESPECIALLY strong when there's a deadline. If I tell someone they have until tomorrow to finish a complex feature, there WILL be corners skipped and they likely will not have gained any depth of understanding in subsystems.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197500666,
            "is_me_message": false,
            "last_edit_timestamp": 1589423516,
            "reactions": [
                {
                    "emoji_code": "1f442",
                    "emoji_name": "ear",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "pattersoncharlesl@gmail.com",
                        "full_name": "Charlie Patterson (he) (SP2'20)",
                        "id": 279703
                    },
                    "user_id": 279703
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ori@eigenstate.org",
                        "full_name": "Ori Dean Bernstein (he) (W2'20)",
                        "id": 255045
                    },
                    "user_id": 255045
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andrew.montalenti@gmail.com",
                        "full_name": "Andrew Montalenti (he) (m7'19)",
                        "id": 247727
                    },
                    "user_id": 247727
                }
            ],
            "recipient_id": 20203,
            "sender_email": "catwind7+recursecenter@gmail.com",
            "sender_full_name": "Alan Lin (he) (W1'19)",
            "sender_id": 247176,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Dealing with Abstraction",
            "submessages": [],
            "timestamp": 1589423478,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f9d912077b06a90128c9e07b1f5026ec0c3613b2?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I think I also have a couple of things to add to this one: </p>\n<blockquote>\n<p>How do you develop a working mental model of your code when you are dealing with a number of complex components?</p>\n</blockquote>\n<p>Aside from reading and writing a lot of code like people have mentioned, I think there are very general learning strategies that can be just as effectively applied in software compared to any other complex subject matter. I highly recommend the book \"a mind for numbers\" by barbara oakley. In particular the chapters on forming powerful mental \"chunks\" which are foundation to building expertise. It's not a magic bullet, but it offers a nice map on building mastery. </p>\n<p>One of my favorite strategies is to constantly test my own understanding as I'm learning a new system. I read a bit of code, I form a hypothesis about what I think it does, and I verify it either by looking at the code / sprinkling print statements / running the tests. Once I have a small, manageable subsystem understood at a surface level at a first pass, I'll move on to other parts of the code it interacts with. My ability to do this quickly varies widely depending on the system / environment. I recently had a terrible time trying to understand parts of the v8 engine because compiling the thing took HOURS.</p>\n<p>One of my LESS fun strategies (but ALWAYS interesting) is to pick up bug tickets for parts of the system I'm unfamiliar with. It's like a double whammy for your learning. You're welcome</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197501174,
            "is_me_message": false,
            "last_edit_timestamp": 1589465177,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "catwind7+recursecenter@gmail.com",
            "sender_full_name": "Alan Lin (he) (W1'19)",
            "sender_id": 247176,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Dealing with Abstraction",
            "submessages": [],
            "timestamp": 1589424197,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/097edbae0d41f8a5149c6ada6fd5c4941e572159?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"4998\">@Jeff Fowler (W'14)</span> I helped build <a href=\"https://www.conjur.org/\">https://www.conjur.org/</a> which provides fine-grained access management based on RBAC. Happy to chat about DB design, code patterns, APIs, etc all related to that. You could also use Conjur as a component in a rights management framework, it's free software.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197733992,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "rprior@protonmail.com",
            "sender_full_name": "Ryan Prior (he) (F1'19)",
            "sender_id": 234256,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Rights Management",
            "submessages": [],
            "timestamp": 1589567768,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6f8ddedf593eefcabbc13434b183e7d7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Do you work at a company that makes a software product of some kind (probably a web app? but maybe not neccessarily) and that has teams that work on \"product infrastructure\"? By that, I mean a team that builds or maintains tools, shared libraries, infrastructure, etc. that directly supports product development and product engineers but is not actually building new features for the product. What do you call these teams, what are they responsible for, and how do they divide up their work? (Is there just one team? Is this something product engineers themselves do in addition to building features?)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198233124,
            "is_me_message": false,
            "last_edit_timestamp": 1589997499,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "allie.jones@gmail.com",
            "sender_full_name": "Allie Jones (she/they) (W'13)",
            "sender_id": 821,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Product infrastructure teams",
            "submessages": [],
            "timestamp": 1589996784,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6f8ddedf593eefcabbc13434b183e7d7?d=identicon&version=1",
            "client": "website",
            "content": "<p>I ask because where I work (Etsy) we're reevaluating how our product infrastructure teams are organized and I'm curious about what other companies do. Info about mid-size companies (100+ engineers but not thousands) is probably most directly useful to me, but I'm interested to hear about other situations also!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198233341,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "allie.jones@gmail.com",
            "sender_full_name": "Allie Jones (she/they) (W'13)",
            "sender_id": 821,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Product infrastructure teams",
            "submessages": [],
            "timestamp": 1589996888,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6f8ddedf593eefcabbc13434b183e7d7?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think it might clarify the kind of engineering work I'm talking about if I describe the current state of the teams at Etsy. We have three teams in an org named Product Infrastructure, and some kind-of related groups of people (ah, org structures ...):</p>\n<ul>\n<li>Frontend Systems (this is my team fwiw): web frontend architecture and best practices, FE performance, our various view rendering systems; our current project is building out all the infra to support server-side rendered React</li>\n<li>Web Platform: owns JavaScript build and testing and dependency management infrastructure (we've been on a long migration path to Webpack)</li>\n<li>API Platform: maintains our internal API that is used by the website and also apps, implementing GraphQL support right now amongst other things</li>\n<li>Perf squad: not a full team, but a bunch of senior engineers working on large scale web performance improvements</li>\n<li>Design Systems: actually in the product development org, but they build and maintain our CSS/JS component library</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198234345,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "allie.jones@gmail.com",
            "sender_full_name": "Allie Jones (she/they) (W'13)",
            "sender_id": 821,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Product infrastructure teams",
            "submessages": [],
            "timestamp": 1589997363,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6f8ddedf593eefcabbc13434b183e7d7?d=identicon&version=1",
            "client": "website",
            "content": "<p>(Part of why I am asking this question is because defining the boundaries between these teams is weird and difficult and I'm wondering if other places have done it better!)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198234390,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "allie.jones@gmail.com",
            "sender_full_name": "Allie Jones (she/they) (W'13)",
            "sender_id": 821,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Product infrastructure teams",
            "submessages": [],
            "timestamp": 1589997394,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/444b51546aefb8c4a59a14b5ffead40e?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I work on one of those teams! We have ~100 engineers, and a ~180 employee company. I would say that the way we do it isn't ideal, but that's more due to the weight of history than anything else. Made great strides in the last 2 years though.<br>\nThe \"Platform\" team (ideally) manages the shared libraries, infra, etc. It's split into 3 groups:</p>\n<ul>\n<li>Platform Apps (libraries, global auth, our critical/central app consumed internally)</li>\n<li>Platform Infra (AWS, \"DevOps\"/SRE, providing guidelines and tools for monitoring/logging etc) (that's me!)</li>\n<li>Platform Help (for historical reasons, deals with some technical details of implementations w/ our customers. mostly automated. helpdesk/request-style work.)<br>\nI'm going to a meeting right now, but I'll follow up with the broader structure of the org and what works/what doesn't later!</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198234958,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "reid.savage@gmail.com",
            "sender_full_name": "Reid Savage (they) (m4'20)",
            "sender_id": 301271,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Product infrastructure teams",
            "submessages": [],
            "timestamp": 1589997706,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7219fef444d9242d5c96eb33bfe456c37a2df41c?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I've seen and heard of so many different structures here! Not sure which is best and looking forward to seeing how other teams have tackled it.</p>\n<p>I think that the abstraction I've found most useful is the idea of 'internal tools' teams that operate as a separate (set of) teams that treats the members of the company as their customers. A team like this has some advantages that many companies don't have w.r.t their external customer base - they get constant communication with their clients, an obviously shared interest, and most likely a common language. At scale, it can be the case that there is an internal tools team for each type of internal customer; business intelligence + design systems start to fit nicely into this abstraction as well. There can also be cross functional itools teams; some that try to recognize pain points or duplicated effort across several other teams seems to become pretty important as an org scales (esp. in any orgs that have some consulting capacity).</p>\n<p>Structuring these seems such that they have some level of autonomy and think of themselves as essentially their own company aiming to solve the problems of their coworkers can be both super motivating and provide a good framework for setting goals and dividing up work. </p>\n<p>I don't know if there are any Recursers in the technical orgs at discretionary and systematic hedge funds, but I'd be super interested in hearing their take; that's definitely a case where a lot of the software/product engineering being done is to enable internal customers, and seems to be the source of some pretty incredible work like <a href=\"https://blog.janestreet.com/introducing-incremental/\">https://blog.janestreet.com/introducing-incremental/</a>, <a href=\"http://beakerx.com/\">http://beakerx.com/</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198239152,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "johnurbanik@gmail.com",
            "sender_full_name": "John Urbanik (he) (S1'20)",
            "sender_id": 303322,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Product infrastructure teams",
            "submessages": [],
            "timestamp": 1589999640,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/444b51546aefb8c4a59a14b5ffead40e?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Agree, <span class=\"user-mention\" data-user-id=\"303322\">@John Urbanik (he) (S1'20)</span>. My team has fought long and hard to get towards that system, since we are a \"you build it you run it\" sort of company, but for a long time, the boundaries between the teams and ownership over apps was very unclear. <br>\nWe tend to work in sprints with reduced hours to allow for interrupts - however, we also make sure to eliminate unneccessary interruptions and make sure that the right team is doing the right work, because the \"Platform\" space can easily become a dumping ground for apps that nobody wants to maintain. We provide services like IT does, while operating inside the engineering org as just another engineering team.<br>\nI have also seen companies like Chewy have a central org (SRE team) that embeds one person into each other team, but I have no insight into whether that works for them.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198248772,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "reid.savage@gmail.com",
            "sender_full_name": "Reid Savage (they) (m4'20)",
            "sender_id": 301271,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Product infrastructure teams",
            "submessages": [],
            "timestamp": 1590004386,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>I work at one of those companies, we have about ~150 engineering folks (and ~500 people in the company)</p>\n<p>we have three infrastructure teams:</p>\n<ul>\n<li>production engineering (devops) [PEng] - directly taking care of infrastructure: databases, hosts, cloud providers, templates, security, logs, access to production</li>\n<li>back-end infrastructure [BEI] - team of back-end Rails developers taking care of the interface between the app and the infrastructure, don't have production access, have loads of Rails and application-level expertise</li>\n<li>front-end infrastructure [FEI] - team of front-end engineers, building a shared components language between the apps, taking care of standards and browser performance improvements</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198392457,
            "is_me_message": false,
            "last_edit_timestamp": 1590105474,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Product infrastructure teams",
            "submessages": [],
            "timestamp": 1590104907,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>I'm on the PEng team, so I mostly write a bunch of YAML and work on databases :)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198392482,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Product infrastructure teams",
            "submessages": [],
            "timestamp": 1590104944,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>my team takes care of three main areas:</p>\n<ul>\n<li>infrastructure security - we manage everything, are the only team with full production access, and can veto any change that may impact security</li>\n<li>infrastructure reliability and performance</li>\n<li>developer tooling - since most developers don't have access to production, we need to work on visibility and provide them with tools to help them navigate the environments</li>\n</ul>\n<p>our work is a mix of PEng-only projects (e.g. lifting from physical servers to a cloud provider), PEng/BEI projects (e.g. database modernization), daily maintenance, and helping product teams set up their infrastructure (we have a set of rules and practices they need to follow, and we're usually the ones writing infrastructure code)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198392641,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Product infrastructure teams",
            "submessages": [],
            "timestamp": 1590105108,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>I think we have by far the biggest autonomy in the engineering organization, as we manage our own work according only to general priorities, don't have product managers or designers, and our director is involved in all the crucial decisions - we're also a really small team of fifteen, so all of us do a lot of high-impact work :)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198392742,
            "is_me_message": false,
            "last_edit_timestamp": 1590105224,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Product infrastructure teams",
            "submessages": [],
            "timestamp": 1590105218,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>we don't have sprints, we do have:</p>\n<ul>\n<li>ATC (air-traffic controllers), a rotation for work-hours responding to requests from outside of PEng, usually two people per week</li>\n<li>on-call (for a product company with a lot of customers, we very rarely have issues outside of work hours)</li>\n<li>projects that involve engineers from other teams (though usually no project/product managers, we don't really work with non-developers)</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198392862,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Product infrastructure teams",
            "submessages": [],
            "timestamp": 1590105326,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>oh, and we have a separate IT team that has everything to do with making the company work seamlessly, but nothing to do with product development :) we support them on developer-facing tools and software, but outside of that do no IT-related work</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198392927,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Product infrastructure teams",
            "submessages": [],
            "timestamp": 1590105390,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>aaaand we do support data teams, since we don't have a separate data engineering team, but that's hopefully going to change soon, data engineering is such a complex and interesting beast that our team just doesn't have enough expertise on</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198393111,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Product infrastructure teams",
            "submessages": [],
            "timestamp": 1590105552,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d2d1f3e361a479849026fe298e091c50e1a4b20a?x=x&version=5",
            "client": "website",
            "content": "<p>so there are still some rough edges when dividing the work! I think the clearest distinction is the fact that we're the only team with direct production access and are the relay for all the other dev teams</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198393133,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "rc@alicja.dev",
            "sender_full_name": "Alicja Karolina Raszkowska (she/they) (W2'18)",
            "sender_id": 100049,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Product infrastructure teams",
            "submessages": [],
            "timestamp": 1590105592,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e622b23d56ce1dbfd935c38e071636c4a40935e8?x=x&version=2",
            "client": "website",
            "content": "<p>For those of you using Jupyter notebooks or interested in literate programming + REPL-driven development, here's an amusing little observation: <a href=\"https://jupyterlab.readthedocs.io/en/stable/\">Jupyter Lab</a> enables you to do REPL-driven, literate programming with markdown\u2014in any language that has a Jupyter kernel. Here's a short demo:</p>\n<p><a href=\"https://vimeo.com/421459578\">https://vimeo.com/421459578</a></p>\n<p>I'm just beginning to play around with this ... It's probably too awkward for projects of an appreciable size. But for exploration and writing about code, it's pretty sweet.</p>\n<p>Some remarks:</p>\n<ul>\n<li>\n<p>Perhaps this kind of workflow in J'Lab is well known, but I found no mention of it in the docs.</p>\n</li>\n<li>\n<p>You can do the same with ordinary Jupyter notebooks (.ipynb files). But those are a pain to version-control in comparison to markdown.</p>\n</li>\n<li>\n<p>There exist \"systems\" for notebook-centered development, e.g., <a href=\"https://nbdev.fast.ai\">nbdev</a>, <a href=\"https://github.com/mwouts/jupytext\">jupytext</a>.</p>\n</li>\n<li>\n<p>You get tab-completion in code blocks (at least for Python), but otherwise editing conveniences are pretty spare.</p>\n</li>\n<li>\n<p>To extract source files/\"tangle\" code blocks, you need an external tool like <a href=\"https://pandoc.org\">pandoc</a> and/or DIY scripts. It would be nice to have that functionality in a J'Lab extension.</p>\n</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198421596,
            "is_me_message": false,
            "last_edit_timestamp": 1590140217,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "eha@posteo.de",
            "sender_full_name": "Eugene Ha (he) (S1'18)",
            "sender_id": 116366,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "REPL-driven markdown for (almost) any language",
            "submessages": [],
            "timestamp": 1590139528,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/afcff71a280c619fe7f45af5df2f66b9617479fc?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>I've used Jupyter / Anaconda and like some of the ergonomics of the system, but the proprietary on-disk format and inability to version control, along with limited language support are off-putting. </p>\n<p>It's sad that a plain-text system like org-mode (with org-babel) is not available outside of Emacs, for \"live\" notebook use cases. org-babel supports an astonishingly <a href=\"https://orgmode.org/worg/org-contrib/babel/languages.html\">diverse set of languages</a> out of the box.  I've personally had executable python, elisp, shell, http, SQL, and clojure code, co-exist in the same file with no problem.</p>\n<p>Here are some more examples of what people are doing with it (including publishing, data science, and reproducible research):</p>\n<ul>\n<li><a href=\"https://www.orgmode.org/worg/org-screenshots.html\">Org screenshots</a></li>\n<li><a href=\"https://kitchingroup.cheme.cmu.edu/blog/2014/08/08/What-we-are-using-org-mode-for/\">One CMU research group's \"What we are using org-mode for\"</a> --- I too use it for several of these purposes.</li>\n<li><a href=\"http://doc.norang.ca/org-mode.html#OrgBabel\">norang's awesome page on org-mode</a></li>\n<li><a href=\"https://home.fnal.gov/~neilsen/notebook/orgExamples/org-examples.html\">org-examples hosted at fermilab</a></li>\n<li><a href=\"https://github.com/dfeich/org-babel-examples\">dfeich's polyglot org-babel-examples</a> (see the \"raw\" source, for actual org-mode plaintext --- github renders org files as HTML :-)</li>\n<li><a href=\"https://www.researchgate.net/publication/281886434_Effective_Reproducible_Research_with_Org-Mode_and_Git\">Effective reproducible research with org-mode and git</a></li>\n<li><a href=\"https://eschulte.github.io/org-scraps/\">guru-level know-how, after achieving org-mode enlightenment</a></li>\n</ul>\n<p>If I were to forget everything about Emacs, but remember what org-mode + org-babel can do, I would eat the cost of learning <em>just</em> enough Emacs to make use of it (at most a week's investment, starting from zero; maybe 2x more work than with Jupyter).</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198437296,
            "is_me_message": false,
            "last_edit_timestamp": 1590158503,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "aditya.athalye@gmail.com",
            "sender_full_name": "Aditya Athalye (he) (SP1'20)",
            "sender_id": 263547,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "REPL-driven markdown for (almost) any language",
            "submessages": [],
            "timestamp": 1590151838,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7219fef444d9242d5c96eb33bfe456c37a2df41c?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Oh man, I had been meaning to give org-babel a better look when I read <a href=\"https://news.ycombinator.com/item?id=16841909\">https://news.ycombinator.com/item?id=16841909</a>, but had stubbornly not done so because I was collaborating with a bunch of jupyter users at the time. I think I'd still opt for jupyter given my current workflow and people I work with; the interactivity of <a href=\"http://beakerx.com/\">http://beakerx.com/</a> etc is pretty critical to some of my workflows.</p>\n<p>As far as making jupyter more source control friendly, I had used <a href=\"https://github.com/rossant/ipymd\">https://github.com/rossant/ipymd</a> a few years back. I feel like there is room for someone to combine the ideas of nbdev (githooks to clean up session data) and ipymd/jupytext (and hopefully adds images), and possibly integrating <a href=\"https://github.com/eclecticiq/rundoc\">https://github.com/eclecticiq/rundoc</a> as well.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198446876,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "johnurbanik@gmail.com",
            "sender_full_name": "John Urbanik (he) (S1'20)",
            "sender_id": 303322,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "REPL-driven markdown for (almost) any language",
            "submessages": [],
            "timestamp": 1590157261,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/afcff71a280c619fe7f45af5df2f66b9617479fc?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"303322\">John Urbanik (he) (S1'20)</span> <a href=\"#narrow/stream/18957-programming/topic/REPL-driven.20markdown.20for.20(almost).20any.20language/near/198446876\">said</a>:</p>\n<blockquote>\n<p>collaborating with a bunch of jupyter users at the time. I  think I'd still opt for jupyter given my current workflow and people I work with</p>\n</blockquote>\n<p>In that situation, I would do the same. For, when in Rome... I might still enjoy a chance to show 'em how it's <em>well, actually</em> done <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>\n<p>(edit) I should note, org-mode + org-babel has its own warts and idiosyncrasies that one has to learn to live with.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198447444,
            "is_me_message": false,
            "last_edit_timestamp": 1590157715,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "aditya.athalye@gmail.com",
            "sender_full_name": "Aditya Athalye (he) (SP1'20)",
            "sender_id": 263547,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "REPL-driven markdown for (almost) any language",
            "submessages": [],
            "timestamp": 1590157498,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e622b23d56ce1dbfd935c38e071636c4a40935e8?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"263547\">@Aditya Athalye (he) (SP1'20)</span>, great collection of links! Do you know whether org mode has a formal spec?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198449200,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "eha@posteo.de",
            "sender_full_name": "Eugene Ha (he) (S1'18)",
            "sender_id": 116366,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "REPL-driven markdown for (almost) any language",
            "submessages": [],
            "timestamp": 1590158514,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/afcff71a280c619fe7f45af5df2f66b9617479fc?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"116366\">@Eugene Ha (he) (S1'18)</span> I don't believe there's a formal spec or grammar, but the <a href=\"https://orgmode.org/manual/Document-Structure.html#Document-structure\">document structure</a> is defined well, and the rest of the addons from the org-mode ecosystem  (e.g. org-babel) plug into these constructs.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198449805,
            "is_me_message": false,
            "last_edit_timestamp": 1590158861,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "aditya.athalye@gmail.com",
            "sender_full_name": "Aditya Athalye (he) (SP1'20)",
            "sender_id": 263547,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "REPL-driven markdown for (almost) any language",
            "submessages": [],
            "timestamp": 1590158829,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6701a174f1db000a26333d68f396f4b0584bbd97?x=x&version=2",
            "client": "website",
            "content": "<p>I'm at Asana (~850 employees, ~200 engineers). We split our engineering organization into three pillars (Product, Infrastructure, and Data). I'm on the Infrastructure team, and I'm doing a fair bit of backend application development, so the lines between those pillars of the organization are definitely fuzzy. Historically most of the work to support product developers happened in the Client Infrastructure team (which, despite its name, is in the Product pillar), and was responsible for a lot of frontend infrastructure work. Asana has recently created a Developer Efficiency team (also in the Product pillar) which will handle internal tooling for product engineers more explicitly. Infrastructure teams also do some product eng support - our Infrastructure Platform team handles testing, and Observability handles logging and tracing tools which are mostly useful to infra but sometimes used by product engineers too. A lot of internal tooling work also happens in offsprints and hackathons. </p>\n<p>So, I'm not sure Asana has handled the boundaries between platform/product/infrastructure any better than Etsy, but maybe it's another data point to consider <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198475077,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "equinney35@gmail.com",
            "sender_full_name": "Emily Quinn Finney (she) (F1'17)",
            "sender_id": 101698,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Product infrastructure teams",
            "submessages": [],
            "timestamp": 1590170912,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/097edbae0d41f8a5149c6ada6fd5c4941e572159?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"116366\">@Eugene Ha (he) (S1'18)</span> one of the great drawbacks (imo) of org-mode is that the formal spec is \"whatever org-mode.el implements\"</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198553742,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "rprior@protonmail.com",
            "sender_full_name": "Ryan Prior (he) (F1'19)",
            "sender_id": 234256,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "REPL-driven markdown for (almost) any language",
            "submessages": [],
            "timestamp": 1590270846,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/097edbae0d41f8a5149c6ada6fd5c4941e572159?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>They make no promises not to break your org-mode files in future updates, if you build tooling in other languages they have no mechanism for coordinating to avoid breaking your tooling, it's basically an \"I am the law\" attitude that has really hindered the spread of org-mode beyond the Emacs sphere.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198553771,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "rprior@protonmail.com",
            "sender_full_name": "Ryan Prior (he) (F1'19)",
            "sender_id": 234256,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "REPL-driven markdown for (almost) any language",
            "submessages": [],
            "timestamp": 1590270919,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/097edbae0d41f8a5149c6ada6fd5c4941e572159?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I'm interested in creating an independent fork of org-mode that is explicitly non-Emacs centric (despite being an Emacs user myself) specifically because I like it a lot and want to drive adoption in other tools, but don't think that's a wise or tenable proposition with the current community configuration.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 198553833,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "rprior@protonmail.com",
            "sender_full_name": "Ryan Prior (he) (F1'19)",
            "sender_id": 234256,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "REPL-driven markdown for (almost) any language",
            "submessages": [],
            "timestamp": 1590271015,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"9502\">@Annie Cherkaev (she/they) (m4'18)</span> <span class=\"user-mention\" data-user-id=\"8090\">@Kamal Marhubi (he) (m2'18)</span>  <span class=\"user-mention\" data-user-id=\"234256\">@Ryan Prior (he) (F1'19)</span> I just ran across <a href=\"http://dasungtech.com/english/detail/id/223\">http://dasungtech.com/english/detail/id/223</a> which seems quite suitable for an eink programming environment. It looks like it can be run directly from a phone (acting as a monitor) and has high refresh rates somehow: <a href=\"https://youtu.be/vnUACe8Bsyg?t=30\">https://youtu.be/vnUACe8Bsyg?t=30</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"vnUACe8Bsyg\" href=\"https://youtu.be/vnUACe8Bsyg?t=30\"><img src=\"https://i.ytimg.com/vi/vnUACe8Bsyg/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199106743,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "eink programming environment",
            "submessages": [],
            "timestamp": 1590717856,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>The low production value of the website and videos actually gives me a lot of confidence that this is put together by a real factory in China with a real product rather than some slick Kickstarter ding dongs with overactive imaginations.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199106789,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f602",
                    "emoji_name": "joy",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jaseemabid@gmail.com",
                        "full_name": "Jaseem Abid (he) (S1'17)",
                        "id": 101128
                    },
                    "user_id": 101128
                },
                {
                    "emoji_code": "1f602",
                    "emoji_name": "joy",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "fabi@hey.com",
                        "full_name": "Fabian Tamp (he) (W2'20)",
                        "id": 255053
                    },
                    "user_id": 255053
                },
                {
                    "emoji_code": "1f602",
                    "emoji_name": "joy",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ajarara94@gmail.com",
                        "full_name": "Ahmad Jarara (S2'17)",
                        "id": 101400
                    },
                    "user_id": 101400
                },
                {
                    "emoji_code": "1f602",
                    "emoji_name": "joy",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "thwidge@gmail.com",
                        "full_name": "Maren Beam (she) (SP2'19)",
                        "id": 215391
                    },
                    "user_id": 215391
                },
                {
                    "emoji_code": "1f602",
                    "emoji_name": "joy",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "me@captnemo.in",
                        "full_name": "Nemo (he) (S1'20)",
                        "id": 301256
                    },
                    "user_id": 301256
                },
                {
                    "emoji_code": "1f602",
                    "emoji_name": "joy",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                },
                {
                    "emoji_code": "1f602",
                    "emoji_name": "joy",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "annie.cherk@gmail.com",
                        "full_name": "Annie Cherkaev (she/they) (m4'18)",
                        "id": 9502
                    },
                    "user_id": 9502
                },
                {
                    "emoji_code": "1f602",
                    "emoji_name": "joy",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "grey@quietmisdreavus.net",
                        "full_name": "Victoria Mitchell (she) (F2'19)",
                        "id": 240569
                    },
                    "user_id": 240569
                },
                {
                    "emoji_code": "1f602",
                    "emoji_name": "joy",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "rprior@protonmail.com",
                        "full_name": "Ryan Prior (he) (F1'19)",
                        "id": 234256
                    },
                    "user_id": 234256
                }
            ],
            "recipient_id": 20203,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "eink programming environment",
            "submessages": [],
            "timestamp": 1590717948,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Pricing is around $1k and some of the panels have touchscreens and built-in lighting.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199106899,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "eink programming environment",
            "submessages": [],
            "timestamp": 1590718034,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<p>That's a biiiiit on the expensive end. And no weight listed?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199107187,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "eink programming environment",
            "submessages": [],
            "timestamp": 1590718387,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Kamal, if you want things to be cheap you need to only want things that 100 million other people also want. This is a low volume product whose fundamental technology must be licensed from a single patent holder AND which seems to have had a lot of custom R&amp;D work done to bump up the frame rate well beyond what any other player in this market has done.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199107662,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "eink programming environment",
            "submessages": [],
            "timestamp": 1590718936,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I would be surprised if they've made any money selling these yet.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199107683,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "eink programming environment",
            "submessages": [],
            "timestamp": 1590718966,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>wow, this looks excellent. how's the touchscreen work - is touchscreen over HDMI a standard thing? and the power connection/draw is unclear to me. but this looks really exciting!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199107938,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "eink programming environment",
            "submessages": [],
            "timestamp": 1590719266,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/097edbae0d41f8a5149c6ada6fd5c4941e572159?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Touch over HDMI is definitely possible. Possibly uses the <a href=\"https://en.wikipedia.org/wiki/Consumer_Electronics_Control\">Consumer Electronics Control</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199108184,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "rprior@protonmail.com",
            "sender_full_name": "Ryan Prior (he) (F1'19)",
            "sender_id": 234256,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "eink programming environment",
            "submessages": [],
            "timestamp": 1590719528,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I assume it is a capacitive touchscreen over the panel. I don't know about the software side. I'm currently in Taiwan and so it would probably be pretty quick to get one of these mailed to me (I just had a custom run of lipo batteries manufactured in Shenzhen and they only took 2 days to arrive). If people are really interested, we could split the cost of one of these devices and we could do some remote pairing to figure out how it works and the various possibilities for using it.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199108195,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "eink programming environment",
            "submessages": [],
            "timestamp": 1590719556,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/097edbae0d41f8a5149c6ada6fd5c4941e572159?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I would definitely be interested if they come out with a notebook version of this. I'm not really looking for a monitor, but it looks awesome!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199108474,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "rprior@protonmail.com",
            "sender_full_name": "Ryan Prior (he) (F1'19)",
            "sender_id": 234256,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "eink programming environment",
            "submessages": [],
            "timestamp": 1590719942,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/097edbae0d41f8a5149c6ada6fd5c4941e572159?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Looking into it more, I doubt it uses CEC. It comes with an proprietary-male-to-HDMI-male-plus-USB-A-male split cable, so it has a souped up chip in the monitor which splits out into HDMI+USB.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199108564,
            "is_me_message": false,
            "last_edit_timestamp": 1590720146,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "rprior@protonmail.com",
            "sender_full_name": "Ryan Prior (he) (F1'19)",
            "sender_id": 234256,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "eink programming environment",
            "submessages": [],
            "timestamp": 1590720062,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/097edbae0d41f8a5149c6ada6fd5c4941e572159?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Too bad that they didn't make it usb-c to usb-c - maybe in the future :)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199108642,
            "is_me_message": false,
            "last_edit_timestamp": 1590720434,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "rprior@protonmail.com",
            "sender_full_name": "Ryan Prior (he) (F1'19)",
            "sender_id": 234256,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "eink programming environment",
            "submessages": [],
            "timestamp": 1590720193,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I would be surprised if anyone came out with a notebook e-ink because I don't think there's a sufficiently large market. Sure, I've heard of programmers asking for this kind of thing, but even then I bet it's several disjoint sub-markets. (People who want a powerful laptop they can see/read outside, people who want a lightweight battery-lasts-for-days typewriter, etc.)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199108977,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "eink programming environment",
            "submessages": [],
            "timestamp": 1590720659,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Since this is \"just a monitor\" it may be usable as a component in a DIY-ish system. I.e., if you want a notebook, buy one of these and tape a single board computer and keyboard to it.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199109041,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "eink programming environment",
            "submessages": [],
            "timestamp": 1590720736,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>This Redditor has more details: <a href=\"https://www.reddit.com/r/eink/comments/aq5j5o/i_own_a_dasung_paperlike_pro_ask_me_anything/\">https://www.reddit.com/r/eink/comments/aq5j5o/i_own_a_dasung_paperlike_pro_ask_me_anything/</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199109127,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "eink programming environment",
            "submessages": [],
            "timestamp": 1590720923,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7d2ab014ebf55e99afffba1a3d92be8155754f0f?x=x&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>Kamal, if you want things to be cheap you need to only want things that 100 million other people also want</p>\n</blockquote>\n<p>Fair. I meant specifically a bit expensive to take a leap of faith on it. I have a remarkable tablet which was about half that, which I think is maybe my limit for \"maybe this will be good?\" purchase. What I'd really like from this is to be USB-C powered and weight not much more than half a kilogram...</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199110283,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "kamal@marhubi.com",
            "sender_full_name": "Kamal Marhubi (he) (m2'18)",
            "sender_id": 8090,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "eink programming environment",
            "submessages": [],
            "timestamp": 1590722644,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/523da7ab50b368701be60ddf77adff60cc9a7610?x=x&version=3",
            "client": "website",
            "content": "<p>how hackable are remarkable tablets? i've preordered a remarkable 2. it would be very interesting to run an editor and some remote filesystem on i. with usb-c in theory one might connect a keyboard to it.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199171357,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "s@aljmz.com",
            "sender_full_name": "Salm\u0101n Aljamm\u0101z (he) (SP1'20)",
            "sender_id": 263563,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "eink programming environment",
            "submessages": [],
            "timestamp": 1590766658,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/523da7ab50b368701be60ddf77adff60cc9a7610?x=x&version=3",
            "client": "website",
            "content": "<p>last time i tried this was circa 2011 on a kindle. ARMv5 wasn't fun but i got the go compilers to work on it!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199171542,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "s@aljmz.com",
            "sender_full_name": "Salm\u0101n Aljamm\u0101z (he) (SP1'20)",
            "sender_id": 263563,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "eink programming environment",
            "submessages": [],
            "timestamp": 1590766753,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/36ab138e6370dced362b88e9282f0c6579f9eb85?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>There have been a few articles mentioning these on hackaday recently, it's got me thinking about ordering one as well! <a href=\"https://hackaday.com/2020/05/27/epaper-tablet-gets-desktop-linux-install/\">https://hackaday.com/2020/05/27/epaper-tablet-gets-desktop-linux-install/</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199173384,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "alee@aaronosaur.us",
            "sender_full_name": "Aaron Lee (he) (S1'20)",
            "sender_id": 301228,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "eink programming environment",
            "submessages": [],
            "timestamp": 1590767580,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/097edbae0d41f8a5149c6ada6fd5c4941e572159?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Ooh the remarkable 2 looks fantastic. It's just crying out for a keyboard case!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199220515,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "rprior@protonmail.com",
            "sender_full_name": "Ryan Prior (he) (F1'19)",
            "sender_id": 234256,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "eink programming environment",
            "submessages": [],
            "timestamp": 1590791613,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b050f1472b8bbcd2bf5b0d4e2f703d1c89c34983?x=x&version=6",
            "client": "website",
            "content": "<p>give that thing a keyboard, tell me it can run vim, git, and gcc, and I'd buy it.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199221238,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "john@beyondloom.com",
            "sender_full_name": "John Earnest (he) (SP2'20)",
            "sender_id": 276205,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "eink programming environment",
            "submessages": [],
            "timestamp": 1590792186,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a39073ec6ea8070cbfb74f6d7da8c999?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I've made a few tools for literate programming in Markdown.</p>\n<p>Most importantly, a <a href=\"https://github.com/vijithassar/lit\">shell script</a> which handles any language, recursively compiles/tangles entire codebases of mixed literate and non-literate code, and allows you to execute directly from the Markdown if you're using an interpreted language.</p>\n<p>For Javascript, there's a <a href=\"https://github.com/vijithassar/lit-web\">web loader</a> and a <a href=\"https://github.com/vijithassar/rollup-plugin-markdown\">Rollup plugin</a>, and also <a href=\"https://github.com/rich-harris/lit-node\">lit-node</a> by Rich Harris, to which I've contributed a pull request or two. The latter lets you run your Markdown documents in Node and import from Markdown files; the big catch is that Node.js hasn't yet implemented the necessary loading hooks for ES modules (it's planned for a future stage), so right now it only works with CommonJS modules. (The Rollup plugin obviously lets you use ES modules, though, since that's the whole point of Rollup.)</p>\n<p>These are all different ways of packaging the same logic, which segments code from prose by iterating through the lines of code and counting sets of triple-backtick code \"fences.\"</p>\n<p>I've done some <a href=\"https://bl.ocks.org/vijithassar\">data viz projects</a> in this format and also <a href=\"https://github.com/vijithassar/cryptopals-literate-python\">started in on Cryptopals</a>, but put the latter on hold because I realized it would benefit tremendously from a Python version of those Node.js import hooks, which I've been very slowly working on.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199282374,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "38",
                    "emoji_name": "wizard_hat",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "eha@posteo.de",
                        "full_name": "Eugene Ha (he) (S1'18)",
                        "id": 116366
                    },
                    "user_id": 116366
                },
                {
                    "emoji_code": "38",
                    "emoji_name": "wizard_hat",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "aditya.athalye@gmail.com",
                        "full_name": "Aditya Athalye (he) (SP1'20)",
                        "id": 263547
                    },
                    "user_id": 263547
                }
            ],
            "recipient_id": 20203,
            "sender_email": "recurse@vijithassar.com",
            "sender_full_name": "Vijith Assar (W2'18)",
            "sender_id": 105042,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "REPL-driven markdown for (almost) any language",
            "submessages": [],
            "timestamp": 1590884265,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c2004dab6a5b7f7ddfca0ea3dcf1b312cf28113d?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Thank you all for answering my question and sharing your experience! These detailed thoughts are a resource I'll revisit into the future.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199389874,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "pattersoncharlesl@gmail.com",
            "sender_full_name": "Charlie Patterson (he) (SP2'20)",
            "sender_id": 279703,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Dealing with Abstraction",
            "submessages": [],
            "timestamp": 1591028615,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/dd4431e3969ba21175d5ecbb361fed54e2c53c45?x=x&version=3",
            "client": "ZulipElectron",
            "content": "<p>Hi all! I couldn't find a more specific channel for this, so hopefully this is the right place. I'm new to writing/profiling CUDA code, and I'm confused\u2014I'd love to hear about your favorite learning resources! Specifically,</p>\n<ol>\n<li>\n<p>Does anyone have favorite tutorial/instruction-oriented CUDA programming resources (books, courses, etc.)? I'm trying to improve my mental model of the CUDA ecosystem. I'm currently going through <a href=\"http://www.cudahandbook.com/\">http://www.cudahandbook.com/</a>, which is awesome but pretty old\u2014I'm not sure how much has changed since 2013.</p>\n</li>\n<li>\n<p>Does anyone have any favorite \"overview of NVIDIA profiling\" resources? The nvprof docs are pretty good, but they're dense and fairly specific. Are there any other intro-level \"how to approach CPU/GPU profiling problem\" courses/books/etc. that you all like?</p>\n</li>\n</ol>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199426832,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "lee@leesharma.com",
            "sender_full_name": "Lee Sharma (she) (W2'19)",
            "sender_id": 158531,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "CUDA resources?",
            "submessages": [],
            "timestamp": 1591047217,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/da27a2081fcf44c802c1806cdb5bb881310dfe7c?x=x&version=5",
            "client": "website",
            "content": "<p>Take my advice with a grain of salt as I'm no CUDA expert:</p>\n<ol>\n<li>A lot has changed but most of the changes were additive, i.e. new features were added (mostly ones that tracked improvements in the hardware). The basics of CUDA remain the same, so you're OK with an old book. For something a little more recent, I have a copy of \"Programming Massively Parallel Processors\" and I liked it enough. The latest edition is from 2016.</li>\n<li>What are your objectives exactly? Do you have code that you want to make faster? Do you want to understand how to write fast code? As a prerequisite, it helps <em>a lot</em> to understand how the hardware works, in particular GPUs are weird beasts that can be counterintuitive, even if you know how CPUs work. In particular it's important to understand the GPU memory hierarchy, and the concept of divergence. For profiling work you should also take a look at the NVIDIA Visual Profiler and its docs.</li>\n</ol>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199571090,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ad@lamarque.fr",
            "sender_full_name": "Adrien Lamarque (they/he) (S1'16)",
            "sender_id": 9335,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "CUDA resources?",
            "submessages": [],
            "timestamp": 1591146645,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>I'm not sure how much has changed since 2013.</p>\n</blockquote>\n<p>I'm not particularly familiar with the ecosysem, but I know a <em>huge</em> amount has changed in the last few years -- specifically, I'm aware that you can more or less write standard C++ for new enough GPUs, and that the C++17 and up thread model was designed to run on the GPU.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199643984,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "CUDA resources?",
            "submessages": [],
            "timestamp": 1591202365,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>Olivier Giroux, specifically, has a number of great talks on this: <a href=\"https://www.youtube.com/watch?v=86seb-iZCnI\">https://www.youtube.com/watch?v=86seb-iZCnI</a>, <a href=\"https://www.youtube.com/watch?v=VogqOscJYvk\">https://www.youtube.com/watch?v=VogqOscJYvk</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"86seb-iZCnI\" href=\"https://www.youtube.com/watch?v=86seb-iZCnI\"><img src=\"https://i.ytimg.com/vi/86seb-iZCnI/default.jpg\"></a></div><div class=\"youtube-video message_inline_image\"><a data-id=\"VogqOscJYvk\" href=\"https://www.youtube.com/watch?v=VogqOscJYvk\"><img src=\"https://i.ytimg.com/vi/VogqOscJYvk/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199644195,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "CUDA resources?",
            "submessages": [],
            "timestamp": 1591202459,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>but those aren't resources for learning cuda.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199644209,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "CUDA resources?",
            "submessages": [],
            "timestamp": 1591202464,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6f8ddedf593eefcabbc13434b183e7d7?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Sorry for disappearing for a few days! Thanks so much for sharing this info with me. It is very interesting to see how other companies do it even if there are no easy answers. :)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199934846,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "allie.jones@gmail.com",
            "sender_full_name": "Allie Jones (she/they) (W'13)",
            "sender_id": 821,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Product infrastructure teams",
            "submessages": [],
            "timestamp": 1591391643,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3c38f253217c1b67500972630b0e83e581de8880?x=x&version=4",
            "client": "ZulipMobile",
            "content": "<p>Nice list of upcoming remote conferences. Many of these are free.</p>\n<p><a href=\"https://dev.events/ON\">https://dev.events/ON</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200258147,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f64f",
                    "emoji_name": "thank_you",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "eha@posteo.de",
                        "full_name": "Eugene Ha (he) (S1'18)",
                        "id": 116366
                    },
                    "user_id": 116366
                },
                {
                    "emoji_code": "1f64f",
                    "emoji_name": "thank_you",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "fabi@hey.com",
                        "full_name": "Fabian Tamp (he) (W2'20)",
                        "id": 255053
                    },
                    "user_id": 255053
                },
                {
                    "emoji_code": "1f64f",
                    "emoji_name": "thank_you",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "dylanjw@protonmail.com",
                        "full_name": "Dylan Wilson (he) (F1'20)",
                        "id": 301059
                    },
                    "user_id": 301059
                },
                {
                    "emoji_code": "1f64f",
                    "emoji_name": "thank_you",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jkrippy@gmail.com",
                        "full_name": "Jonathan Rippy (he) (m6'19)",
                        "id": 240597
                    },
                    "user_id": 240597
                },
                {
                    "emoji_code": "1f64f",
                    "emoji_name": "thank_you",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "adam.christopher.hall@gmail.com",
                        "full_name": "Adam Christopher Hall (he) (S1'20)",
                        "id": 301007
                    },
                    "user_id": 301007
                }
            ],
            "recipient_id": 20203,
            "sender_email": "ariesunique@gmail.com",
            "sender_full_name": "Aiyana Brooks (she) (W2'20)",
            "sender_id": 255068,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Remote conferences",
            "submessages": [],
            "timestamp": 1591721126,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2966057ab612b244fc712417ccd219c3c523e90a?x=x&version=2",
            "client": "website",
            "content": "<p>test driven development!<br>\nI tend to habitually write code in a stringently modular way in a paradigm I know. but I think it's natural to write lots of gnarly spaghetti, temp hacks, and dead ends whenever you're trying out a new design pattern or paradigm. and the longer the spaghetti, the harder it is to perform quick hypothesis verifications of your growing mental model.</p>\n<p>it's slightly annoying at first, but really\u00a0an enormous time-saver to habitually write loads of basic tests, to help verify the interfaces / contracts between the different boxes!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200578658,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "rhotic@alum.mit.edu",
            "sender_full_name": "Rachel (rfong) Fong (they) (m2'20)",
            "sender_id": 263712,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Dealing with Abstraction",
            "submessages": [],
            "timestamp": 1591896925,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1d11f248c7245bd3a1576ca4bf16aa7987fcee84?x=x&version=1",
            "client": "website",
            "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"821\">@Allie Jones (she) (W'13)</span> , very interesting thread. This is something we talked about from time to time at work.</p>\n<p>My company has gone through different approaches. Note that my company is mainly split in multidisciplinary product teams (PO, UX, FE, BE) and everything I'm going to mention is only about the Front-end world (between 50-70 FE developers along the company located in different teams), there is also a big part of Back-end infrastructure.</p>\n<p>4 years ago when I started working there, they had a team called \"The Pit\", which was in charge of a 15 days \"bootcamp\" for Front-enders to get familiar with the technologies, additionally they had to tackle every ticket non related with product, such as infrastructure, improve tooling, bugs nobody wanted, etc. This was called the \"Systems team\" as well.</p>\n<p>At some point this team was overwhelmed and changed to mission, they focused on modularize the Front-end Java/Backbone monolith, extracting the home page to a new module and improve the technology. In parallel it was created a group of what we called \"Mentors\" that discussed improvements, contribute to good practices or problems no one wanted to fix. Mention that this \"Mentor\" position was a voluntary role that was extra work, having no official power at all to distribute the work to other teams. All the \"Mentors\" worked in their product teams and sometimes they were the ones to solved the issues. So after sometime it changed as well.</p>\n<p>The home page modularization took long time to be done due to issues with the choices of the new technologies and after that, the previously called \"The Pit\" team, continued modularizing other parts of the web, but the \"Mentors\" continued being in charge of infrastructure issues, improvements, etc. As you all can imagine, since the company didn't want to create specific teams for this kind of topics in favor of only product teams, the improvements and infrastructure issues moved very slowly.</p>\n<p>Later on, it was created a group called \"Front-end Cooperative\" to replace the \"Mentors\", with weekly meetings where everyone could attend and where there were a few \"Facilitators\", senior engineers that voluntarily accept the position, with actual \"power\" to decide which team should work on the ticket. The assignment of tasks tried to be equal between teams, to balance the weight. </p>\n<p>This last approach works better than the previous ones, but still there are many issues, since even though many teams are willing to receive horizontal tasks, there is some resistance from product. Another problem is that there are some big tasks such as Dockerize the platform, adapt the app to be able to go to Cloud, that in the end are done by the \"Facilitators\" (the old \"Mentors\" :P), since they are difficult to split or big enough for the Product Owners to reject this kind of task right away.</p>\n<p>Summarizing, nowadays all of those \"product infrastructure\" tasks are split in two parts, an actual team that is in charge in modularize parts of the web (with new tech, new guidelines, new ways of testing) and a \"Front-end Cooperative\" that is not a team, which maintain the current guidelines, good practices and delivers tickets to other product teams to do infrastructure tasks (even though many times the \"Facilitators\" do those tasks).</p>\n<p>I understand that the company first priority is the product, however based in what I saw along these years, I believe that it is worth having dedicated people working covering the whole spectrum of the \"product infrastructure\", so the ones working in product do not get distracted and have a solid platform that evolves faster, that in the end allows the product to iterate quicker and be more reliable.</p>\n<p>I hope it helps :)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200759466,
            "is_me_message": false,
            "last_edit_timestamp": 1592043575,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "javiervalenciaromero@gmail.com",
            "sender_full_name": "Javier Valencia Romero (W1'15)",
            "sender_id": 8855,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Product infrastructure teams",
            "submessages": [],
            "timestamp": 1592043501,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c1c5789a9ec48818bbc90f3fdc324560d9a2021?x=x&version=2",
            "client": "website",
            "content": "<p>I was working on a webapp for fun this weekend (a goodreads clone type of thing, to give a sense of the interactivity level), and I decided as a challenge to myself to try to do it using as little Javascript as possible (so far, none). </p>\n<p>My inspiration for this was <a href=\"https://sourcehut.org/\">Sourcehut</a>, which I was tinkering with last week and quite impressed by. It seems like the old-school implementation (I'm not sure Sourcehut uses javascript at all? I haven't found any, at least) acts as a design constraint that encourages simple workflows, and the site is super fast and lightweight as well.</p>\n<p>Does anyone have examples of other sites like this? I'm curious about things which have been built recently but eschew JS for aesthetic, performance, accessibility or whatever other reasons, and how far it's possible to get before it really makes sense to switch to a single-page app.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200900598,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "logan.buckley@gmail.com",
            "sender_full_name": "Logan Buckley (S1'17)",
            "sender_id": 101096,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Webapps without Javascript",
            "submessages": [],
            "timestamp": 1592233197,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e2f8987799eac611a3e8189eeb6b8cf0b63de0c9?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I think if you stick to doing server-side rendered html, you can go really far. Forms can be all handled natively by the browser. You can do a lot with CSS and animations, with some CSS :focus/hover trickery. Basically until ajax became commonplace, sites didn't really use much javascript and you can do lots of work on the backend.</p>\n<p>If you're okay with (some) JS, you can use stuff like <a href=\"https://github.com/turbolinks/turbolinks\">turbolinks</a> to get an SPA-feel without dealing with a messy build system.</p>\n<p>With all that said, I haven't ever tried to do zero-JS anything. But it sounds like a fun challenge.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200921067,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "jimmy@skelios.com",
            "sender_full_name": "James Byess (he) (F1'19)",
            "sender_id": 234072,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Webapps without Javascript",
            "submessages": [],
            "timestamp": 1592242407,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4d05a1864740bfcbe9e387dcc84c176442985158?x=x&version=8",
            "client": "ZulipMobile",
            "content": "<p>I think that <a href=\"https://git.zx2c4.com/cgit/\">cgit</a> has no required JavaScript -- I'm not totally sure but I think the script on that page is just google analytics</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200926710,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "thwidge@gmail.com",
            "sender_full_name": "Maren Beam (she) (SP2'19)",
            "sender_id": 215391,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Webapps without Javascript",
            "submessages": [],
            "timestamp": 1592245206,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>sourcehut, cgit, news.ycombinator uses some JS but works fine without it</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200928316,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Webapps without Javascript",
            "submessages": [],
            "timestamp": 1592246065,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0a99cd79ea0979a9d6ec88d5388f5e9c?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><a href=\"http://slimvoice.co\">slimvoice.co</a> uses little to no javascript. The author has some articles about it: <br>\n<a href=\"https://javascript.works-hub.com/learn/a-javascript-free-frontend-61275\">https://javascript.works-hub.com/learn/a-javascript-free-frontend-61275</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200930631,
            "is_me_message": false,
            "last_edit_timestamp": 1592247423,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "dylanjw@protonmail.com",
            "sender_full_name": "Dylan Wilson (he) (F1'20)",
            "sender_id": 301059,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Webapps without Javascript",
            "submessages": [],
            "timestamp": 1592247412,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c1c5789a9ec48818bbc90f3fdc324560d9a2021?x=x&version=2",
            "client": "website",
            "content": "<p>Ah cool <span class=\"user-mention\" data-user-id=\"301059\">@Dylan Wilson (he) (S1'20)</span> thanks for the link! I did some googling for posts like that but was only able to find information about how to write your SPA in a language other than javascript haha.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 200945078,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "logan.buckley@gmail.com",
            "sender_full_name": "Logan Buckley (S1'17)",
            "sender_id": 101096,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Webapps without Javascript",
            "submessages": [],
            "timestamp": 1592254845,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/afcff71a280c619fe7f45af5df2f66b9617479fc?x=x&version=4",
            "client": "website",
            "content": "<p>Also try twitter, with javascript disabled</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 201139703,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "aditya.athalye@gmail.com",
            "sender_full_name": "Aditya Athalye (he) (SP1'20)",
            "sender_id": 263547,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Webapps without Javascript",
            "submessages": [],
            "timestamp": 1592400221,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/42eb8364884b6847ba9c7485ae5b47650e0e95fc?x=x&version=2",
            "client": "website",
            "content": "<p>I would love to write a \"no JS\" web app entirely implemented in server-side JS</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 201507605,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "dfriedman58@gmail.com",
            "sender_full_name": "Daniel Friedman (he) (S1'18)",
            "sender_id": 116363,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Webapps without Javascript",
            "submessages": [],
            "timestamp": 1592700237,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/42eb8364884b6847ba9c7485ae5b47650e0e95fc?x=x&version=2",
            "client": "website",
            "content": "<p>Joking aside, and at risk of stating the obvious I think the main question to explore is whether you're not bothered by full page loads whenever the user takes an action that reads or writes data. In an app without client-side code, the UI is data that's repeatedly sent over the wire. Maybe this challenge is the point here? I definitely think that \"read heavy\" user experiences can work well without JS</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 201508309,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "dfriedman58@gmail.com",
            "sender_full_name": "Daniel Friedman (he) (S1'18)",
            "sender_id": 116363,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Webapps without Javascript",
            "submessages": [],
            "timestamp": 1592701216,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/700775c1b9679bb74bd97d4ced91fadf9cc2ed17?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"116363\">Daniel Friedman (he) (S1'18)</span> <a href=\"#narrow/stream/18957-programming/topic/Webapps.20without.20Javascript/near/201507605\">said</a>:</p>\n<blockquote>\n<p>I would love to write a \"no JS\" web app entirely implemented in server-side JS</p>\n</blockquote>\n<p>i recently saw someone on twitter get mad about exactly this. someone made a website that proudly asserted that it didn't serve any javascript to the browser, and a guy in the replies to the website's creator was furious that some backend service involved in serving the page actually was written in javascript</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 201509223,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "roland@rolandcrosby.com",
            "sender_full_name": "Roland Crosby (he) (SP2'20)",
            "sender_id": 276197,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Webapps without Javascript",
            "submessages": [],
            "timestamp": 1592702691,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/42eb8364884b6847ba9c7485ae5b47650e0e95fc?x=x&version=2",
            "client": "website",
            "content": "<p>lmao</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 201509510,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "dfriedman58@gmail.com",
            "sender_full_name": "Daniel Friedman (he) (S1'18)",
            "sender_id": 116363,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Webapps without Javascript",
            "submessages": [],
            "timestamp": 1592703084,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c2e6daeeef10adeec5a6cc456df206b8ee1c9758?x=x&version=2",
            "client": "website",
            "content": "<p>this is reminding me a bit of the various libraries that were built at facebook back when javascript was a lot more unfriendly, less useful, and expensive (2008~2009ish.) One of the first was something for exactly the full-page load problem, where some javascript magic would fetch the new page and replace the contents of the existing one. Maybe <a href=\"https://github.com/turbolinks/turbolinks\">https://github.com/turbolinks/turbolinks</a> is the equivalent now? [EDIT: just noticed turbolinks was already recommended]</p>\n<p>Then in 2009 there was a project called primer. Primer was very simple - it was a small js library that ran at the beginning of page load, and enabled ajax interactions through custom html attributes. So for example you could have a like link with markup like <code>&lt;a ajax-get=\"/like_this_item?id=423423\" /&gt;</code> (i'm making up the syntax, it's been forever.) Then that endpoint would send back new html markup to replace the entire unit with (that was handled automatically by primer), which would now have an Unlike link.</p>\n<p>Primer accomplished two things. One was that facebook had a ton of unnecessary javascript everywhere, and when you looked at it you could boil it down to a common pattern that was used everywhere. So this got rid of a lot of unnecessary code. The other thing that happened as part of this effort was that all the javascript tags got moved to the end of the page, so they were no longer blocking page load time. Primer had a huge impact on overall latency, which is pretty critical (there are studies both on the human attention side and on how engagement metrics drop by some percentage for every extra xxx millliseconds of latency.)</p>\n<p>I thought this might be interesting context :). I find this whole evolution interesting - starting with replacing the whole page using javascript to make things faster, then just replacing smaller pieces of the page which created much richer interactivity. Even something as interactive as quip functioned with this idea of sending ajax requests that would return server-side rendered markup for a while (until they rewrote in react.) - <a href=\"https://www.quora.com/How-is-Quips-web-client-implemented/answer/Kevin-Gibbs\">https://www.quora.com/How-is-Quips-web-client-implemented/answer/Kevin-Gibbs</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 201516741,
            "is_me_message": false,
            "last_edit_timestamp": 1592714944,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "meitros@gmail.com",
            "sender_full_name": "Mihir Kedia (m6'19)",
            "sender_id": 241086,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Webapps without Javascript",
            "submessages": [],
            "timestamp": 1592714911,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>Hi all! We're trying to improve the performance of our <a href=\"https://www.recurse.com/virtual2\">prototype new version of Virtual RC</a>. Right now it works, but is unacceptably slow, especially with lots of people using it.</p>\n<p>We're currently using React and normal DOM elements (<code>div</code>, <code>a</code>, etc.) to render it on the client, because it let us work faster and easily implement common behaviors (tooltips, links, etc.), but after putting a fair amount of work into optimizing this approach, we're beginning to suspect it might just be too slow.</p>\n<p>If you were implementing something like this (multiple \"players\" can control characters in a shared 2D world with real-time updates about other players actions over websockets), what would you use to render it? HTML canvas? A JavaScript game framework? Something else we're not thinking of? If you think canvas is the way to go, would your approach be to re-render the entire canvas on each game tick, or keep track of which regions have changed and only re-render those?</p>\n<p>Thanks in advance for any help!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 201782199,
            "is_me_message": false,
            "last_edit_timestamp": 1592946217,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "fast game-like code in the browser",
            "submessages": [],
            "timestamp": 1592945918,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>what is making the current version slow? you say that it gets worse when lots of people are using it - it sounds like you think that's mostly the client being slow, and not the sever?</p>\n<p>i ask because from using it, it seemed like moving around was very slow, but it seems like that shouldn't be too hard to fix, even in a DOM-based approach?</p>\n<p>i guess your current approach is different from what i would do though - it seems like you have a grid as big as the screen, then update every element in the grid when the player moves? i would think that it would be much more efficient to have the whole world as a grid loaded into memory, and then to scroll that around using javascript so that the viewport would only show the part of it around the user, that way you only have to update grid cells that have actually changed.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 201783491,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "fast game-like code in the browser",
            "submessages": [],
            "timestamp": 1592946573,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c2e6daeeef10adeec5a6cc456df206b8ee1c9758?x=x&version=2",
            "client": "website",
            "content": "<p>a game framework like phaser has primitives like tilemaps and cameras for 2d-tile games built in (e.g.  <a href=\"https://labs.phaser.io/index.html?dir=game%20objects/tilemap/&amp;q=\">https://labs.phaser.io/index.html?dir=game%20objects/tilemap/&amp;q=</a>), so I do wonder if using it would allow you to avoid reinventing some wheels. It might also make it easier to add other features, like animations.</p>\n<p>[EDIT: there's also the possiblity of a hybrid approach where you do the main \"game\" rendering in canvas but overlay UI elements using DOM, e.g. <a href=\"https://blog.pocketcitygame.com/5-reasons-to-use-dom-instead-of-canvas-for-ui-in-html5-games/\">https://blog.pocketcitygame.com/5-reasons-to-use-dom-instead-of-canvas-for-ui-in-html5-games/</a>. I went down this rabbit hole a month ago, from what I could tell it wasn't a good match for react but reasonable for a simpler dom management library.]</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 201788202,
            "is_me_message": false,
            "last_edit_timestamp": 1592949195,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "meitros@gmail.com",
            "sender_full_name": "Mihir Kedia (m6'19)",
            "sender_id": 241086,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "fast game-like code in the browser",
            "submessages": [],
            "timestamp": 1592948957,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/42eb8364884b6847ba9c7485ae5b47650e0e95fc?x=x&version=2",
            "client": "website",
            "content": "<p>If the perf issue is definitely client-side, I'd bet you can go pretty far with using browser profiling tools like the ones built into firefox and chrome to diagnose. My gut intuition is that you should be able to get good performance for this game with react-dom and some well-directed profiling. I took a brief shot at profiling the page performance while moving around, and noticed that some of the JS tasks (receiving a message, setting state, and reconciling) took up to 35ms, and the subsequent browser tasks (render, layout, and paint) took up to 24ms which could pull the frame rate down to ~16.5fps. I'm not experienced enough with browser performance to know whether this is typical or could be better, but I would have otherwise thought that it could be better? Maybe you've already been down this rabbit hole, but you could consider what can be done to control time spend re-rendering in JS (i.e. making use of shouldComponentUpdate/PureComponent to make sure react doesn't try to rerender components that don't otherwise need to be, debouncing other player actions to batch state updates on top of react's own batching, controlling the size and depth of the tree), and then also to look into what can be done on the DOM side of things (i.e. whether the DOM/CSS that the react tree translates to itself supports an efficient render/layout/repaint cycle). Again, definitely not an expert on the topic, but it's what jumps to mind!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 201791832,
            "is_me_message": false,
            "last_edit_timestamp": 1592951200,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "dfriedman58@gmail.com",
            "sender_full_name": "Daniel Friedman (he) (S1'18)",
            "sender_id": 116363,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "fast game-like code in the browser",
            "submessages": [],
            "timestamp": 1592951166,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>Thanks everyone!</p>\n<p><span class=\"user-mention\" data-user-id=\"101330\">@Wesley Aptekar-Cassels (they) (m5'19)</span> yeah, we're pretty confident it's the client rendering that's the problem based on profiling, and the fact that it's no different running in a local dev environment. We've experimented with the second approach you describe, but it's so far been much slower (we think because React has to do more virtual dom work). We might try this some more using something like <a href=\"https://github.com/bvaughn/react-window\">react-window</a> to \"load in\" the non-visible parts of the game world as you move.</p>\n<p><span class=\"user-mention\" data-user-id=\"241086\">@Mihir Kedia (m6'19)</span> wow, thank for the link to those phaser examples! I've looked at Phaser a little bit but it's so flexible I couldn't quickly find anything that looked similar enough to what we're going. Those are just right.</p>\n<p><span class=\"user-mention\" data-user-id=\"116363\">@Daniel Friedman (he) (S1'18)</span> The first two things you mention (PureComponent and batching state updates) are what we've tried so far, and they haven't made it fast enough\u00a0unfortunately :/ I also feel like it should be possible though!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 201792435,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "fast game-like code in the browser",
            "submessages": [],
            "timestamp": 1592951605,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/42eb8364884b6847ba9c7485ae5b47650e0e95fc?x=x&version=2",
            "client": "website",
            "content": "<p>Ah I see. Really speculating here based on dev tools, but another thing to consider (if you're still interested in salvaging the react-dom version) would be to render the static parts of the floor separately from the bits that might update; with no props or state it would never update. Then the dynamic bits like the players could be placed on top using z-index which I think would drastically cut down on the number of tiles needed to render on any given update if I'm understanding this correctly</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 201792978,
            "is_me_message": false,
            "last_edit_timestamp": 1592951876,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "dfriedman58@gmail.com",
            "sender_full_name": "Daniel Friedman (he) (S1'18)",
            "sender_id": 116363,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "fast game-like code in the browser",
            "submessages": [],
            "timestamp": 1592951845,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/68c07aa24ae39681409794daff1a921b08e5e324?x=x&version=2",
            "client": "website",
            "content": "<p>Yeah I was just thinking along those lines :) Definitely worth a try, thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 201793083,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "james@recurse.com",
            "sender_full_name": "James J. Porter (he) (S'13)",
            "sender_id": 2113,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "fast game-like code in the browser",
            "submessages": [],
            "timestamp": 1592951906,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/42eb8364884b6847ba9c7485ae5b47650e0e95fc?x=x&version=2",
            "client": "website",
            "content": "<p>For sure, sounds like fun challenge !</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 201793287,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "dfriedman58@gmail.com",
            "sender_full_name": "Daniel Friedman (he) (S1'18)",
            "sender_id": 116363,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "fast game-like code in the browser",
            "submessages": [],
            "timestamp": 1592952041,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f59b1bd52e790e176d04d3610ea3ada8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Right now when somebody hits WASD or an Arrow key, does the client wait until it gets an update from the server before it shows your avatar moved to the new position?  If so, one way to have it feel less laggy would be to make it so the player's position in the client is updated as soon as they hit a key, and then have it check the position against the position it receives from the server later to make sure it's consistent (e.x. someone drops a block that blocked your movement before your client was aware of that block's existence).</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 201794542,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "adeshar00@gmail.com",
            "sender_full_name": "Andrew Desharnais (he) (W1'20)",
            "sender_id": 8863,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "fast game-like code in the browser",
            "submessages": [],
            "timestamp": 1592952898,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f59b1bd52e790e176d04d3610ea3ada8?d=identicon&version=1",
            "client": "website",
            "content": "<p>On the rendering: yeah I'd use a canvas over what it's currently doing with a DOM element for each cell, a canvas can easily handle rendering a ~50x50 array of rectangles like that- the pixels in <a href=\"http://andrewdesharnais.com/graphics/ses4/colmodel.html\">this demo</a> are filled by calling fillRect on a canvas for each pixel, and the bit of latency in that demo when you move the dials is due more to other parts of my code than the repeated fillRect calls (and if I increase the size of the pixels and canvas, there's not a noticeably dip in performance).</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 201794929,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "adeshar00@gmail.com",
            "sender_full_name": "Andrew Desharnais (he) (W1'20)",
            "sender_id": 8863,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "fast game-like code in the browser",
            "submessages": [],
            "timestamp": 1592953164,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7219fef444d9242d5c96eb33bfe456c37a2df41c?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Welp, I drafted a response earlier but never hit send and now the conversation has progressed - some of the below is redundant!</p>\n<p>I'm pretty sure the issue here isn't explicitly physical DOM update related - it's the scripting itself and how you're using React (i.e. virtual DOM diffing inefficiencies). I haven't used React too extensively and it's been about a decade since I did much frontend work that really had performance constraints, so I might be a little off with my analysis.</p>\n<p>It seems you're not using Keys props for your divs. Really, when someone moves off screen it should be the case that you insert a new row/column in one direction and remove one in the other. Without keys, React is unable to recognize that most of the rows and columns are actually the same, and instead re-computes the entire DOM. This leads to a lot of computation as well as a bunch of unused objects that need to be cleaned up by GC. </p>\n<p>The fact that you can move in both X and Y directions will make one direction a bit less performant after you include keys properly; instead of removing just a parent element, a 'column removal' has to go into each of the rows and make a mutation. This should be ~ fine though! There is probably an even better update algorithm that would use a tree instead of a grid, or something clever with the rows and columns that move off screen so that those objects get reused and you don't have to GC them at any point.</p>\n<p>Since more users make things worse, I think there is a chance that some of the websocket updates are causing new computation to be queued up before the last one finishes (blocking the main thread's render cycle). Using keys should mitigate this problem, but you could also debounce the websocket updates. Keep and update each person's state be locally,  and submit to the server periodically; 100ms would be more than sufficient in my view! Since multiple people can occupy the same cells, you won't have any problems in terms of collisions/eventual consistency except in the case of blocks. You could always just 'bump' someone if they end up overlapping with a block.</p>\n<p>Next up, I'd think that the fact that you receive messages for every state change (even those out of viewport) will limit scalability here. I think you're optimizing it so that these updates don't cause a re-computation of DOM, but if not that should be a an easy thing to short-circuit. An alternate strategy, even more scalable strategy would be to only send websocket messages when the action is happening within viewport or a little bit beyond that. When someone moves to update their viewport, you could opportunistically fetch the state of the world just beyond their purview to make the experience smoother (i.e. nothing popping into existence after a delay). In most cases, messages about 'self' should be ignored (except the 'bump' case described above). </p>\n<p>The 'drift' of avatars is also likely to impact performance if there are enough people. I'm not sure how these are being computed; a quick check makes it seem like you might have each avatar owning its own setTimeout, each of which trigger some sort of computation and reflow (often staggered by .1ms). Having all of these timers laying around will increase the amount of garbage collection needed as well as just having substantial overhead in terms of the timing thread of the browser and in terms of computation on the main thread! You could optimize this so that it is a single global setInterval that random chooses to update a few avatars per cycle if this is the case. </p>\n<p>All of this things add up to javascript code often blocking the main thread so that thing are unresponsive. Once you implement these changes, I'd expect that performance would be acceptable for now.</p>\n<p>Some other optimizations off the top of my head: </p>\n<ul>\n<li>Borders are actually pretty expensive to compute. Since there is a fixed regular grid, you could remove the borders and just treat the gridlines as a separate layer. </li>\n<li>Setting width and height in 'style' might be slower than having it set via a class. </li>\n<li>Handling colors in cells via a child element is less optimal than having predefined classes and handling it with one element. </li>\n<li>You could split the avatars onto a separate 'layer' that is more frequently updated, leaving the more nested grid to only change when people are actively modifying blocks. Avatars would be globally positioned rather than belonging to some hierarchy, and you'd further avoid element removal/addition. </li>\n<li>You might be able to use a convex hull algorithm to treat things as a set of SVG blobs rather than individual cells. You could even give some ordering on colors s.t. these convex hulls are  larger. </li>\n<li>If the 'empty' state is treated as 'white' instead of empty, you could use this as a top layer 'mask' and go sofar as to make one element per tile color. Icon tiles could be treated as a separate layer. </li>\n</ul>\n<p>If there is some more complex calculation that you want to do later in development, you could offload all these computations to a webworker to make sure that the main thread is ONLY updating the UI. <a href=\"https://github.com/GoogleChromeLabs/comlink\">Comlink</a> makes this more enjoyable. </p>\n<p>Some of these optimizations are redundant with what you'd get for free using Canvas/WebGL based frameworks like Pixi/Phaser, so I'd consider moving that direction; it'll make things more future proof if the complexity of the world increases drastically (animations, textures). </p>\n<p>You could also go the raw canvas route using some of the techniques <span class=\"user-mention\" data-user-id=\"8863\">@Andrew Desharnais (SP1'16)</span> has suggested. You might squeeze even more performance out by having a function that computes the color at any given X Y coordinate and then using createImageData/putImageData. This is performant enough that you can use it to do <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Manipulating_video_using_canvas\">realtime chroma-keying for video</a>.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 201798792,
            "is_me_message": false,
            "last_edit_timestamp": 1592957101,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "johnurbanik@gmail.com",
            "sender_full_name": "John Urbanik (he) (S1'20)",
            "sender_id": 303322,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "fast game-like code in the browser",
            "submessages": [],
            "timestamp": 1592956489,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4c1c5789a9ec48818bbc90f3fdc324560d9a2021?x=x&version=2",
            "client": "website",
            "content": "<p>Ah, interesting <span class=\"user-mention\" data-user-id=\"241086\">@Mihir Kedia (m6'19)</span> -- I'm familiar with the Turbolinks approach but had not heard of Primer or anything like it. Seems like an elegant solution for a lot of javascript use cases!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202136637,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "logan.buckley@gmail.com",
            "sender_full_name": "Logan Buckley (S1'17)",
            "sender_id": 101096,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Webapps without Javascript",
            "submessages": [],
            "timestamp": 1593202083,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm struggling to come up with an elegant solution to what feels like an easy problem:</p>\n<p>I am trying to generate a string representation of a bit field. The bitfield represents a list of registers in a Motorola 68000 CPU. Here is a diagram of the bitfield:</p>\n<p><a href=\"/user_uploads/13/kbPT4J7Vm1RM_YfKON2gG5hR/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/kbPT4J7Vm1RM_YfKON2gG5hR/image.png\" title=\"image.png\"><img src=\"/user_uploads/13/kbPT4J7Vm1RM_YfKON2gG5hR/image.png\"></a></div><p>D0-D7 are data registers and A0-A7 are address registers. The string representation should be a list of all the set registers in the bitfield, separated by slashes (e.g. \"D0/D5/A1/A4\"), except that consecutive groups of set bits should be coalesced (e.g. \"D0-D3/D5/A2-A7\").</p>\n<p>My first pass was to create an array of bits (e.g. [0, 1, 1, 0, 0, 1, 0, ...]) where index corresponds to bit number, and then to create a list of runs (e.g. [[0], [1, 1], [0, 0], [1], [0], ...]) and go from there, but it felt inelegant, and I don't have an elegant solution for creating a list of runs either. After that, I'd still have to convert the runs into register names, and deal with the data address split (I don't want a range like \"D0-A7.\" That should be \"D0-D7/A0-A7\").</p>\n<p>Anyone have ideas for how to do this elegantly? I'd love it if there were a set of clean primitive operations that I could combine to get the result I want.</p>\n<p>If it would be easier to flip the bitfield around, that's fine. There are actually two different representations of the bit field, and I can pick either:</p>\n<p><a href=\"/user_uploads/13/2izFyAQHAoODqvEmS0t4vsjG/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/2izFyAQHAoODqvEmS0t4vsjG/image.png\" title=\"image.png\"><img src=\"/user_uploads/13/2izFyAQHAoODqvEmS0t4vsjG/image.png\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202575596,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "coalescing runs into ranges",
            "submessages": [],
            "timestamp": 1593613898,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/aa00aab2a15eb677ff74f7abf5e2519cdcef19da?x=x&version=2",
            "client": "website",
            "content": "<p>I don't have a solution fully-formed, but in some ways it reminds me of recursive solutions to bracket-pairing, e.g.: detecting if (, [, {, and/or &lt; are properly closed with &gt;, }, ], ).</p>\n<p>You could recursively accumulate runs, and when a run ends then see if the whole list is consumed or not, and if not then add a new list to the accumulator and check for another run</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202576524,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "b.toma.morris@gmail.com",
            "sender_full_name": "Toma Morris (they) (m5'20)",
            "sender_id": 314654,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "coalescing runs into ranges",
            "submessages": [],
            "timestamp": 1593614371,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/aa00aab2a15eb677ff74f7abf5e2519cdcef19da?x=x&version=2",
            "client": "website",
            "content": "<p>There could also be several different concepts of \"elegant\" here. Are you looking for code that is maximally readable, or as succinct as possible, or something else? I'm going to be hanging out in the Couches for a while if you want to talk about approaches</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202576904,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "b.toma.morris@gmail.com",
            "sender_full_name": "Toma Morris (they) (m5'20)",
            "sender_id": 314654,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "coalescing runs into ranges",
            "submessages": [],
            "timestamp": 1593614552,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Does it need to be a string for some reason? Maybe you want to use a bitmap compression algorithm, like EWAH. One nice aspect of EWAH compressed bitmaps is you can do bitwise math operations on pairs of compressed bitmasks, so no need to ever get the uncompressed representation for many use cases. <a href=\"https://github.com/lemire/EWAHBoolArray\">https://github.com/lemire/EWAHBoolArray</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202579459,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "coalescing runs into ranges",
            "submessages": [],
            "timestamp": 1593615746,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>This sounds roughly like run-length encoding.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202579511,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "coalescing runs into ranges",
            "submessages": [],
            "timestamp": 1593615767,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>you're trying to do compression of contiguous spans into a type*length pair</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202579621,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "coalescing runs into ranges",
            "submessages": [],
            "timestamp": 1593615814,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>and the span is rendered as type[last-span-end]-type[last-span-end + length]</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202579774,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "coalescing runs into ranges",
            "submessages": [],
            "timestamp": 1593615870,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>joined with '/'s</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202579822,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "coalescing runs into ranges",
            "submessages": [],
            "timestamp": 1593615890,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b050f1472b8bbcd2bf5b0d4e2f703d1c89c34983?x=x&version=6",
            "client": "website",
            "content": "<p>I don't know how well this will translate to your language of choice, but here's how I'd do it idiomatically in K:</p>\n<div class=\"codehilite\"><pre><span></span><code> b: 1 0 0 1 1 0 1 1 1 0 1   / start with some vector b\n\n 0&gt;&#39;:b                      / more-each-prior gives the start of each run of 1\n1 0 0 1 0 0 1 0 0 0 1\n\n &amp;0&gt;&#39;:b                     / where of more-each-prior gives indices of 1s in the above (starts of runs)\n0 3 6 10\n\n s:&amp;0&gt;&#39;:b                   / call this &#39;s&#39;\n\n s_b                        / cut b at indices given by s\n(1 0 0\n 1 1 0\n 1 1 1 0\n ,1)\n\n +/&#39;s_b                     / sum each sub-sequence; this counts the 1s in each run\n1 2 3 1\n\n s,&#39;+/&#39;s_b                  / zip the indices and lengths together.\n(0 1                        / the formatting at the end is straightforward,\n 3 2                        / but kinda bulky in comparison, so I&#39;ve omitted it here.\n 6 3\n 10 1)\n\n runs:{s,&#39;+/&#39;(s:&amp;0&gt;&#39;:x)_x}  / generalize\n\n runs 0 0 1 0 0 1\n(2 1\n 5 1)\n runs 1 0 0 1 1 0 0 1\n(0 1\n 3 2\n 7 1)\n</code></pre></div>\n\n\n<p>The \"each-prior\" adverb in K, <code>':</code>, is like a map over a sequence, but the body function is called with each element AND the prior element in the sequence. For example, using join (<code>,</code>) with each prior:</p>\n<div class=\"codehilite\"><pre><span></span><code>&quot;X&quot;,&#39;:&quot;ABCD&quot;\n(&quot;AX&quot;\n &quot;BA&quot;\n &quot;CB&quot;\n &quot;DC&quot;)\n</code></pre></div>\n\n\n<p>This also makes it clearer how each-prior uses a left argument (optionally) as a \"seed\" element to precede the first item in the sequence.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202582019,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "john@beyondloom.com",
            "sender_full_name": "John Earnest (he) (SP2'20)",
            "sender_id": 276205,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "coalescing runs into ranges",
            "submessages": [],
            "timestamp": 1593616843,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b050f1472b8bbcd2bf5b0d4e2f703d1c89c34983?x=x&version=6",
            "client": "website",
            "content": "<p>...does that make any sense whatsoever?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202582043,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "john@beyondloom.com",
            "sender_full_name": "John Earnest (he) (SP2'20)",
            "sender_id": 276205,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "coalescing runs into ranges",
            "submessages": [],
            "timestamp": 1593616853,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c4e6637707ff62601f3dd21ec7626095?d=identicon&version=1",
            "client": "website",
            "content": "<p>What programming language or environment are you working in here? For a low level optimization like this it might matter whether you're working in python or assembly, for example. In python it might make sense to start by zipping the bit string together with the names of the registers, so that instead of '011...' you have [('D0', 0), ('D1', 1), ('D2', 1), ...].</p>\n<p>I think finding the runs is a good intuition to start with, but it's not the content of the runs you want, but the start and end positions of all the runs of 1s. Also, since you don't want runs that cross the D/A boundary, it might be better to separate the bit string into two bit strings up front rather than trying to split runs that span the gap afterward.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202583362,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "daekharel@gmail.com",
            "sender_full_name": "Michael 'rntz' Arntzenius (he) (S2'20)",
            "sender_id": 5866,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "coalescing runs into ranges",
            "submessages": [],
            "timestamp": 1593617477,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b050f1472b8bbcd2bf5b0d4e2f703d1c89c34983?x=x&version=6",
            "client": "website",
            "content": "<p>ah, that raises a good point I glossed over: for the whole problem, runs begin whenever a bit is &gt; its predecessor OR the letter code is different from its predecessor:</p>\n<div class=\"codehilite\"><pre><span></span><code> b\n1 0 0 1 1 0 1 1 1 0 1\n 0&gt;&#39;:b\n1 0 0 1 0 0 1 0 0 0 1\n l\n&quot;AAAABBBBBBB&quot;\n ~&#39;:l\n0 1 1 1 0 1 1 1 1 1 1\n ~~&#39;:l\n1 0 0 0 1 0 0 0 0 0 0\n (~~&#39;:l)|0&gt;&#39;:b\n1 0 0 1 1 0 1 0 0 0 1\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202584408,
            "is_me_message": false,
            "last_edit_timestamp": 1593618157,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "john@beyondloom.com",
            "sender_full_name": "John Earnest (he) (SP2'20)",
            "sender_id": 276205,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "coalescing runs into ranges",
            "submessages": [],
            "timestamp": 1593618081,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>this is all super helpful! Thanks everyone. I'm going to read these more carefully after work this evening. A few notes and answers to questions:</p>\n<ul>\n<li><span class=\"user-mention\" data-user-id=\"314654\">@Toma Morris (they) (m5'20)</span> Ideally both maximally readable and as succinct as possible :). The former is more important than the latter. The code I most often find the clearest is code implemented in terms of other useful primitives.</li>\n<li><span class=\"user-mention\" data-user-id=\"221814\">@Nathan Goldbaum (he) (S1'19)</span> this is for a disassembler, so I unfortunately do need the string representation. It's the canonical text form for register lists.</li>\n<li><span class=\"user-mention\" data-user-id=\"255045\">@Ori Dean Bernstein (he) (W2'20)</span> it does sound like run-length encoding. That's a great connection.</li>\n<li><span class=\"user-mention\" data-user-id=\"276205\">@John Earnest (he) (SP2'20)</span> I'm excited to read your examples in greater detail. </li>\n<li><span class=\"user-mention\" data-user-id=\"5866\">@Michael Arntzenius (he) (S2'20)</span> it's written in Swift. I think you're probably right that it's a good idea to zip register names, and to split on the byte boundary.</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202587396,
            "is_me_message": false,
            "last_edit_timestamp": 1593619298,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "coalescing runs into ranges",
            "submessages": [],
            "timestamp": 1593619286,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah, another thing is that although this is for a disassembler, I'm writing an emulator, and I'm going to be using the code that decodes the instruction stream both for the disassembler and for the emulator (my plan is to use the disassembler as part of a step debugger)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202587767,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "coalescing runs into ranges",
            "submessages": [],
            "timestamp": 1593619460,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c4e6637707ff62601f3dd21ec7626095?d=identicon&version=1",
            "client": "website",
            "content": "<p>Heres some python that does just the run-indexing part of the problem:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">run_indices</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Finds the (start,end) indices of runs of ones in the string l.&quot;&quot;&quot;</span>\n    <span class=\"c1\"># Make a series of before/after pairs.</span>\n    <span class=\"n\">pears</span> <span class=\"o\">=</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"s1\">&#39;0&#39;</span><span class=\"o\">+</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"o\">+</span><span class=\"s1\">&#39;0&#39;</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Find the indices where we switch from zero to one or vice versa.</span>\n    <span class=\"n\">indices</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">pears</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">!=</span> <span class=\"n\">y</span><span class=\"p\">]</span>\n    <span class=\"c1\"># Chunk these into runs, and adjust the end of each run to be inclusively</span>\n    <span class=\"c1\"># rather than exclusively indexed.</span>\n    <span class=\"k\">return</span> <span class=\"p\">[(</span><span class=\"n\">indices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">indices</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">indices</span><span class=\"p\">),</span> <span class=\"mi\">2</span><span class=\"p\">)]</span>\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202589104,
            "is_me_message": false,
            "last_edit_timestamp": 1593620194,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "daekharel@gmail.com",
            "sender_full_name": "Michael 'rntz' Arntzenius (he) (S2'20)",
            "sender_id": 5866,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "coalescing runs into ranges",
            "submessages": [],
            "timestamp": 1593619982,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21b9cce736cbbe8e0761bbb33863c7d3112d0136?x=x&version=2",
            "client": "website",
            "content": "<p>I would use a run-length encoding algorithm to transform the bitfield into an array of <code>[start index of run, final index of run]</code>. Separately, I would keep an array which has the name of the registers, <code>[D0, D1, D2, ...]</code>. You can then use the array to easily convert the runs into ranges of registers.</p>\n<p>To handle the data address split, I would run the run-length encoding algorithm separately for each data address split. Then append the arrays together and feed that into the part that generates the final string.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202599550,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "michaelmalis2@gmail.com",
            "sender_full_name": "Michael Malis (SP2'19)",
            "sender_id": 8099,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "coalescing runs into ranges",
            "submessages": [],
            "timestamp": 1593625101,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ceb708929a4de3f96fd6d0f656889359b857964e?x=x&version=2",
            "client": "website",
            "content": "<p>Since you're operating on a bitvector of fixed size (16), we can use some bit magic to speed everything up...</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202603169,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ruijief@princeton.edu",
            "sender_full_name": "Ruijie Fang (he) (S1'20)",
            "sender_id": 301019,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "coalescing runs into ranges",
            "submessages": [],
            "timestamp": 1593626888,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ceb708929a4de3f96fd6d0f656889359b857964e?x=x&version=2",
            "client": "website",
            "content": "<div class=\"codehilite\"><pre><span></span><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\ntypedef unsigned int WORD;\n\n#define Amask 0xff00U // A registers\n#define Dmask 0x00ffU // B registers\n#define PRINT(i, p, s) printf(&quot;%c%u%c&quot;,p,i,s)\n\nstatic inline WORD lowest_one_idx(WORD x) {\n    WORD r = 0;\n    x &amp;= -x;  // isolate lowest bit\n    if ( x &amp; 0xffff0000U )\n      r += 16;\n    if ( x &amp; 0xff00ff00U )\n      r += 8;\n    if ( x &amp; 0xf0f0f0f0U )\n      r += 4;\n    if ( x &amp; 0xccccccccU )\n      r += 2;\n    if ( x &amp; 0xaaaaaaaaU )\n      r += 1;\n    return r;\n}\n\nstatic inline WORD lowest_zero_idx(WORD x) {\n  return lowest_one_idx(~x);\n}\n\nvoid print(WORD w, char p, char sep)\n{\n  WORD pos, idx = 0;\n  while (w != 0U) {\n    pos = lowest_one_idx(w);\n    idx += pos;\n    w &gt;&gt;= pos;\n    PRINT(idx, p, sep);\n    pos = lowest_zero_idx(w); idx += pos;\n    w &gt;&gt;= pos;\n  }\n  printf(&quot;\\n&quot;);\n}\n\nint main(void)\n{\n  // for example,\n  // A7 A6 A5 A4 A3 A2 A1 A0 D7 D6 D5 D4 D3 D2 D1 D0\n  // 1  1  0  0  1  0  1  0  1  1  1  0  1  1  0  0\n  WORD regs = 0b1100101011101100U;\n  WORD A = (regs &amp; Amask) &gt;&gt; 8, D = regs &amp; Dmask;\n  print(D, &#39;D&#39;, &#39;/&#39;);\n  print(A, &#39;A&#39;, &#39;/&#39;);\n  return 0;\n}\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202603182,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ruijief@princeton.edu",
            "sender_full_name": "Ruijie Fang (he) (S1'20)",
            "sender_id": 301019,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "coalescing runs into ranges",
            "submessages": [],
            "timestamp": 1593626895,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ceb708929a4de3f96fd6d0f656889359b857964e?x=x&version=2",
            "client": "website",
            "content": "<p>The idea is we can find successive runs in the <code>print</code> function by finding lowest one and zero indices, and then doing right shifts. For more optimization, we can unroll the loop completely using computed gotos, since it runs only 8 times at maximum.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202603381,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ruijief@princeton.edu",
            "sender_full_name": "Ruijie Fang (he) (S1'20)",
            "sender_id": 301019,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "coalescing runs into ranges",
            "submessages": [],
            "timestamp": 1593626988,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b4b9e2320f242abf40bf5391ee07269f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Here's my solution which uses a bitwise run-length encoding that returns data of the shape that <span class=\"user-mention\" data-user-id=\"8099\">@Michael Malis (SP2'19)</span> suggested. It's still not as short as I'd like it, so if anyone sees avenues for making it more concise, I'd love to hear them.</p>\n<p>Note for the reader: <code>OptionSet</code> is a Swift construct that allows bitfields to be treated like sets. It's not necessary for disassembling, but it will be useful for emulating later.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">private</span> <span class=\"kd\">func</span> <span class=\"nf\">rle</span><span class=\"p\">(</span><span class=\"kc\">_</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">UInt8</span><span class=\"p\">)</span> <span class=\"p\">-&gt;</span> <span class=\"p\">[[</span><span class=\"nb\">Int</span><span class=\"p\">]]</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nv\">res</span><span class=\"p\">:</span> <span class=\"p\">[[</span><span class=\"nb\">Int</span><span class=\"p\">]]</span> <span class=\"p\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"kd\">var</span> <span class=\"nv\">x0</span> <span class=\"p\">=</span> <span class=\"n\">x</span>\n    <span class=\"kd\">var</span> <span class=\"nv\">start</span> <span class=\"p\">=</span> <span class=\"mi\">0</span>\n    <span class=\"kd\">var</span> <span class=\"nv\">end</span> <span class=\"p\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">while</span> <span class=\"n\">x0</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"p\">{</span>\n        <span class=\"kd\">let</span> <span class=\"nv\">b</span> <span class=\"p\">=</span> <span class=\"n\">x0</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"p\">==</span> <span class=\"mi\">1</span> <span class=\"p\">{</span>\n            <span class=\"n\">end</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">start</span> <span class=\"o\">!=</span> <span class=\"n\">end</span> <span class=\"p\">{</span>\n            <span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n            <span class=\"n\">end</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"n\">start</span> <span class=\"p\">=</span> <span class=\"n\">end</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"n\">start</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"n\">end</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"p\">}</span>\n\n\n        <span class=\"n\">x0</span> <span class=\"p\">=</span> <span class=\"n\">x0</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// deal with a run at the end</span>\n    <span class=\"k\">if</span> <span class=\"n\">start</span> <span class=\"o\">!=</span> <span class=\"n\">end</span> <span class=\"p\">{</span>\n        <span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">res</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">struct</span> <span class=\"nc\">RegisterList</span><span class=\"p\">:</span> <span class=\"n\">OptionSet</span><span class=\"p\">,</span> <span class=\"n\">CustomStringConvertible</span> <span class=\"p\">{</span>\n    <span class=\"kd\">let</span> <span class=\"nv\">rawValue</span><span class=\"p\">:</span> <span class=\"nb\">UInt16</span>\n\n    <span class=\"kd\">static</span> <span class=\"kd\">let</span> <span class=\"nv\">d0</span> <span class=\"p\">=</span> <span class=\"n\">RegisterList</span><span class=\"p\">(</span><span class=\"n\">rawValue</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"kd\">static</span> <span class=\"kd\">let</span> <span class=\"nv\">d1</span> <span class=\"p\">=</span> <span class=\"n\">RegisterList</span><span class=\"p\">(</span><span class=\"n\">rawValue</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"kd\">static</span> <span class=\"kd\">let</span> <span class=\"nv\">d2</span> <span class=\"p\">=</span> <span class=\"n\">RegisterList</span><span class=\"p\">(</span><span class=\"n\">rawValue</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"kd\">static</span> <span class=\"kd\">let</span> <span class=\"nv\">d3</span> <span class=\"p\">=</span> <span class=\"n\">RegisterList</span><span class=\"p\">(</span><span class=\"n\">rawValue</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"kd\">static</span> <span class=\"kd\">let</span> <span class=\"nv\">d4</span> <span class=\"p\">=</span> <span class=\"n\">RegisterList</span><span class=\"p\">(</span><span class=\"n\">rawValue</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n    <span class=\"kd\">static</span> <span class=\"kd\">let</span> <span class=\"nv\">d5</span> <span class=\"p\">=</span> <span class=\"n\">RegisterList</span><span class=\"p\">(</span><span class=\"n\">rawValue</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n    <span class=\"kd\">static</span> <span class=\"kd\">let</span> <span class=\"nv\">d6</span> <span class=\"p\">=</span> <span class=\"n\">RegisterList</span><span class=\"p\">(</span><span class=\"n\">rawValue</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">6</span><span class=\"p\">)</span>\n    <span class=\"kd\">static</span> <span class=\"kd\">let</span> <span class=\"nv\">d7</span> <span class=\"p\">=</span> <span class=\"n\">RegisterList</span><span class=\"p\">(</span><span class=\"n\">rawValue</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">7</span><span class=\"p\">)</span>\n\n    <span class=\"kd\">static</span> <span class=\"kd\">let</span> <span class=\"nv\">a0</span> <span class=\"p\">=</span> <span class=\"n\">RegisterList</span><span class=\"p\">(</span><span class=\"n\">rawValue</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">8</span><span class=\"p\">)</span>\n    <span class=\"kd\">static</span> <span class=\"kd\">let</span> <span class=\"nv\">a1</span> <span class=\"p\">=</span> <span class=\"n\">RegisterList</span><span class=\"p\">(</span><span class=\"n\">rawValue</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">9</span><span class=\"p\">)</span>\n    <span class=\"kd\">static</span> <span class=\"kd\">let</span> <span class=\"nv\">a2</span> <span class=\"p\">=</span> <span class=\"n\">RegisterList</span><span class=\"p\">(</span><span class=\"n\">rawValue</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"kd\">static</span> <span class=\"kd\">let</span> <span class=\"nv\">a3</span> <span class=\"p\">=</span> <span class=\"n\">RegisterList</span><span class=\"p\">(</span><span class=\"n\">rawValue</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">11</span><span class=\"p\">)</span>\n    <span class=\"kd\">static</span> <span class=\"kd\">let</span> <span class=\"nv\">a4</span> <span class=\"p\">=</span> <span class=\"n\">RegisterList</span><span class=\"p\">(</span><span class=\"n\">rawValue</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">12</span><span class=\"p\">)</span>\n    <span class=\"kd\">static</span> <span class=\"kd\">let</span> <span class=\"nv\">a5</span> <span class=\"p\">=</span> <span class=\"n\">RegisterList</span><span class=\"p\">(</span><span class=\"n\">rawValue</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">13</span><span class=\"p\">)</span>\n    <span class=\"kd\">static</span> <span class=\"kd\">let</span> <span class=\"nv\">a6</span> <span class=\"p\">=</span> <span class=\"n\">RegisterList</span><span class=\"p\">(</span><span class=\"n\">rawValue</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">14</span><span class=\"p\">)</span>\n    <span class=\"kd\">static</span> <span class=\"kd\">let</span> <span class=\"nv\">a7</span> <span class=\"p\">=</span> <span class=\"n\">RegisterList</span><span class=\"p\">(</span><span class=\"n\">rawValue</span><span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">15</span><span class=\"p\">)</span>\n\n    <span class=\"kd\">var</span> <span class=\"nv\">description</span><span class=\"p\">:</span> <span class=\"nb\">String</span> <span class=\"p\">{</span>\n        <span class=\"kd\">let</span> <span class=\"nv\">dataRegs</span> <span class=\"p\">=</span> <span class=\"nb\">UInt8</span><span class=\"p\">(</span><span class=\"n\">rawValue</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0xff</span><span class=\"p\">)</span>\n        <span class=\"kd\">let</span> <span class=\"nv\">addrRegs</span> <span class=\"p\">=</span> <span class=\"nb\">UInt8</span><span class=\"p\">(</span><span class=\"n\">rawValue</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">8</span><span class=\"p\">)</span>\n\n        <span class=\"kd\">let</span> <span class=\"nv\">d</span> <span class=\"p\">=</span> <span class=\"n\">rle</span><span class=\"p\">(</span><span class=\"n\">dataRegs</span><span class=\"p\">).</span><span class=\"bp\">map</span> <span class=\"p\">{</span> <span class=\"n\">r</span> <span class=\"k\">in</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"p\">==</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"p\">?</span> <span class=\"s\">&quot;D</span><span class=\"si\">\\(</span><span class=\"n\">r</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"si\">)</span><span class=\"s\">&quot;</span> <span class=\"p\">:</span> <span class=\"s\">&quot;D</span><span class=\"si\">\\(</span><span class=\"n\">r</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"si\">)</span><span class=\"s\">-D</span><span class=\"si\">\\(</span><span class=\"n\">r</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"si\">)</span><span class=\"s\">&quot;</span><span class=\"p\">}.</span><span class=\"n\">joined</span><span class=\"p\">(</span><span class=\"n\">separator</span><span class=\"p\">:</span> <span class=\"s\">&quot;/&quot;</span><span class=\"p\">)</span>\n        <span class=\"kd\">let</span> <span class=\"nv\">a</span> <span class=\"p\">=</span> <span class=\"n\">rle</span><span class=\"p\">(</span><span class=\"n\">addrRegs</span><span class=\"p\">).</span><span class=\"bp\">map</span> <span class=\"p\">{</span> <span class=\"n\">r</span> <span class=\"k\">in</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"p\">==</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"p\">?</span> <span class=\"s\">&quot;A</span><span class=\"si\">\\(</span><span class=\"n\">r</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"si\">)</span><span class=\"s\">&quot;</span> <span class=\"p\">:</span> <span class=\"s\">&quot;A</span><span class=\"si\">\\(</span><span class=\"n\">r</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"si\">)</span><span class=\"s\">-A</span><span class=\"si\">\\(</span><span class=\"n\">r</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"si\">)</span><span class=\"s\">&quot;</span><span class=\"p\">}.</span><span class=\"n\">joined</span><span class=\"p\">(</span><span class=\"n\">separator</span><span class=\"p\">:</span> <span class=\"s\">&quot;/&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">d</span><span class=\"p\">.</span><span class=\"bp\">count</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">a</span><span class=\"p\">.</span><span class=\"bp\">count</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">d</span> <span class=\"o\">+</span> <span class=\"s\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">a</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">d</span><span class=\"p\">.</span><span class=\"bp\">count</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">d</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">a</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202688147,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "dave@recurse.com",
            "sender_full_name": "David Albert (he)",
            "sender_id": 810,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "coalescing runs into ranges",
            "submessages": [],
            "timestamp": 1593696679,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/afcff71a280c619fe7f45af5df2f66b9617479fc?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"810\">@David Albert (he)</span>  I'm not sure if I've fully understood the problem. Here's what it sounds like to me (in Clojure, try at <a href=\"https://repl.it\">https://repl.it</a>):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"c1\">;; constants</span>\n        <span class=\"nv\">address-field-width</span> <span class=\"mi\">8</span>\n        <span class=\"nv\">data-field-width</span> <span class=\"mi\">8</span>\n        <span class=\"c1\">;; setup the data</span>\n        <span class=\"nv\">make-names</span> <span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[</span><span class=\"nv\">register-type-label</span> <span class=\"nv\">num-bits</span><span class=\"p\">]</span>\n                     <span class=\"p\">(</span><span class=\"nf\">mapv</span> <span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[</span><span class=\"nv\">n</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nb\">str </span><span class=\"nv\">register-type-label</span> <span class=\"nv\">n</span><span class=\"p\">))</span>\n                           <span class=\"p\">(</span><span class=\"nb\">reverse </span><span class=\"p\">(</span><span class=\"nb\">range </span><span class=\"nv\">num-bits</span><span class=\"p\">))))</span>\n        <span class=\"nv\">address-labels</span> <span class=\"p\">(</span><span class=\"nf\">make-names</span> <span class=\"s\">&quot;A&quot;</span> <span class=\"nv\">address-field-width</span><span class=\"p\">)</span>\n        <span class=\"nv\">data-labels</span> <span class=\"p\">(</span><span class=\"nf\">make-names</span> <span class=\"s\">&quot;D&quot;</span> <span class=\"nv\">data-field-width</span><span class=\"p\">)</span>\n        <span class=\"nv\">bitfield</span> <span class=\"p\">(</span><span class=\"nb\">concat </span><span class=\"nv\">address-labels</span> <span class=\"nv\">data-labels</span><span class=\"p\">)</span>\n        <span class=\"c1\">;; generate bits</span>\n        <span class=\"nv\">rand-bits</span> <span class=\"p\">(</span><span class=\"nf\">vec</span> <span class=\"p\">(</span><span class=\"nf\">repeatedly</span> <span class=\"mi\">16</span> <span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[]</span> <span class=\"p\">(</span><span class=\"nf\">rand-nth</span> <span class=\"p\">[</span><span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"p\">]))))</span>\n        <span class=\"nv\">address-bits</span> <span class=\"p\">(</span><span class=\"nb\">take </span><span class=\"nv\">address-field-width</span> <span class=\"nv\">rand-bits</span><span class=\"p\">)</span>\n        <span class=\"nv\">data-bits</span> <span class=\"p\">(</span><span class=\"nb\">drop </span><span class=\"nv\">address-field-width</span> <span class=\"nv\">rand-bits</span><span class=\"p\">)</span>\n        <span class=\"c1\">;; core logic</span>\n        <span class=\"nv\">partition-bitfield</span> <span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[</span><span class=\"nv\">bit-labels</span> <span class=\"nv\">bit-vector</span><span class=\"p\">]</span>\n                             <span class=\"p\">(</span><span class=\"nf\">partition-by</span> <span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[[</span><span class=\"nv\">label</span> <span class=\"nv\">bit</span><span class=\"p\">]]</span> <span class=\"p\">(</span><span class=\"nb\">= </span><span class=\"nv\">bit</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n                                           <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">vector</span>\n                                                <span class=\"nv\">bit-labels</span>\n                                                <span class=\"nv\">bit-vector</span><span class=\"p\">)))]</span>\n    <span class=\"p\">(</span><span class=\"nf\">clojure.pprint/pprint</span> <span class=\"c1\">; just to make it not scrunch up in the REPL pane</span>\n     <span class=\"p\">{</span><span class=\"ss\">:bitfield</span> <span class=\"nv\">bitfield</span>\n      <span class=\"ss\">:rand-bits</span> <span class=\"nv\">rand-bits</span>\n      <span class=\"ss\">:partitioned-address-bits</span> <span class=\"p\">(</span><span class=\"nf\">partition-bitfield</span> <span class=\"nv\">address-labels</span>\n                                                    <span class=\"nv\">address-bits</span><span class=\"p\">)</span>\n      <span class=\"ss\">:partitioned-data-bits</span> <span class=\"p\">(</span><span class=\"nf\">partition-bitfield</span> <span class=\"nv\">data-labels</span>\n                                                 <span class=\"nv\">data-bits</span><span class=\"p\">)}))</span>\n</code></pre></div>\n\n\n<p>which evaluates to something like:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">{</span><span class=\"ss\">:bitfield</span>\n <span class=\"p\">(</span><span class=\"s\">&quot;A7&quot;</span>  <span class=\"s\">&quot;A6&quot;</span>  <span class=\"s\">&quot;A5&quot;</span>  <span class=\"s\">&quot;A4&quot;</span>  <span class=\"s\">&quot;A3&quot;</span>  <span class=\"s\">&quot;A2&quot;</span>  <span class=\"s\">&quot;A1&quot;</span>  <span class=\"s\">&quot;A0&quot;</span>  <span class=\"s\">&quot;D7&quot;</span>  <span class=\"s\">&quot;D6&quot;</span>  <span class=\"s\">&quot;D5&quot;</span>  <span class=\"s\">&quot;D4&quot;</span>  <span class=\"s\">&quot;D3&quot;</span>  <span class=\"s\">&quot;D2&quot;</span>  <span class=\"s\">&quot;D1&quot;</span>  <span class=\"s\">&quot;D0&quot;</span><span class=\"p\">)</span>,\n <span class=\"ss\">:rand-bits</span> <span class=\"p\">[</span><span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"p\">]</span>,\n <span class=\"ss\">:partitioned-address-bits</span>\n <span class=\"p\">(([</span><span class=\"s\">&quot;A7&quot;</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"s\">&quot;A6&quot;</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n  <span class=\"p\">([</span><span class=\"s\">&quot;A5&quot;</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"s\">&quot;A4&quot;</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"s\">&quot;A3&quot;</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"s\">&quot;A2&quot;</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"s\">&quot;A1&quot;</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n  <span class=\"p\">([</span><span class=\"s\">&quot;A0&quot;</span> <span class=\"mi\">0</span><span class=\"p\">]))</span>,\n <span class=\"ss\">:partitioned-data-bits</span>\n <span class=\"p\">(([</span><span class=\"s\">&quot;D7&quot;</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"s\">&quot;D6&quot;</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"s\">&quot;D5&quot;</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"s\">&quot;D4&quot;</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n  <span class=\"p\">([</span><span class=\"s\">&quot;D3&quot;</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n  <span class=\"p\">([</span><span class=\"s\">&quot;D2&quot;</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"s\">&quot;D1&quot;</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n  <span class=\"p\">([</span><span class=\"s\">&quot;D0&quot;</span> <span class=\"mi\">1</span><span class=\"p\">]))}</span>\n</code></pre></div>\n\n\n<p>Which partitioned bits are---I <em>think</em>---of the correct shape, which can then be formatted into the expected string representation.</p>\n<p>P.S. I used vectors to set up the bitfield/label data, as that would be your constraint too. Ordinarily, I'd set it up as a hash-map.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202822382,
            "is_me_message": false,
            "last_edit_timestamp": 1593795997,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "aditya.athalye@gmail.com",
            "sender_full_name": "Aditya Athalye (he) (SP1'20)",
            "sender_id": 263547,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "coalescing runs into ranges",
            "submessages": [],
            "timestamp": 1593795444,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>current, gleefully imperative, solution in python:</p>\n<div class=\"codehilite\"><pre><span></span><code>NBIT=16\nREGS=[\n    (&#39;D&#39;, 0), (&#39;D&#39;, 1), (&#39;D&#39;, 2), (&#39;D&#39;, 3),\n    (&#39;D&#39;, 4), (&#39;D&#39;, 5), (&#39;D&#39;, 6), (&#39;D&#39;, 7),\n    (&#39;A&#39;, 0), (&#39;A&#39;, 1), (&#39;A&#39;, 2), (&#39;A&#39;, 3),\n    (&#39;A&#39;, 4), (&#39;A&#39;, 5), (&#39;A&#39;, 6), (&#39;A&#39;, 7),\n    # To allow indexing over the inclusive range\n    (&#39;&#39;, -1)\n]\n\ndef run(val, lo, bit):\n    hi = lo\n    rc = REGS[lo][0]\n    for hi in range(lo, NBIT + 1):\n        if (val &gt;&gt; hi) &amp; 1 != bit or REGS[hi][0] != rc:\n            break\n    return hi\n\ndef regdesc(val):\n    lo = 0\n    sep = &#39;&#39;\n    desc = &#39;&#39;\n    while True:\n        print(&#39;lo: &#39;, lo)\n        lo = run(val, lo, 0)    # skip zero ranges\n        hi = run(val, lo, 1)    # find run of 1s\n        if lo == hi:\n            break\n        elif lo + 1 == hi:\n            desc = &#39;{}{}{}{}&#39;.format(desc, sep, *REGS[lo])\n        else:\n            desc = &#39;{}{}{}{}-{}{}&#39;.format(desc, sep, *REGS[lo], *REGS[hi-1])\n        sep = &#39;/&#39;\n        lo = hi\n    return desc\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202826642,
            "is_me_message": false,
            "last_edit_timestamp": 1593799353,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "coalescing runs into ranges",
            "submessages": [],
            "timestamp": 1593799337,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>Coded in Python before reading this thread: <a href=\"https://gist.github.com/darius/4733be9d85494708c7182708e763bf3f\">https://gist.github.com/darius/4733be9d85494708c7182708e763bf3f</a></p>\n<p>although <code>ranges</code> was a poor name for that function.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202829216,
            "is_me_message": false,
            "last_edit_timestamp": 1593802556,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "eha@posteo.de",
                        "full_name": "Eugene Ha (he) (S1'18)",
                        "id": 116366
                    },
                    "user_id": 116366
                }
            ],
            "recipient_id": 20203,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "coalescing runs into ranges",
            "submessages": [],
            "timestamp": 1593802125,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e622b23d56ce1dbfd935c38e071636c4a40935e8?x=x&version=2",
            "client": "website",
            "content": "<p>Here's another way to frame the problem, which is essentially the idea behind <span class=\"user-mention\" data-user-id=\"5866\">@Michael Arntzenius (he) (S2'20)</span>'s solution: <strong>Differentiate</strong> the bit field (in the sense of calculus).</p>\n<p>It might help to step away from code and think in terms of \"signals\" or \"graphs\" (the kind one studies in high school or calculus). Suppose the bit field looked like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>      _______   _____   _   ___\n_____/       \\_/     \\_/ \\_/\n0 0 0 1 1 1 1 0 1 1 1 0 1 0 1 1\n</code></pre></div>\n\n\n<p>Then its derivative is everywhere zero except at the places where the signal jumps up or down\u2014the slants:</p>\n<div class=\"codehilite\"><pre><span></span><code>_____|_______ _|_____ _|_ _|___\n             |       |   |\n</code></pre></div>\n\n\n<p>The jumps will occur in an up-down sequence (where the final down is implicit if the bit field ends in a 1). Tabulating where those happen (as <span class=\"user-mention\" data-user-id=\"5866\">@Michael Arntzenius (he) (S2'20)</span> did, for example) then gives the bit field ranges. Straightforward string manipulation translates these to register ranges (e.g., \"A1-A3/D2/...\").</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202910979,
            "is_me_message": false,
            "last_edit_timestamp": 1593938875,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "aditya.athalye@gmail.com",
                        "full_name": "Aditya Athalye (he) (SP1'20)",
                        "id": 263547
                    },
                    "user_id": 263547
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "daekharel@gmail.com",
                        "full_name": "Michael 'rntz' Arntzenius (he) (S2'20)",
                        "id": 5866
                    },
                    "user_id": 5866
                }
            ],
            "recipient_id": 20203,
            "sender_email": "eha@posteo.de",
            "sender_full_name": "Eugene Ha (he) (S1'18)",
            "sender_id": 116366,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "coalescing runs into ranges",
            "submessages": [],
            "timestamp": 1593936593,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>That was illuminating, <span class=\"user-mention\" data-user-id=\"116366\">@Eugene Ha (he) (S1'18)</span>, <span class=\"user-mention\" data-user-id=\"5866\">@Michael Arntzenius (he) (S2'20)</span> . I updated my gist that way. I'm still a little dissatisfied about the readability, but I'm not sure how to improve that except by adding comments, which feels like admitting defeat (even though I have nothing against comments in real life).</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202924181,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "coalescing runs into ranges",
            "submessages": [],
            "timestamp": 1593959970,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/afcff71a280c619fe7f45af5df2f66b9617479fc?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"116366\">@Eugene Ha (he) (S1'18)</span> Thanks for the insight! Does the following sound sane?</p>\n<p>On 2 bits, XOR would be the equivalent of differentiation, returning true for a discontinuity.</p>\n<p>So, if we lookahead one bit, then </p>\n<ul>\n<li>XOR(current, next) bit, will tell us if there's a discontinuity; i.e. the d/dx (but it won't tell us the direction, but direction doesn't matter here I guess)</li>\n<li>that combined with AND(current, next) bit will tell us which formatting to use<ul>\n<li>\"-\" between \"set\" bits, and \"/\" between any discontinuity or unset bits</li>\n</ul>\n</li>\n<li>a final cleanup pass can drop all the set bits labels between two set bits (convert A0-A1-A2-A3 -&gt; A0-A3)</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 202928898,
            "is_me_message": false,
            "last_edit_timestamp": 1593968053,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "eha@posteo.de",
                        "full_name": "Eugene Ha (he) (S1'18)",
                        "id": 116366
                    },
                    "user_id": 116366
                }
            ],
            "recipient_id": 20203,
            "sender_email": "aditya.athalye@gmail.com",
            "sender_full_name": "Aditya Athalye (he) (SP1'20)",
            "sender_id": 263547,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "coalescing runs into ranges",
            "submessages": [],
            "timestamp": 1593967862,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c4e6637707ff62601f3dd21ec7626095?d=identicon&version=1",
            "client": "website",
            "content": "<p>ah, this made me realize something rather trivial that I hadn't noticed before: XOR is the same as != (not equal to) on booleans/bits.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203023331,
            "is_me_message": false,
            "last_edit_timestamp": 1594059627,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "daekharel@gmail.com",
            "sender_full_name": "Michael 'rntz' Arntzenius (he) (S2'20)",
            "sender_id": 5866,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "coalescing runs into ranges",
            "submessages": [],
            "timestamp": 1594059602,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Riffing on <span class=\"user-mention\" data-user-id=\"255045\">@Ori Dean Bernstein (he) (W2'20)</span> 's </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">@import</span><span class=\"p\">(</span><span class=\"s\">&quot;std&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">printRuns</span><span class=\"p\">(</span><span class=\"n\">separator</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">[]</span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">prefix</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bits</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kr\">var</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"k\">and</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">bits</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"nb\">@intCast</span><span class=\"p\">(</span><span class=\"n\">u3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"k\">and</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">bits</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"nb\">@intCast</span><span class=\"p\">(</span><span class=\"n\">u3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">debug</span><span class=\"p\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"s\">&quot;{}{}{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"n\">separator</span><span class=\"p\">.</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">prefix</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">debug</span><span class=\"p\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"s\">&quot;{}{}{}-{}{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.{</span><span class=\"n\">separator</span><span class=\"p\">.</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">prefix</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">prefix</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">separator</span><span class=\"p\">.</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">&quot;/&quot;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"kr\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"n\">register</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">u16</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mb\">0b00101110</span><span class=\"n\">_10101101</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kr\">var</span><span class=\"w\"> </span><span class=\"n\">separator</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"kr\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">&quot;&quot;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">printRuns</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">separator</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;D&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">@bitCast</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">register</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">printRuns</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">separator</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;A&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">@bitCast</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">register</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"n\">debug</span><span class=\"p\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"s\">&quot;</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.{});</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code>jamie@machine:~$ zig run test.zig\nD0/D2-D3/D5/D7/A1-A3/A5\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203028450,
            "is_me_message": false,
            "last_edit_timestamp": 1594067564,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "coalescing runs into ranges",
            "submessages": [],
            "timestamp": 1594062375,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>Just for fun, this one uses the parsing DSL I wrote in my first batch here.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">parson</span> <span class=\"kn\">import</span> <span class=\"n\">Grammar</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">repr_register_bits</span><span class=\"p\">(</span><span class=\"n\">bits</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s1\">&#39;/&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">repr_bits</span><span class=\"p\">(</span><span class=\"s1\">&#39;D&#39;</span><span class=\"p\">,</span> <span class=\"n\">bits</span> <span class=\"o\">&amp;</span> <span class=\"mh\">0xFF</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">repr_bits</span><span class=\"p\">(</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"n\">bits</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">8</span><span class=\"p\">))</span>\n\n<span class=\"n\">bitstring_grammar</span> <span class=\"o\">=</span> <span class=\"n\">Grammar</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;[/0*/ :position (/11+/ :position :many | /1/ :one)]*&quot;</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">repr_bits</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"p\">,</span> <span class=\"n\">bits</span><span class=\"p\">):</span>\n    <span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">bitstring_grammar</span><span class=\"p\">(</span><span class=\"n\">many</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">:</span> <span class=\"s1\">&#39;</span><span class=\"si\">%s%d</span><span class=\"s1\">-</span><span class=\"si\">%s%d</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">label</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n                               <span class=\"n\">one</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"s1\">&#39;</span><span class=\"si\">%s%d</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">label</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">))</span>\n    <span class=\"n\">bitstring</span> <span class=\"o\">=</span> <span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">bits</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">)[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"c1\"># backwards so that string position = bit #</span>\n    <span class=\"k\">return</span> <span class=\"n\">parser</span><span class=\"p\">(</span><span class=\"n\">bitstring</span><span class=\"p\">)</span>\n\n<span class=\"c1\">## repr_register_bits(0x1221)</span>\n<span class=\"c1\">#. &#39;D0/D5/A1/A4&#39;</span>\n<span class=\"c1\">## repr_register_bits(0xfc2f)</span>\n<span class=\"c1\">#. &#39;D0-D3/D5/A2-A7&#39;</span>\n</code></pre></div>\n\n\n<p>Since the target is Swift maybe you could do something similar with regexes? I've only played with Swift a little.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203059438,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f40d",
                    "emoji_name": "snake",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "eha@posteo.de",
                        "full_name": "Eugene Ha (he) (S1'18)",
                        "id": 116366
                    },
                    "user_id": 116366
                }
            ],
            "recipient_id": 20203,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "coalescing runs into ranges",
            "submessages": [],
            "timestamp": 1594085448,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>I thought about masking and doing 8 bits at a time, but it felt a bit like cheating :P</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203063354,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "coalescing runs into ranges",
            "submessages": [],
            "timestamp": 1594091496,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've run into a problem that I think is a good fit for program synthesis techniques (basically, having a SMT solver generate an program for you given constraints and example input/outputs --- see <a href=\"https://www.cs.cornell.edu/~asampson/blog/minisynth.html\">this short blog post</a> for an intro).</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203528923,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "bit-twiddling program synthesis",
            "submessages": [],
            "timestamp": 1594398746,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>My problem comes from the keyboard that I'm building, where I need to run an interrupt (think \"callback\") whenever a key is pressed or released.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203528928,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "bit-twiddling program synthesis",
            "submessages": [],
            "timestamp": 1594398749,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>My microcontroller requires that a pin's interrupt polarity is specified in advance.<br>\nFor example, you can say \"pin 5 should sense low\" and the interrupt will fire when that pin's key is pressed and the voltage goes low.<br>\nHowever, the interrupt won't fire when key is released and the voltage goes back high.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203528936,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "bit-twiddling program synthesis",
            "submessages": [],
            "timestamp": 1594398754,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>So what I need to do is change the \"sense\" configuration within the interrupt, based on the voltage of the pin.<br>\nThe tricky part is that there are many pins but only one interrupt --- the interrupt doesn't know which pin(s) may have triggered it, so it needs to read the current state of all the pins and set the sense polarity accordingly.<br>\n(Ideally only changing the sense polarity for those pins that have actually changed.)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203528942,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "bit-twiddling program synthesis",
            "submessages": [],
            "timestamp": 1594398761,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Say we know all pins start low (0), so initially we set all of them to sense high (1) and then we wait.<br>\nThen at some point our interrupt fires and it reads the pins as, say, <code>0b0001_0010</code> (meaning pins 1 and 4 are high).<br>\nSo we need to write <code>pin_config[1].sense = 0</code> and <code>pin_config[4].sense = 0</code> so that the interrupt will fire again one when of those pins goes low.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203528949,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "bit-twiddling program synthesis",
            "submessages": [],
            "timestamp": 1594398766,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Would this be a reasonable thing to try with program synthesis?<br>\nOr should I just try to write it out with bitshifts and stuff myself and then look at what the compiler comes up with?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203528967,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "bit-twiddling program synthesis",
            "submessages": [],
            "timestamp": 1594398783,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Pinging <span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (he) (F1'16)</span> and <span class=\"user-mention\" data-user-id=\"9097\">@Joe Ardent (he) (SP1'17)</span> since y'all have discussed program synthesis stuff before and may be interested in pairing (or know enough to tell me I'm barking up the wrong tree =P)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203529128,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "bit-twiddling program synthesis",
            "submessages": [],
            "timestamp": 1594398854,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>Wow this sounds super cool! I'm only a dabbler and I wouldn't know where to start, but it does seem like this would be a good application of program synthesis.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203530230,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "bit-twiddling program synthesis",
            "submessages": [],
            "timestamp": 1594399444,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>IIRC there's a blog post where someone used it to come up with different bitmasks, which might be relevant to what you're trying to do, but I can't find a link right now</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203530386,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "bit-twiddling program synthesis",
            "submessages": [],
            "timestamp": 1594399523,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think it was <a href=\"https://weinholt.se/articles/design-low-tagging-z3py/\">https://weinholt.se/articles/design-low-tagging-z3py/</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203530786,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "bit-twiddling program synthesis",
            "submessages": [],
            "timestamp": 1594399644,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Cool thanks V! I'll check out the post.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203575049,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "bit-twiddling program synthesis",
            "submessages": [],
            "timestamp": 1594432657,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I also found this amazing blog post which describes how \"component-based\" program synthesis works by taking advantage of SMT solvers's abilities to find counterexamples: <a href=\"https://fitzgeraldnick.com/2020/01/13/synthesizing-loop-free-programs.html\">https://fitzgeraldnick.com/2020/01/13/synthesizing-loop-free-programs.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203588347,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "bit-twiddling program synthesis",
            "submessages": [],
            "timestamp": 1594458956,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>They walk through the example of generating the shortest program to find the rightmost zero in a bitvec:</p>\n<div class=\"codehilite\"><pre><span></span><code>              ,--- The rightmost zero bit.\n              |\n              V\nInput:  011010011\n\nOutput: 000000100\n              ^\n              |\n              &#39;--- Only that bit is set.\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203588392,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "bit-twiddling program synthesis",
            "submessages": [],
            "timestamp": 1594459019,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3514240cecd66b31ef3b3a4a7ea235cc?d=identicon&version=1",
            "client": "website",
            "content": "<p>hey folks, i'm working on a search project with a friend that involves making programmatic search queries. we were wondering: do folks know of any way to make high-quality programmatic search queries for a user (ideally, client-side) without paying some company a ton of money for access to a search API? any suggestions would be deeply appreciated!</p>\n<p>here are some options we thought of:</p>\n<ol>\n<li>we pay for a search API like SerpAPI or Bing API and use it server-side (which costs us a good amount of money) but then convince the user to cover some of the costs (e.g. via ads, donations, grants)</li>\n<li>instead of paying for an API, we have our server make search queries behind the scenes in a headless browser or using some search engine library (like <a href=\"http://searx.me\">searx.me</a>), then we scrape and parse the results. (then we have to be careful about not getting banned, dealing with captchas, etc.)</li>\n<li>we get the user to install our software on their machine, and have their machine make search queries behind the scenes in a headless browser or using some search engine library, and then scrape + present the results client-side</li>\n</ol>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203601791,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "katherine.ye@gmail.com",
            "sender_full_name": "Katherine Ye (S'13)",
            "sender_id": 2117,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "how to make search queries?",
            "submessages": [],
            "timestamp": 1594482329,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>What are you searching? Does indexing things yourself and using a library like Lucene help?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203601929,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "how to make search queries?",
            "submessages": [],
            "timestamp": 1594482516,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>)it sounds like you want arbitrary web search, so the answer is probably 'no', but I figured I should double check.)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203601958,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "how to make search queries?",
            "submessages": [],
            "timestamp": 1594482584,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/aa00aab2a15eb677ff74f7abf5e2519cdcef19da?x=x&version=2",
            "client": "website",
            "content": "<p>Depending on what you're trying to accomplish for the users, you could also make a tool that requires them to supply the API access. So the user would pay for the search API service and then your app would have something like \"Add your API token\", and if no token is supplied pop up an error</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203602851,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "b.toma.morris@gmail.com",
            "sender_full_name": "Toma Morris (they) (m5'20)",
            "sender_id": 314654,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "how to make search queries?",
            "submessages": [],
            "timestamp": 1594483790,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/aa00aab2a15eb677ff74f7abf5e2519cdcef19da?x=x&version=2",
            "client": "website",
            "content": "<p>This doesn't change the fact that the cost is being paid for the API access, but it changes who is responsible for paying it</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203602913,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "b.toma.morris@gmail.com",
            "sender_full_name": "Toma Morris (they) (m5'20)",
            "sender_id": 314654,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "how to make search queries?",
            "submessages": [],
            "timestamp": 1594483846,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/aa00aab2a15eb677ff74f7abf5e2519cdcef19da?x=x&version=2",
            "client": "website",
            "content": "<p>Another avenue: It's easier to find a free API around a specific topic or domain, such as news streams. You could make an app that uses several of those to get closer to a completely arbitrary web search. This will have a very different feel from Google/Yahoo/Bing, but also depends on what you want to enable</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203602998,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "b.toma.morris@gmail.com",
            "sender_full_name": "Toma Morris (they) (m5'20)",
            "sender_id": 314654,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "how to make search queries?",
            "submessages": [],
            "timestamp": 1594483990,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/aa00aab2a15eb677ff74f7abf5e2519cdcef19da?x=x&version=2",
            "client": "website",
            "content": "<p>For reference, this is roughly what DuckDuckGo does: <a href=\"https://help.duckduckgo.com/results/sources/\">https://help.duckduckgo.com/results/sources/</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203603456,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "b.toma.morris@gmail.com",
            "sender_full_name": "Toma Morris (they) (m5'20)",
            "sender_id": 314654,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "how to make search queries?",
            "submessages": [],
            "timestamp": 1594484717,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/aa00aab2a15eb677ff74f7abf5e2519cdcef19da?x=x&version=2",
            "client": "website",
            "content": "<p>Though they do have their own crawler as one of their sources</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203603512,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "b.toma.morris@gmail.com",
            "sender_full_name": "Toma Morris (they) (m5'20)",
            "sender_id": 314654,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "how to make search queries?",
            "submessages": [],
            "timestamp": 1594484773,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3514240cecd66b31ef3b3a4a7ea235cc?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"255045\">@Ori Dean Bernstein (he) (W2'20)</span> yep, we'd like to have something (as close as possible) to arbitrary web search, though we're open to more limited domains if folks know of generally-interesting domains with good APIs</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203611502,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "katherine.ye@gmail.com",
            "sender_full_name": "Katherine Ye (S'13)",
            "sender_id": 2117,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "how to make search queries?",
            "submessages": [],
            "timestamp": 1594498362,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3514240cecd66b31ef3b3a4a7ea235cc?d=identicon&version=1",
            "client": "website",
            "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"314654\">@Toma Morris (they) (m5'20)</span>, that's a good point for news streams</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203611674,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "katherine.ye@gmail.com",
            "sender_full_name": "Katherine Ye (S'13)",
            "sender_id": 2117,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "how to make search queries?",
            "submessages": [],
            "timestamp": 1594498626,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3514240cecd66b31ef3b3a4a7ea235cc?d=identicon&version=1",
            "client": "website",
            "content": "<p>and for the API key</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203611719,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "katherine.ye@gmail.com",
            "sender_full_name": "Katherine Ye (S'13)",
            "sender_id": 2117,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "how to make search queries?",
            "submessages": [],
            "timestamp": 1594498683,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/570b5294859a4650f5c6c4f866b6fba3e34af02b?x=x&version=2",
            "client": "website",
            "content": "<p>Oh Nick <a href=\"https://youtu.be/MTQ0fv4a-u8?t=10619\">talked about this</a> at bang bang con west this year!</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"MTQ0fv4a-u8\" href=\"https://youtu.be/MTQ0fv4a-u8?t=10619\"><img src=\"https://i.ytimg.com/vi/MTQ0fv4a-u8/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203616715,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "tobinyehle@gmail.com",
            "sender_full_name": "Tobin Yehle (he) (SP1'20)",
            "sender_id": 105607,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "bit-twiddling program synthesis",
            "submessages": [],
            "timestamp": 1594507277,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>this is really cool, but I have no experience at all in this domain!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203626262,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "bit-twiddling program synthesis",
            "submessages": [],
            "timestamp": 1594526146,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5c76b2c555785c8a87577bc81fe538bc03a8b463?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"314654\">@Toma Morris (they) (m5'20)</span> thanks for sharing that link! Very interesting. I kind of want to try making my own small search engine now...</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203649700,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "c@chirag.io",
            "sender_full_name": "Chirag Dav\u00e9 (he) (F1'19)",
            "sender_id": 234049,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "how to make search queries?",
            "submessages": [],
            "timestamp": 1594570384,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/aa00aab2a15eb677ff74f7abf5e2519cdcef19da?x=x&version=2",
            "client": "website",
            "content": "<p>Welcome! I poked around at this a while back and decided it was a yak that I didn't want to shave, but I could imagine it being fun at the right moment</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203663412,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "9100",
                    "emoji_name": "yak",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "c@chirag.io",
                        "full_name": "Chirag Dav\u00e9 (he) (F1'19)",
                        "id": 234049
                    },
                    "user_id": 234049
                }
            ],
            "recipient_id": 20203,
            "sender_email": "b.toma.morris@gmail.com",
            "sender_full_name": "Toma Morris (they) (m5'20)",
            "sender_id": 314654,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "how to make search queries?",
            "submessages": [],
            "timestamp": 1594591642,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c4e6637707ff62601f3dd21ec7626095?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hi! So I run a sunday paper reading group (not RC specific, but RCers welcome!), and this week we're taking a look at hash life, an algorithm that memoizes time and space in order to run Conway's Game of Life at ridiculous speeds: <a href=\"http://www.rntz.net/files/hashlife.pdf\">http://www.rntz.net/files/hashlife.pdf</a>. The paper is only six pages long, and the algorithm is small but tricky, so my goal for this week is to implement it in time for the paper group meeting on sunday. So:</p>\n<ul>\n<li>\n<p>If you want to pair with me sometime later this week on implementing hash life, DM me!</p>\n</li>\n<li>\n<p>If you want to have a try at implementing hash life yourself, have at! it would be cool to compare implementations once the week is over. </p>\n</li>\n<li>\n<p>If you want to join the reading group, either to show off your hash life implementation or because you like reading and discussing cs papers, then DM me and/or take a look at <a href=\"https://docs.google.com/document/d/1_8fiOiYj7sWMtsrwkSk02n0DSOlf_Dw4t3t-7OL1ksY/edit?usp=sharing\">https://docs.google.com/document/d/1_8fiOiYj7sWMtsrwkSk02n0DSOlf_Dw4t3t-7OL1ksY/edit?usp=sharing</a>. We meet on Sundays at 2pm Eastern = 11am Pacific = 7pm UK time = 8pm CE(S)T = 11.30pm IST.</p>\n</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203705329,
            "is_me_message": false,
            "last_edit_timestamp": 1594645180,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "yurivish@gmail.com",
                        "full_name": "Yuri Vishnevsky (SP2'18)",
                        "id": 111923
                    },
                    "user_id": 111923
                },
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "unnati97@gmail.com",
                        "full_name": "Unnati Niraj Patel (she) (S2'20)",
                        "id": 277193
                    },
                    "user_id": 277193
                }
            ],
            "recipient_id": 20203,
            "sender_email": "daekharel@gmail.com",
            "sender_full_name": "Michael 'rntz' Arntzenius (he) (S2'20)",
            "sender_id": 5866,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "hash life",
            "submessages": [],
            "timestamp": 1594641244,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/620d0eb7fcb87b272b387cf33e4ed314?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I've been working on a boardgame called <a href=\"https://github.com/captn3m0/okiya/\">Okiya</a>, and the current way I encode the game state is fairly naive (array of 16 pieces). As I'm attempting reinforcement learning algorithms, I'm realizing that having a minimal state-encoding would be very beneficial (so as to reduce the number of duplicate episodes). The initial game state is a sequence of 16 unique tokens, but due to rotational symmetry, and state-equivalence  - the actual number of possible states is far lesser (than the naive <code>16!</code> that my array implementation gives).</p>\n<p>I've been considering 2 approaches: 1. Figure out a way to \"canonicalize\" a game state, so that all equivalent game states collapse to one state, so the agent never sees the equivalent states. For eg, rotate the game to keep the board in a certain way (depending on the pieces). Or (2) Figure out a way to encode state-equivalence in the game state. So my state encoding itself is rotation-independent, for eg.</p>\n<p>I can't seem to find any good reading material on either approaches. Most RL stuff I read side-step state encoding entirely. Anyone has suggestions?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203713823,
            "is_me_message": false,
            "last_edit_timestamp": 1594646691,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "me@captnemo.in",
            "sender_full_name": "Nemo (he) (S1'20)",
            "sender_id": 301256,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "game-state-encoding",
            "submessages": [],
            "timestamp": 1594646630,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"105607\">@Tobin Yehle (he) (SP1'20)</span> You're a hero for linking to the exact time in the video = )</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203728339,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "bit-twiddling program synthesis",
            "submessages": [],
            "timestamp": 1594653615,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>In case anyone is interested, I wrote up on the rust user forum some more background on how I got to this problem: <a href=\"https://users.rust-lang.org/t/generating-constants-and-optimized-code-at-compile-time/45769\">https://users.rust-lang.org/t/generating-constants-and-optimized-code-at-compile-time/45769</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203728683,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "bit-twiddling program synthesis",
            "submessages": [],
            "timestamp": 1594653685,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>A big TBD for me is how to incorporate program synthesis into my actual toolchain (e.g., call something from <code>build.rs</code> and then spit out optimized things that I <code>include!()</code> from my handwritten source files?)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203728734,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "bit-twiddling program synthesis",
            "submessages": [],
            "timestamp": 1594653711,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee5ef8c4705125cfdc43e7d1569c684c58cb518b?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>If you're interested in going to the logical conclusion of the turbolinks/primer route, I've been writing a ton of  <a href=\"https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html\">Phoenix LiveView</a> over the past couple months. This is part of the Phoenix web framework for the Elixir language.</p>\n<p>The core idea is that each client gets a thread that stores state and a websocket to communicate with the server. You write server-rendered templates and logic to update the state in response to events. Then LiveView takes care of tracking changes in the clients state, re-rendering any changes, and sending updates down the websocket.</p>\n<p>A live counter would look something like this</p>\n<p>template</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"x\">Count: </span><span class=\"cp\">&lt;%=</span> <span class=\"vi\">@count</span> <span class=\"cp\">%&gt;</span><span class=\"x\"></span>\n<span class=\"x\">&lt;button phx-click=&quot;inc-count&quot;&gt;Increment&lt;/button&gt;</span>\n</code></pre></div>\n\n\n<p>handler (this is serverside code!)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">handle_event</span><span class=\"p\">(</span><span class=\"s2\">&quot;inc-count&quot;</span><span class=\"p\">,</span> <span class=\"bp\">_</span><span class=\"p\">,</span> <span class=\"n\">socket</span><span class=\"p\">)</span> <span class=\"k\">do</span>\n    <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">assigns</span><span class=\"o\">.</span><span class=\"n\">counter</span> <span class=\"c1\"># current counter value</span>\n    <span class=\"n\">socket</span> <span class=\"o\">=</span> <span class=\"n\">assign</span><span class=\"p\">(</span><span class=\"n\">socket</span><span class=\"p\">,</span> <span class=\"ss\">counter</span><span class=\"p\">:</span> <span class=\"n\">c</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\"># set the counter value to be incremented</span>\n    <span class=\"p\">{</span><span class=\"ss\">:noreply</span><span class=\"p\">,</span> <span class=\"n\">socket</span><span class=\"p\">}</span> <span class=\"c1\"># the handler returns the socket with any assignment changes</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n\n\n<p>So there is javascript here, but it's all in the LiveView client library, you're not writing any nor are you writing anything that will compile to javascript.</p>\n<p>(plug: I'm going to give a workshop on it this Thursday in virtual RC: <a href=\"#narrow/stream/19042-397-Bridge/topic/Elixir.2FLiveView.20Workshop.20%28build.20virtual-rc2.20without.20js!%29/near/203753986\">https://recurse.zulipchat.com/#narrow/stream/19042-397-Bridge/topic/Elixir.2FLiveView.20Workshop.20%28build.20virtual-rc2.20without.20js!%29/near/203753986</a>)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203783395,
            "is_me_message": false,
            "last_edit_timestamp": 1594682805,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "maxim@ontoillogical.com",
            "sender_full_name": "Max Veytsman (he) (S1'20)",
            "sender_id": 5875,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Webapps without Javascript",
            "submessages": [],
            "timestamp": 1594682662,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2d41e7def3ee97a7bd5612e7fe2f604?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"2172\">@Kevin Lynagh (he)</span> that's my preferred method for incorporating generated code in Rust now.  As part of a work project I built and have been maintaining a custom code generator that takes in a JSON description of messages for a protocol and spits out a set of types and useful trait implementations for those types. I originally wrote it as a procedural macro, and then I changed it to use <code>build.rs</code>/<code>include!</code> because I can then more easily format that generated code using <code>rustfmt</code> in the build script and if I need to inspect the output there are lines. Also while developing the code gen, errors in the generated code have line numbers instead of just column numbers.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203793364,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "earthlingzephyr@gmail.com",
            "sender_full_name": "Zephyr Shannon (they) (F2'14)",
            "sender_id": 6687,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "bit-twiddling program synthesis",
            "submessages": [],
            "timestamp": 1594693893,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2d41e7def3ee97a7bd5612e7fe2f604?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Proc macros are great for simple cases, but significant code-gen that may need to be inspected is better done with <code>build.rs</code>/<code>include!</code>.  The good news is that it was almost trivial to switch between the two approaches, since all I had to do was add a wrapper type to invoke the macro function as a function and print it to a file.  Also, for reference on the exact details of how that needs to happen, I just copied what the <a href=\"https://rust-lang.github.io/rust-bindgen/tutorial-3.html\">bindgen tutorial</a> does.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203793539,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "earthlingzephyr@gmail.com",
            "sender_full_name": "Zephyr Shannon (they) (F2'14)",
            "sender_id": 6687,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "bit-twiddling program synthesis",
            "submessages": [],
            "timestamp": 1594694110,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Cool, thanks <span class=\"user-mention\" data-user-id=\"6687\">@Zephyr Shannon (they) (F2'14)</span> it's good to hear your experience on this and that I'm not barking up the totally wrong tree = ) Being able to get errors with line numbers sounds very important and wasn't something I'd thought about!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203794682,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "bit-twiddling program synthesis",
            "submessages": [],
            "timestamp": 1594695791,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c52df4d54166ed7db0141bdb21c7935e502d6ddc?x=x&version=1",
            "client": "website",
            "content": "<p>I've taken the rotate/flip approach before, I think for tic-tac-toe and checkers. To pick the canonical form you could just find the minimum when reinterpreted as a bit string. I don't remember how big a difference this made. Probably this could be optimized -- I just took the most obvious approach of generating all 8 rotates/flips.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203983482,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "darius@wry.me",
            "sender_full_name": "Darius Bacon (W1'16)",
            "sender_id": 902,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "game-state-encoding",
            "submessages": [],
            "timestamp": 1594832785,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/620d0eb7fcb87b272b387cf33e4ed314?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>not looking at optmizing too much, and the minimum bit string sounds like a decent idea, thanks.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 203991318,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "me@captnemo.in",
            "sender_full_name": "Nemo (he) (S1'20)",
            "sender_id": 301256,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "game-state-encoding",
            "submessages": [],
            "timestamp": 1594836454,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/200183991cd15d8c08fc2f29cc78fa65e7b2f5ae?x=x&version=4",
            "client": "website",
            "content": "<p>does anyone here have experience with dart and/or flutter? I've been trying it out over the last couple days and have a couple questions about it</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204355889,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "sory.rawyer@gmail.com",
            "sender_full_name": "Rory Sawyer (he) (SP2'18)",
            "sender_id": 111920,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "dart/flutter",
            "submessages": [],
            "timestamp": 1595172447,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1d9cae1f0cbcb78efb0fbd9650fbccb2?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>This is interesting to hear about how other companies do this! I agree it's weird and difficult because things like ownership and interfaces are problems for teams of this size.</p>\n<p>At LiveRamp, we split in a way that looks like Asana's too. We were about 1000 employees, 200 engineers, and 20-30 on infrastructure. Our split and naming were into a DevOps Infra team, a Fullstack Infra team, and Big Data Infra team.</p>\n<p>The Fullstack team owned modernization of our primary web platform, frontend routing infra, authentication and authorization infra, and eventually adopted ownership of API platform infra.</p>\n<p>On these teams, I think we struggled with staffing and project ownership in the cases where there wasn't a clear product owner vision. These teams can appear as catch-all teams for projects that don't have ownership or funding. Our Fullstack team owned our primary webapp</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204621285,
            "is_me_message": false,
            "last_edit_timestamp": 1595395783,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "julianvmodesto@gmail.com",
            "sender_full_name": "Julian Modesto (he) (m3'20)",
            "sender_id": 276201,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Product infrastructure teams",
            "submessages": [],
            "timestamp": 1595380234,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1d9cae1f0cbcb78efb0fbd9650fbccb2?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 204621443,
            "is_me_message": false,
            "last_edit_timestamp": 1595395787,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "julianvmodesto@gmail.com",
            "sender_full_name": "Julian Modesto (he) (m3'20)",
            "sender_id": 276201,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Product infrastructure teams",
            "submessages": [],
            "timestamp": 1595380407,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/cc554841369c2f30d7cd8a76084a5c36?d=identicon&version=1",
            "client": "website",
            "content": "<p>So I'm relatively new, and I just realized that I don't understand the difference between the command prompt and the powershell in windows. Or if they are even different... or even what they actually are? I started thinking about this because I've been learning about webpack, node.js, babel, and some other javascript things that are installed via the terminal in VS Code. And I realized I don't know what's actually running code when I type <code>npm install</code> or whatever. In fact, is the terminal in VS Code actually just the powershell program in windows? Like so many things I've been learning about, I'm not even sure what questions to ask. What are the command prompt and the powershell? What's the difference between them, and is the terminal in VS Code the same thing?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205185363,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "evanconwaymusic@gmail.com",
            "sender_full_name": "Evan Conway (he) (S2'20)",
            "sender_id": 314681,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Command Prompt vs Powershell",
            "submessages": [],
            "timestamp": 1595896872,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/097edbae0d41f8a5149c6ada6fd5c4941e572159?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Woo where to begin! Like you said there's so much to learn here. Let me start with some hopefully straightforward answers.</p>\n<p>PowerShell is a system shell, a program you use to interact textually with the system. It operates mostly on streams of text and on .NET objects - it is written using the .NET framework and provides a native textual interface to that ecosystem.</p>\n<p>The Windows Command Prompt, also known as cmd.exe, is another system shell. It has a history that goes back to Windows roots as a graphical front-end to DOS. It doesn't have as many features as PowerShell, isn't as easy to extend, and doesn't integrate natively with the .NET ecosystem.</p>\n<p>Other system shells you may commonly hear about include Bash and Zsh. Bash has long been the default shell for macOS and many GNU/Linux systems. Zsh has some innovative features and was recently made the default shell on the newest version of macOS, so it's gaining a lot of new users. These shells can be installed on Windows, too.</p>\n<p>VSCode has a terminal emulator system that can talk to any of these shells, so you can try any of them and change your mind as often as you like. (There's a section of the VSCode documentation dedicated to describing how to switch to whichever shell you want: <a href=\"https://code.visualstudio.com/docs/editor/integrated-terminal#_windows\">https://code.visualstudio.com/docs/editor/integrated-terminal#_windows</a>)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205186042,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "rprior@protonmail.com",
            "sender_full_name": "Ryan Prior (he) (F1'19)",
            "sender_id": 234256,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Command Prompt vs Powershell",
            "submessages": [],
            "timestamp": 1595897643,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/097edbae0d41f8a5149c6ada6fd5c4941e572159?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>When you run <code>npm install</code>, your system shell looks in a predefined list of directories (called your \"execution path\" or just \"path\" for short; often styled in all caps as PATH) for a program called <code>npm</code> (or <code>npm.exe</code> on Windows) and starts running that program. Then <code>npm</code> gets the text you typed as a null-terminated vector of string arguments, usually called \"argv.\" It might look like <code>[\"npm\", \"install\", null]</code>. It uses whatever logic to do the stuff you expect npm to do, then it exits. When the program exits, the system shell takes over again, printing a new prompt and waiting for your next input.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205186291,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "rprior@protonmail.com",
            "sender_full_name": "Ryan Prior (he) (F1'19)",
            "sender_id": 234256,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Command Prompt vs Powershell",
            "submessages": [],
            "timestamp": 1595897957,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/097edbae0d41f8a5149c6ada6fd5c4941e572159?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I don't know how people learn this stuff these days. Maybe there's some good modern resources that <span class=\"user-mention\" data-user-id=\"263547\">@Aditya Athalye (he) (SP1'20)</span>, <span class=\"user-mention\" data-user-id=\"255045\">@Ori Dean Bernstein (he) (W2'20)</span> , <span class=\"user-mention\" data-user-id=\"240569\">@Victoria Mitchell (she/they) (F2'19)</span> , <span class=\"user-mention\" data-user-id=\"2863\">@Julia Evans (she) (F'13)</span> can recommend? Julia has a website with some accessible zines, including <a href=\"https://wizardzines.com/zines/bite-size-command-line/\">https://wizardzines.com/zines/bite-size-command-line/</a> which you might find helpful.</p>\n<p>The way I learned about this stuff is I read RUTE (<a href=\"https://rlworkman.net/howtos/rute/rute.html\">https://rlworkman.net/howtos/rute/rute.html</a>). It's a long, long read and I don't necessarily recommend it, but it's what got me started.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205186619,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "rprior@protonmail.com",
            "sender_full_name": "Ryan Prior (he) (F1'19)",
            "sender_id": 234256,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Command Prompt vs Powershell",
            "submessages": [],
            "timestamp": 1595898329,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/700775c1b9679bb74bd97d4ced91fadf9cc2ed17?x=x&version=2",
            "client": "website",
            "content": "<p>i would also recommend this series about the history of the command line (and the introduction of a pseudo-terminal api) on windows, which helps explain some aspects of what makes it strange to people familiar with how it works on linux: <a href=\"https://devblogs.microsoft.com/commandline/windows-command-line-backgrounder/\">https://devblogs.microsoft.com/commandline/windows-command-line-backgrounder/</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205187227,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "roland@rolandcrosby.com",
            "sender_full_name": "Roland Crosby (he) (SP2'20)",
            "sender_id": 276197,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Command Prompt vs Powershell",
            "submessages": [],
            "timestamp": 1595898997,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>one fun aspect of cmd as a scripting language is that the time complexity of the parser is quadratic in the number of lines in the script. If you add too many comments you\u2019ll noticeably slow down the script! Each line gets parsed only after parsing the whole script up to that line. That\u2019s why comments use <code>::</code> instead of <code>REM</code> (short for remark), the former defines a goto  label named <code>:</code>, which the parser skips over since it\u2019s unused. More details here: <a href=\"https://www.robvanderwoude.com/comments.php\">https://www.robvanderwoude.com/comments.php</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205187761,
            "is_me_message": false,
            "last_edit_timestamp": 1595899852,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Command Prompt vs Powershell",
            "submessages": [],
            "timestamp": 1595899595,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>this sort of thing mattered more when you needed to run a script from a slow floppy!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205187770,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Command Prompt vs Powershell",
            "submessages": [],
            "timestamp": 1595899618,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>all that to say batch scripts are cursed</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205187782,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Command Prompt vs Powershell",
            "submessages": [],
            "timestamp": 1595899629,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c820158f867b70bed5e4d5ed84954ff9b49fceb2?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>i feel like ryan gave a really great intro to the idea of a shell and terminal. i'm not sure of good intro material to working with the command-line - i was around DOS computers a lot growing up and it didn't take long to get the idea of \"you type words to interact with the computer\".</p>\n<p>(there's a story in my family - that i'm pretty sure is exaggerated but i love retelling it - that i was so used to dealing with computers that i quickly learned to recognize just enough letters to find the right floppy disk to play Lemmings. at age two-and-a-half. &gt;_&gt;)</p>\n<p>all this to say that i don't have good resources to learn this stuff, because i literally grew up in it, lol. one thing that helped (which, also, is hard to link to, sadly) was a college class i had that taught about interacting with a UNIX system. the textbook i got for that class is probably the only textbook i've actually used since graduating, because it had a really great reference to the UNIX coreutils (the basic set of command-line programs that were part of the POSIX specification to be considered \"a UNIX system\") and i've looked back at it a couple times. (the book was called \"Your UNIX: The Ultimate Guide\" and it looks like it's been updated since i got the book to be called \"Your UNIX/Linux\" now, so the older edition is relatively cheap. i'm not sure i would specifically recommend it, tho - i'm just stating where i'm coming from since i was mentioned.)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205193176,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "grey@quietmisdreavus.net",
            "sender_full_name": "Victoria Mitchell (she) (F2'19)",
            "sender_id": 240569,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Command Prompt vs Powershell",
            "submessages": [],
            "timestamp": 1595903728,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c820158f867b70bed5e4d5ed84954ff9b49fceb2?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>one thing to point out, to specifically answer your questions, is the <em>difference</em> between a shell and a terminal. linux/mac terminals have their roots in physical machines that were just an interface to a mainframe, and frequently emulate some of that behavior, even today! (there are some really obscure features in the old Linux terminal program <code>xterm</code> that betray these roots.) a <em>terminal</em> nowadays is a program that runs some other command-line application. the standard Windows command prompt and Powershell use a built-in program called <code>ConHost</code> that acts as the terminal. on macOS, the default terminal is just called \"Terminal\". and, relevant to you, VS Code also has a terminal built-in. these programs provide a kind of graphical-to-command-line bridge, by creating a text window that a command-line program can write to and read from.</p>\n<p>a <em>shell</em>, on the other hand, is an interactive command-line program that is generally used to run other command-line programs. these can range from the quite simple to the quite sophisticated; something as ubiquitous as tab-completion (the use of the Tab key to automatically complete a command or filename) is provided by the shell, and can work quite differently between them. frequently, shells extend their \"type a command to run it\" functionality into a full programming language to run other programs with. this functionality is often also available in the interactive session - for example, in the powershell help docs there are frequently references its <code>foreach</code> primitive or its pipelines functionality that can are meant to be run in an interactive session! things like pipelines (stringing multiple programs together so that the output of one program is fed to another program as its input) or conditional execution (using things like <code>&amp;&amp;</code> and <code>||</code> to run other programs based on whether the one before it succeeded or failed) are useful both interactively and in a script.</p>\n<p>anyway, this is why VS Code's <em>terminal</em> can run both Command Prompt and PowerShell based on what you ask it for - a terminal can run whatever program you ask it to, and those specific programs (or any shell, in the general case) are both convenient things for a terminal to run. different shells have different designs, different histories, different things they expose or different ways they accept commands; for example, the other things people have said about <code>cmd.exe</code>'s long history and the way it affected its design in comparison to other shells.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205193880,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "grey@quietmisdreavus.net",
            "sender_full_name": "Victoria Mitchell (she) (F2'19)",
            "sender_id": 240569,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Command Prompt vs Powershell",
            "submessages": [],
            "timestamp": 1595904835,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c820158f867b70bed5e4d5ed84954ff9b49fceb2?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>hopefully this isn't too much info! in writing this up i realized how much of this i took for granted, heh. welcome to the wild world of the command line! the rabbit holes run <em>really</em> deep here.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205193950,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "grey@quietmisdreavus.net",
            "sender_full_name": "Victoria Mitchell (she) (F2'19)",
            "sender_id": 240569,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Command Prompt vs Powershell",
            "submessages": [],
            "timestamp": 1595904905,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>Honestly: I don't remember how I learned this. I know that there was an old Unix book lying around the house when I was a teenager that I read because I was bored. And I remember just poking around with things like <code>ls /usr/bin</code>, and going \"what's' this <code>shar</code> thing? <code>man shar</code> -- oh.. uh.. that's mildly disturbing, and clearly predates people caring about security\"</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205194037,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Command Prompt vs Powershell",
            "submessages": [],
            "timestamp": 1595905077,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>so, basically, looking at what's available and trying to figure out what it was.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205194086,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Command Prompt vs Powershell",
            "submessages": [],
            "timestamp": 1595905129,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>oh. also, looking at various fortune quotes and trying to figure out wtf they were talking about.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205194094,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Command Prompt vs Powershell",
            "submessages": [],
            "timestamp": 1595905148,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/afcff71a280c619fe7f45af5df2f66b9617479fc?x=x&version=4",
            "client": "website",
            "content": "<p>Came here to talk about how the modern UNIX/Windows shell is still rooted in the teletype terminals of time-sharing computer systems. </p>\n<p>The article <span class=\"user-mention\" data-user-id=\"276197\">@Roland Crosby (he) (SP2'20)</span> posted provides a far better explanation than what was in my head, so I'll just leave a stick figure here:</p>\n<div class=\"codehilite\"><pre><span></span><code>O       &lt;--- Human\n\\\\ _/   &lt;--- TTY\n||   `~~,_  &lt;--- stream of human &lt; - &gt; computer communication\n          |\n.-------------------------------------.\n|           Shell                     |\n|     ---------------------------     |\n|     |    Operating System     |     |\n .    ---------------------------    .\n  \\_________________________________/\n</code></pre></div>\n\n\n<p>In Unix-land, Rob Pike's book is the canonical reference, but I haven't read it yet <a href=\"https://archive.org/details/UnixProgrammingEnviornment\">https://archive.org/details/UnixProgrammingEnviornment</a> (gathering dust on the shelf like all the others on the to-read list).</p>\n<p>I've used these materials so far:</p>\n<ul>\n<li><a href=\"https://www.goodreads.com/book/show/299533.Classic_Shell_Scripting\">Classic Shell Scripting</a></li>\n<li><code>man bash</code>, and basically reading manual pages for any new command I encounter</li>\n<li>The Bash Hackers wiki: <a href=\"https://wiki.bash-hackers.org/\">https://wiki.bash-hackers.org/</a></li>\n<li>Guides available at <a href=\"https://tldp.org/guides.html\">https://tldp.org/guides.html</a></li>\n<li>Eric Raymond's TAOUP <a href=\"http://www.catb.org/esr/writings/taoup/html/\">http://www.catb.org/esr/writings/taoup/html/</a></li>\n</ul>\n<p>I'm still learning, and ultimately, one has to assiduously poke and prod around in the sytem. </p>\n<p>And like others have pointied out, trial and error is the way to go. You'll shoot yourself in the foot a few times too. That's part of the process <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> </p>\n<p>To illustrate the idea of TTYs... if you're on a Unix system, open your Terminal window, and execute this in the Shell:</p>\n<div class=\"codehilite\"><pre><span></span><code>ls /dev/\n</code></pre></div>\n\n\n<p>You'll see many \"directories\", including at least one /dev/tty (probably many /dev/tty&lt;number&gt; patterns).</p>\n<p><code>/dev/tty</code>s are --- oh, yes --- virtual avatars of the TeleTYpe Terminals of yore. </p>\n<p>Now ...</p>\n<p>/dev/null is a \"special\" \"file\" in the system which is like a black hole --- send things into it and it sends nothing back</p>\n<div class=\"codehilite\"><pre><span></span><code>echo &quot;Hello, World&quot; &gt; /dev/null\n</code></pre></div>\n\n\n<p>This takes the output of echo and redirects it <code>&gt;</code> into the \"file\" <code>/dev/null</code>. You'd see nothing gets printed back in your teminal... <code>/dev/null</code> swallows all echos.</p>\n<p><code>/dev/tty</code> is also a \"special\" \"file\" in the system, buuuutt... stuff that you send to it goes somewhere.</p>\n<div class=\"codehilite\"><pre><span></span><code>echo &quot;Hello, World&quot; &gt; /dev/tty\n</code></pre></div>\n\n\n<p>Where did that go? <br>\nWhy?<br>\nAlso, why have I air-quoted \"directory\" and \"special file\"? </p>\n<p>And thusly, one may fall into the rabbit hole... happy 'splorin' :)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205199682,
            "is_me_message": false,
            "last_edit_timestamp": 1595928609,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "aditya.athalye@gmail.com",
            "sender_full_name": "Aditya Athalye (he) (SP1'20)",
            "sender_id": 263547,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Command Prompt vs Powershell",
            "submessages": [],
            "timestamp": 1595914459,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>Also, note: it seems like most answers you got were unix centric -- but you were asking about windows.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205255523,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Command Prompt vs Powershell",
            "submessages": [],
            "timestamp": 1595952306,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't have any better references there, just want to make sure you keep an eye on that.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205255558,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Command Prompt vs Powershell",
            "submessages": [],
            "timestamp": 1595952322,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/74f2df0616336a1b51fe52787e504f05?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>This is a question about software engineering in teams.</p>\n<p>Throughout my time working I've met a number of people who strongly bias towards creating working prototypes first and using them to guide design. While there are clear benefits to this approach (risk mitigation, unambiguous communication), I often feel like sticking to pseudocode would provide an equally effective anchor without forcing a discussion to drag out over several meetings while someone looks up API documentation in between.</p>\n<p>To be clear I think having design written down is critical -- large abstract discussions where no two people are on the same page are dangerously common. But to me prototypes are something that validate an already sufficiently rigorous design, not a primary source of new surprises and educational experiences.</p>\n<p>Naturally there are tradeoffs and thresholds past which real code would allow everyone on the team to contribute in a tangible way. But I'm surprised by the frequency at which relatively senior people are willing to pay a team of 5 engineers for 6 months to \"design by prototyping\" and throw out the final product in the end because it didn't feel right (and not because of the realization of some unknowable future outcome like customer response or experimental results).</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205445629,
            "is_me_message": false,
            "last_edit_timestamp": 1596090616,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "jon.shao8@gmail.com",
            "sender_full_name": "Jon Shao (he) (S2'20)",
            "sender_id": 314694,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Where do prototypes fall in your design process?",
            "submessages": [],
            "timestamp": 1596090490,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/097edbae0d41f8a5149c6ada6fd5c4941e572159?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Whenever you ship working code and people try it, your requirements change. Pseudocode isn't working code, it takes some imagination to execute it, and in that realm of fantasy people can maintain their different nebulous requirements without having to confront software that doesn't meet them.</p>\n<p>Now, spending 6 months prototyping without any customer buy-in sounds risky to me. De-risking that situation by bringing in outside design partners and pardon-our-dust-tolerant end users is not as hard as a lot of companies seem to think and ought to give you a sense well before the 6 month mark if the thing you're building doesn't feel right.</p>\n<p>I'm also a big fan of faking things for prototypes. The actual architecture might require plugging into a streaming API to give results, but if that's going to take a decent amount of time, then having somebody run a query and save the results to a cache a few times a day might give a good enough approximation for prototyping without having to build a whole API integration.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205497084,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "rprior@protonmail.com",
            "sender_full_name": "Ryan Prior (he) (F1'19)",
            "sender_id": 234256,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Where do prototypes fall in your design process?",
            "submessages": [],
            "timestamp": 1596124742,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>Throughout my time working I've met a number of people who strongly bias towards creating working prototypes first and using them to guide design. </p>\n</blockquote>\n<p>I find it very hard to get things right without trying it out first -- and I mean, hooking it in to the other systems that it needs to talk to. I always find some oversight, or some simplification, or some issue that renders a big part of the initial design unworkable. Invariably, the requirements are subtly (or not so subtly) wrong.</p>\n<p>That being said, 6 months to prototype is a long time.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205501957,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "recurse@ardent.nebcorp.com",
                        "full_name": "Joe Ardent (he) (SP1'17)",
                        "id": 9097
                    },
                    "user_id": 9097
                }
            ],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Where do prototypes fall in your design process?",
            "submessages": [],
            "timestamp": 1596127116,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21b9cce736cbbe8e0761bbb33863c7d3112d0136?x=x&version=2",
            "client": "website",
            "content": "<p>I think we're missing some context around what is being prototyped. Having a team of five work for six months a single project seems too long for me let alone six months prototyping a project.</p>\n<p>I've found prototyping particularly useful for projects where performance is important. E.g. If I make some simplifying instructions such as this system doesn't need to ingest new data or this system doesn't need to handle all the edge cases, could a given design possibly be fast enough. If the prototyped design is fast enough, that will eventually become the actual design.</p>\n<p>I don't have that much experience  in this area, but I think it's not uncommon to come up with \"wireframes\" for UIs. Instead of making a functional UI, you just make some images of what the UI will look like. You can then ask people what to \"navigate\" through the UI and you can show them different images based on the actions they've performed. This allows you to get feedback on a UI without even making it.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205507544,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "michaelmalis2@gmail.com",
            "sender_full_name": "Michael Malis (SP2'19)",
            "sender_id": 8099,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Where do prototypes fall in your design process?",
            "submessages": [],
            "timestamp": 1596130270,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e490878fb33601755a902cb0a59c34d5?d=identicon&version=1",
            "client": "website",
            "content": "<p>So, one of my project tasks is to take a Javascript-based project, and give it a Graphic User Interface, opposed to the BASH Command Line appearance it currently has. But I'm terribly stumped as to how to tackle it.</p>\n<p>To briefly explain the project, the program itself listens to see if a .slp file (files created from a video game emulator) is being altered. If the program detects the file being made, information will be continuously be displayed and, depending on what occurs in the video game, sound effects will play (via node-wav-player).</p>\n<p>I looked into ways that I can try to present the information, and a majority of the day has been researching into Eclipse, which was definitely a good first step, in terms of having an actual interface builder. But before I continue and trying to create this integration, I'm still not sure if this is necessarily the best way to tackle the problem, for a couple of reasons:</p>\n<ol>\n<li>I'm kind of unfamiliar with BASH, especially in terms of making it run on startup so that information can be displayed on the user interface.</li>\n<li>I'm not sure how I would even do it, as I have not ever tried integrating two languages like this (It seems very likely that if I were to continue forward with Eclipse, I would likely need to code the User Interface with Java).</li>\n</ol>\n<p>Are there any GUI Builders that would be easier to work with, in regards to this task? And if not, what would be a good next step to make to run the Javascript file through a GUI?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205837696,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "rbautista9962@gmail.com",
            "sender_full_name": "Ryan Joseph Bautista (he) (S2'20)",
            "sender_id": 314647,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Converting a Command Line program to a GUI program",
            "submessages": [],
            "timestamp": 1596483289,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/620d0eb7fcb87b272b387cf33e4ed314?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Maybe try <a href=\"https://www.electronjs.org\">electron</a>? Since you already have JS+node stuff, this seems like the most straight-forward approach?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205841650,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "pearl.isaac@gmail.com",
                        "full_name": "Isaac Pearl (he) (SP1'19)",
                        "id": 203622
                    },
                    "user_id": 203622
                }
            ],
            "recipient_id": 20203,
            "sender_email": "me@captnemo.in",
            "sender_full_name": "Nemo (he) (S1'20)",
            "sender_id": 301256,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Converting a Command Line program to a GUI program",
            "submessages": [],
            "timestamp": 1596485445,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/379065f5ed34b60c451bedb37fff109b?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>++ for electron!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205841839,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "pearl.isaac@gmail.com",
            "sender_full_name": "Isaac Pearl (he) (SP1'19)",
            "sender_id": 203622,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Converting a Command Line program to a GUI program",
            "submessages": [],
            "timestamp": 1596485562,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e490878fb33601755a902cb0a59c34d5?d=identicon&version=1",
            "client": "website",
            "content": "<p>After trying out Electron, it really is pretty straight-forward in terms of integrating the files, at least in comparison to Eclipse. Granted, one of the JS files almost immediately broke after initial tinkering around with it, but I'll look into that more, and figure out what I still need to figure out. Thanks for the recommendation! <span class=\"user-mention\" data-user-id=\"301256\">@Nemo (he) (S1'20)</span> <span class=\"user-mention\" data-user-id=\"203622\">@Isaac Pearl (he) (SP1'19)</span>  <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205851880,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "rbautista9962@gmail.com",
            "sender_full_name": "Ryan Joseph Bautista (he) (S2'20)",
            "sender_id": 314647,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Converting a Command Line program to a GUI program",
            "submessages": [],
            "timestamp": 1596491805,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/379065f5ed34b60c451bedb37fff109b?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>ofc! one of the biggest hurdles I came across when learning Electron was understanding what <code>ipc</code> is and how it's used to move data between the <code>renderer</code> and <code>main</code> processes - I'd highly recommend checking out the docs/examples here: <a href=\"https://www.electronjs.org/docs/api/ipc-main\">https://www.electronjs.org/docs/api/ipc-main</a> if you aren't already familiar with <code>ipc</code></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205852261,
            "is_me_message": false,
            "last_edit_timestamp": 1596492078,
            "reactions": [
                {
                    "emoji_code": "12795",
                    "emoji_name": "plus1",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "me@captnemo.in",
                        "full_name": "Nemo (he) (S1'20)",
                        "id": 301256
                    },
                    "user_id": 301256
                }
            ],
            "recipient_id": 20203,
            "sender_email": "pearl.isaac@gmail.com",
            "sender_full_name": "Isaac Pearl (he) (SP1'19)",
            "sender_id": 203622,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Converting a Command Line program to a GUI program",
            "submessages": [],
            "timestamp": 1596492041,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>I have a graph.</p>\n<p>I run 5 different clustering algorithms, and get 5 different clusterings.</p>\n<p>A clustering is a set of sets. A clustering consists of a set of clusters. Each cluster contains a set of Nodes in the graph; all nodes in the graph are present in exactly one subset.</p>\n<p>So I get back 5 sets, each with a varying number of subsets which split up all the nodes in the graph.</p>\n<p>I want to know: which clustering should I use? How do I compare the results of these clusterings? </p>\n<p>I'm sure people must have established ways of thinking about this, but I'm failing to figure out what to google. Any pointers?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205943087,
            "is_me_message": false,
            "last_edit_timestamp": 1596566512,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "How to compare graph clusterings?",
            "submessages": [],
            "timestamp": 1596565992,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>Here are some thoughts I've had around this:</p>\n<ul>\n<li>if I run multiple clustering algorithms and they place some nodes consistently in different clusters, that raises my confidence that those nodes should indeed be in different clusters</li>\n<li>if I perform something like a subset overlap, I might be able to find what the \"core\" clusters that multiple algorithms agree on are<br>\n    - unfortunately, this doesn't quite work, because one algorithm might split a cluster of 3 nodes into 3 clusters of 1 node. In some sense they're in agreement about the association, just not the granularity</li>\n<li>another complication is alignment: how do I figure out for my 5 different clusterings which clusters should \"correspond\" to which other clusters? (Especially when the number of clusters is different?)</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205943610,
            "is_me_message": false,
            "last_edit_timestamp": 1596566375,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "How to compare graph clusterings?",
            "submessages": [],
            "timestamp": 1596566267,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>Some extra context:</p>\n<ul>\n<li>the graphs I care about are pretty small (100s to maybe 1000s on Nodes)</li>\n<li>I believe that my graphs have densely-ish connected subgraphs which themselves are sparely-ish connected; I'd like the clustering algorithms to help me pick out those densley-ish connected components</li>\n<li>when I say \"how do I know which clustering to choose?\" perhaps what I mean is: looking at these results, can I know: which nodes can I confidently say are in different clusters? which nodes can I confidently say are near a cluster boundary? (because algorithms disagree about where they should go)</li>\n<li>when I say \"clustering algorithm\" I'm actually looking at community detection algorithms, which produce clusterings. I think they're synonymous but maybe I'm mis-using that term</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205949710,
            "is_me_message": false,
            "last_edit_timestamp": 1596573482,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "How to compare graph clusterings?",
            "submessages": [],
            "timestamp": 1596569459,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Are you doing a pure math exercise? Or are you analyzing some data that was measured from some other kind of system? Your question sort of sounds like \"which roots of my polynomial are good ones?\" Like, I dunno. If you are modeling the flight time of a thrown ball, you probably only want to look at positive roots. But if you are doing financial modeling, maybe the negative roots are also meaningful.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205984508,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "How to compare graph clusterings?",
            "submessages": [],
            "timestamp": 1596597347,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Presumably you are using some kind of edge weighting or distance metric in your problem? Same sort of point applies --- if you are trying to model a system then you probably want to keep that in mind. But if you are doing pure math, then, well, you can do whatever is interesting and follows from the axioms you set up for yourself.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205984585,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "How to compare graph clusterings?",
            "submessages": [],
            "timestamp": 1596597425,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ef0cc9607b07f392f70560a43dbbb2d0efd6328?x=x&version=1",
            "client": "website",
            "content": "<p>Yeah, in general, unsupervised techniques typically don't yield clusters that accord to some human concept or understanding</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205986169,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "brian.kihoon.lee@gmail.com",
            "sender_full_name": "Brian Lee (F1'16)",
            "sender_id": 100043,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "How to compare graph clusterings?",
            "submessages": [],
            "timestamp": 1596599628,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ef0cc9607b07f392f70560a43dbbb2d0efd6328?x=x&version=1",
            "client": "website",
            "content": "<p>ultimately you need a downstream task to decide whether your clusters are any good</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 205986209,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "brian.kihoon.lee@gmail.com",
            "sender_full_name": "Brian Lee (F1'16)",
            "sender_id": 100043,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "How to compare graph clusterings?",
            "submessages": [],
            "timestamp": 1596599645,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1d9cae1f0cbcb78efb0fbd9650fbccb2?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>What techniques (or even better, programs) exist for detecting if source  code is similar?</p>\n<p>Ideally, this might be comparing two git repos.</p>\n<p>\u201cSimilarity\u201d could possibly mean different things?</p>\n<p>I stumbled upon a system called Moss. It\u2019s provided as a service, with API call restrictions and a restriction to a set of languages. I haven\u2019t read about it yet, but I\u2019m curious how it scores similarity.</p>\n<p><a href=\"http://theory.stanford.edu/~aiken/moss/\">http://theory.stanford.edu/~aiken/moss/</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206657126,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "julianvmodesto@gmail.com",
            "sender_full_name": "Julian Modesto (he) (m3'20)",
            "sender_id": 276201,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "source code similarity",
            "submessages": [],
            "timestamp": 1597203588,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1d9cae1f0cbcb78efb0fbd9650fbccb2?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>It would be neat to scale this to compare 2 different git repos. Or even score a Github repo against all of Github for similarity.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206657459,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "julianvmodesto@gmail.com",
            "sender_full_name": "Julian Modesto (he) (m3'20)",
            "sender_id": 276201,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "source code similarity",
            "submessages": [],
            "timestamp": 1597204125,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/35351c8d4dee64d54b92fe38875cb762854d9299?x=x&version=2",
            "client": "website",
            "content": "<p>I'll be using MOSS as a plagiarism detector this semester for an intro to compsci course</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206657476,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f440",
                    "emoji_name": "eyes",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "julianvmodesto@gmail.com",
                        "full_name": "Julian Modesto (he) (m3'20)",
                        "id": 276201
                    },
                    "user_id": 276201
                }
            ],
            "recipient_id": 20203,
            "sender_email": "ertysdl@gmail.com",
            "sender_full_name": "Erty Seidohl (he) (S'13)",
            "sender_id": 2154,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "source code similarity",
            "submessages": [],
            "timestamp": 1597204190,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/35351c8d4dee64d54b92fe38875cb762854d9299?x=x&version=2",
            "client": "website",
            "content": "<p>I'm not entirely sure how it works, but I'm worried that for smaller projects it's just going to always detect plagiarism since there's only so many ways to write a for loop that sums up numbers in a list</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206657526,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ertysdl@gmail.com",
            "sender_full_name": "Erty Seidohl (he) (S'13)",
            "sender_id": 2154,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "source code similarity",
            "submessages": [],
            "timestamp": 1597204235,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/35351c8d4dee64d54b92fe38875cb762854d9299?x=x&version=2",
            "client": "website",
            "content": "<p>I think you could \"just\" run a recursive diff against two directories</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206657532,
            "is_me_message": false,
            "last_edit_timestamp": 1597204271,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "julianvmodesto@gmail.com",
                        "full_name": "Julian Modesto (he) (m3'20)",
                        "id": 276201
                    },
                    "user_id": 276201
                }
            ],
            "recipient_id": 20203,
            "sender_email": "ertysdl@gmail.com",
            "sender_full_name": "Erty Seidohl (he) (S'13)",
            "sender_id": 2154,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "source code similarity",
            "submessages": [],
            "timestamp": 1597204258,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/35351c8d4dee64d54b92fe38875cb762854d9299?x=x&version=2",
            "client": "website",
            "content": "<p>Maybe <a href=\"https://unix.stackexchange.com/a/49498\">https://unix.stackexchange.com/a/49498</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206657550,
            "is_me_message": false,
            "last_edit_timestamp": 1597204379,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ertysdl@gmail.com",
            "sender_full_name": "Erty Seidohl (he) (S'13)",
            "sender_id": 2154,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "source code similarity",
            "submessages": [],
            "timestamp": 1597204312,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/afcff71a280c619fe7f45af5df2f66b9617479fc?x=x&version=4",
            "client": "website",
            "content": "<blockquote>\n<p>What techniques (or even better, programs) exist for detecting if source code is similar?</p>\n</blockquote>\n<p>This reminded me of Joe Armstrong's talk \"The mess we're in\", specifically this part where he describes his \"Entropy Condenser\" <a href=\"https://youtu.be/lKXe3HUG2l4?t=1917\">https://youtu.be/lKXe3HUG2l4?t=1917</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"lKXe3HUG2l4\" href=\"https://youtu.be/lKXe3HUG2l4?t=1917\"><img src=\"https://i.ytimg.com/vi/lKXe3HUG2l4/default.jpg\"></a></div><p>The whole talk is great.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206659308,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f440",
                    "emoji_name": "eyes",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "julianvmodesto@gmail.com",
                        "full_name": "Julian Modesto (he) (m3'20)",
                        "id": 276201
                    },
                    "user_id": 276201
                }
            ],
            "recipient_id": 20203,
            "sender_email": "aditya.athalye@gmail.com",
            "sender_full_name": "Aditya Athalye (he) (SP1'20)",
            "sender_id": 263547,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "source code similarity",
            "submessages": [],
            "timestamp": 1597207027,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7dc1374e8307c45a20af92a81bd15fc1?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>another complication is alignment: how do I figure out for my 5 different clusterings which clusters should \"correspond\" to which other clusters? (Especially when the number of clusters is different?)</p>\n</blockquote>\n<p>The <a href=\"https://en.wikipedia.org/wiki/Hungarian_algorithm\">Hungarian Algorithm</a> is a standard way to find \"matchings\" between two sets. See also <a href=\"https://github.com/bmc/munkres\">py code</a> here which works in the case of sets with differen sizes.</p>\n<hr>\n<p>RE: how to \"measure\" quality of a clustering, I think the standard way is to say \"good\" algorithm are ones that produce clusters with high similarity within a cluster (sum of distances of all nodes withing cluster is small)  and low similarity between clusters (distances between different clusters as large as possible).  See the wikipedia page for some metrics <a href=\"https://en.wikipedia.org/wiki/Cluster_analysis#Evaluation_and_assessment\">https://en.wikipedia.org/wiki/Cluster_analysis#Evaluation_and_assessment</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206684081,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ivan.savov@gmail.com",
            "sender_full_name": "Ivan Savov (SP2'17)",
            "sender_id": 100772,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "How to compare graph clusterings?",
            "submessages": [],
            "timestamp": 1597232831,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/096bee6351ba6927af83e84c635be5f5?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Maybe you could try model based eda on the cluster?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206689661,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "unnati97@gmail.com",
            "sender_full_name": "Unnati Niraj Patel (she) (S2'20)",
            "sender_id": 277193,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "How to compare graph clusterings?",
            "submessages": [],
            "timestamp": 1597237047,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/096bee6351ba6927af83e84c635be5f5?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I came across this interesting algorithm:</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206689691,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "unnati97@gmail.com",
            "sender_full_name": "Unnati Niraj Patel (she) (S2'20)",
            "sender_id": 277193,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "How to compare graph clusterings?",
            "submessages": [],
            "timestamp": 1597237066,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/096bee6351ba6927af83e84c635be5f5?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><a href=\"https://www.youtube.com/watch?v=gWj4ZwB7f3o\">https://www.youtube.com/watch?v=gWj4ZwB7f3o</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"gWj4ZwB7f3o\" href=\"https://www.youtube.com/watch?v=gWj4ZwB7f3o\"><img src=\"https://i.ytimg.com/vi/gWj4ZwB7f3o/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206689708,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "unnati97@gmail.com",
            "sender_full_name": "Unnati Niraj Patel (she) (S2'20)",
            "sender_id": 277193,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "How to compare graph clusterings?",
            "submessages": [],
            "timestamp": 1597237076,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/096bee6351ba6927af83e84c635be5f5?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Full disclosure: I don't know anything about graph clustering</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206689810,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "unnati97@gmail.com",
            "sender_full_name": "Unnati Niraj Patel (she) (S2'20)",
            "sender_id": 277193,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "How to compare graph clusterings?",
            "submessages": [],
            "timestamp": 1597237111,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/096bee6351ba6927af83e84c635be5f5?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"277193\">Unnati Niraj Patel (she) (S2'20)</span> <a href=\"#narrow/stream/18957-programming/topic/How.20to.20compare.20graph.20clusterings.3F/near/206689708\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://www.youtube.com/watch?v=gWj4ZwB7f3o\">https://www.youtube.com/watch?v=gWj4ZwB7f3o</a></p>\n</blockquote>\n<p><a href=\"https://towardsdatascience.com/mixed-effects-random-forests-6ecbb85cb177\">https://towardsdatascience.com/mixed-effects-random-forests-6ecbb85cb177</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206689870,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "unnati97@gmail.com",
            "sender_full_name": "Unnati Niraj Patel (she) (S2'20)",
            "sender_id": 277193,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "How to compare graph clusterings?",
            "submessages": [],
            "timestamp": 1597237152,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1d9cae1f0cbcb78efb0fbd9650fbccb2?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Erty, I\u2019m interested in your results! I wonder how it scores, I guess I\u2019ll try giving the paper a skim.</p>\n<p>Aditya, thanks for thinking of the talk, I didn\u2019t know who Joe Armstrong was.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206775217,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "julianvmodesto@gmail.com",
            "sender_full_name": "Julian Modesto (he) (m3'20)",
            "sender_id": 276201,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "source code similarity",
            "submessages": [],
            "timestamp": 1597285893,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1d9cae1f0cbcb78efb0fbd9650fbccb2?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Hashing files for semantic similarity sounds cool. That makes me wonder how fingerprinting video and audio works.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206775285,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "julianvmodesto@gmail.com",
            "sender_full_name": "Julian Modesto (he) (m3'20)",
            "sender_id": 276201,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "source code similarity",
            "submessages": [],
            "timestamp": 1597285972,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/35351c8d4dee64d54b92fe38875cb762854d9299?x=x&version=2",
            "client": "website",
            "content": "<p>I see those <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span> <span class=\"user-mention\" data-user-id=\"276201\">@Julian Modesto (he) (m3'20)</span> and tbqh I'm really not happy about it either. It's a requirement of the class from my advisor :(</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206777462,
            "is_me_message": false,
            "last_edit_timestamp": 1597289289,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ertysdl@gmail.com",
            "sender_full_name": "Erty Seidohl (he) (S'13)",
            "sender_id": 2154,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "source code similarity",
            "submessages": [],
            "timestamp": 1597289257,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/35351c8d4dee64d54b92fe38875cb762854d9299?x=x&version=2",
            "client": "website",
            "content": "<p>I'd rather spend my time teaching than trying to find plagairism</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206777467,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ertysdl@gmail.com",
            "sender_full_name": "Erty Seidohl (he) (S'13)",
            "sender_id": 2154,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "source code similarity",
            "submessages": [],
            "timestamp": 1597289273,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fc9272e3a28bf63ce1ab1a6b7db9b090?d=identicon&version=1",
            "client": "website",
            "content": "<p>Create a neural net classifier that always spits out \"false\" and tell your advisor the internals are inscrutable?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206777961,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f914",
                    "emoji_name": "thinking",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andrey.petrov@shazow.net",
                        "full_name": "Andrey Petrov (he) (F1'20)",
                        "id": 327980
                    },
                    "user_id": 327980
                },
                {
                    "emoji_code": "1f601",
                    "emoji_name": "grinning_face_with_smiling_eyes",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "andrey.petrov@shazow.net",
                        "full_name": "Andrey Petrov (he) (F1'20)",
                        "id": 327980
                    },
                    "user_id": 327980
                },
                {
                    "emoji_code": "1f601",
                    "emoji_name": "grinning_face_with_smiling_eyes",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jacoblevgw@gmail.com",
                        "full_name": "Jacob Lev Goldman-Wetlzer (he) (m2'20)",
                        "id": 264901
                    },
                    "user_id": 264901
                },
                {
                    "emoji_code": "1f914",
                    "emoji_name": "thinking",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "grey@quietmisdreavus.net",
                        "full_name": "Victoria Mitchell (she) (F2'19)",
                        "id": 240569
                    },
                    "user_id": 240569
                },
                {
                    "emoji_code": "1f601",
                    "emoji_name": "grinning_face_with_smiling_eyes",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jpholzmann@gmail.com",
                        "full_name": "Justin Holzmann (he) (S2'20)",
                        "id": 315058
                    },
                    "user_id": 315058
                },
                {
                    "emoji_code": "1f601",
                    "emoji_name": "grinning_face_with_smiling_eyes",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "julianvmodesto@gmail.com",
                        "full_name": "Julian Modesto (he) (m3'20)",
                        "id": 276201
                    },
                    "user_id": 276201
                },
                {
                    "emoji_code": "1f914",
                    "emoji_name": "thinking",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ertysdl@gmail.com",
                        "full_name": "Erty Seidohl (he) (S'13)",
                        "id": 2154
                    },
                    "user_id": 2154
                },
                {
                    "emoji_code": "1f601",
                    "emoji_name": "grinning_face_with_smiling_eyes",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ertysdl@gmail.com",
                        "full_name": "Erty Seidohl (he) (S'13)",
                        "id": 2154
                    },
                    "user_id": 2154
                },
                {
                    "emoji_code": "1f601",
                    "emoji_name": "grinning_face_with_smiling_eyes",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jacob.vartuli.92@gmail.com",
                        "full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
                        "id": 314689
                    },
                    "user_id": 314689
                }
            ],
            "recipient_id": 20203,
            "sender_email": "andrew@hyfen.net",
            "sender_full_name": "Andrew Louis (he) (S2'20)",
            "sender_id": 315317,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "source code similarity",
            "submessages": [],
            "timestamp": 1597290099,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>for fingerprinting video and audio, the keyword to google is a \"perceptual hash\"</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206839396,
            "is_me_message": false,
            "last_edit_timestamp": 1597337049,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "source code similarity",
            "submessages": [],
            "timestamp": 1597337038,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4ca492e9d3c12616bdd949e4acdd86eee90766a6?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>I'm learning Haskell and trying to write the classic \"reverse a list\" solution. I have <a href=\"https://repl.it/@dmiller313/HaskellTypeConfusion#main.hs\">some code that works</a> but only if I remove the type. With the type get this error:</p>\n<div class=\"codehilite\"><pre><span></span><code>ex1.hs:5:19: error:\n    \u2022 Expected a constraint, but \u2018[Integer]\u2019 has kind \u2018*\u2019\n    \u2022 In the type signature:\n        reverseIntList :: [Integer] =&gt; [Integer]\n</code></pre></div>\n\n\n<p>Am I being too specific by saying that this is a list of integers? What should I write as the type instead? Or should I just trust the compiler and not write the type at all? Thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206873290,
            "is_me_message": false,
            "last_edit_timestamp": 1597353719,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "dan@dmiller.dev",
            "sender_full_name": "Dan Miller (he) (F1'20)",
            "sender_id": 327414,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "haskell type problem",
            "submessages": [],
            "timestamp": 1597353672,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/635ab4f3efb5c26f8276373d9767320104538f85?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>The fat arrow (=&gt;) indicates a type constraint. . . I think you are going for this type signature:</p>\n<div class=\"codehilite\"><pre><span></span><code>rev :: [Integer] -&gt; [Integer]\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206873618,
            "is_me_message": false,
            "last_edit_timestamp": 1597354226,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "jpholzmann@gmail.com",
            "sender_full_name": "Justin Holzmann (he) (S2'20)",
            "sender_id": 315058,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "haskell type problem",
            "submessages": [],
            "timestamp": 1597353868,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4ca492e9d3c12616bdd949e4acdd86eee90766a6?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>aha! That was tough to catch. Thanks <span class=\"user-mention\" data-user-id=\"315058\">@Justin Holzmann (he) (S2'20)</span> !</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206873704,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jpholzmann@gmail.com",
                        "full_name": "Justin Holzmann (he) (S2'20)",
                        "id": 315058
                    },
                    "user_id": 315058
                }
            ],
            "recipient_id": 20203,
            "sender_email": "dan@dmiller.dev",
            "sender_full_name": "Dan Miller (he) (F1'20)",
            "sender_id": 327414,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "haskell type problem",
            "submessages": [],
            "timestamp": 1597353918,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>You can also make the function generic for any list type (\"polymorphic\"), with type signature [a] -&gt; [a]; then the function could be called reverseList instead of reverseIntList</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206882483,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "haskell type problem",
            "submessages": [],
            "timestamp": 1597360228,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2dd869aa22bdb3491ea3727890869a8f?d=identicon&version=1",
            "client": "website",
            "content": "<p>Re: \"should I just trust the compiler and not write the type at all\", it can be helpful to write a type for everything in the beginning, since it helps you  reason about the program (to the extent that people often start with just writing out type signatures). If you get stuck, though, the compiler can help you -- run <code>:type</code> or <code>:t</code> in GHCi followed by the function name (like  <code>:t reverseIntList</code>), and it'll give you the compiler-derived type signature</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206882857,
            "is_me_message": false,
            "last_edit_timestamp": 1597360589,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "taro.kuriyama@gmail.com",
            "sender_full_name": "Taro Kuriyama (he) (F1'20)",
            "sender_id": 327353,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "haskell type problem",
            "submessages": [],
            "timestamp": 1597360567,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3bafaad9cd6dacf3464235dc6c8d496f1522a022?x=x&version=2",
            "client": "website",
            "content": "<p>Providing types also tells the compiler what you're trying to do so that when you accidentally do something, it can catch you, even if the code is runnable</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206882925,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f4af",
                    "emoji_name": "100",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "danielmccrevan@gmail.com",
                        "full_name": "Daniel McCrevan (he) (F1'20)",
                        "id": 327388
                    },
                    "user_id": 327388
                }
            ],
            "recipient_id": 20203,
            "sender_email": "flipactual@gmail.com",
            "sender_full_name": "Flip Stewart (they) (m6'20)",
            "sender_id": 327422,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "haskell type problem",
            "submessages": [],
            "timestamp": 1597360663,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2f05ff47bfeb3ef2d5f8690d48a42c4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>This is not exactly on topic, but it can be useful while writing Haskell. There's something called type hole exploration. Suppose you're writing a function func</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nf\">func</span> <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"kt\">Int</span><span class=\"p\">]</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">Int</span><span class=\"p\">]</span>\n<span class=\"nf\">func</span> <span class=\"ow\">=</span> <span class=\"kr\">_</span>\n</code></pre></div>\n\n\n<p>When you compile | interpret the above code, you'll receive the following error with a \"Found Hole\" message identifying the type of the underscore -&gt; \"Found hole: _ :: [Int] -&gt; [Int]\". Notice that the error message provides a set of bindings | functions which might suit the location.</p>\n<div class=\"codehilite\"><pre><span></span><code>test.hs:2:8: error:\n    \u2022 Found hole: _ :: [Int] -&gt; [Int]\n    \u2022 In the expression: _\n      In an equation for \u2018func\u2019: func = _\n    \u2022 Relevant bindings include\n        func :: [Int] -&gt; [Int] (bound at test.hs:2:1)\n      Valid hole fits include\n        func :: [Int] -&gt; [Int] (bound at test.hs:2:1)\n        cycle :: forall a. [a] -&gt; [a]\n          with cycle @Int\n          (imported from \u2018Prelude\u2019 at test.hs:1:1\n           (and originally defined in \u2018GHC.List\u2019))\n        init :: forall a. [a] -&gt; [a]\n          with init @Int\n          (imported from \u2018Prelude\u2019 at test.hs:1:1\n           (and originally defined in \u2018GHC.List\u2019))\n        reverse :: forall a. [a] -&gt; [a]\n          with reverse @Int\n          (imported from \u2018Prelude\u2019 at test.hs:1:1\n           (and originally defined in \u2018GHC.List\u2019))\n        tail :: forall a. [a] -&gt; [a]\n          with tail @Int\n          (imported from \u2018Prelude\u2019 at test.hs:1:1\n           (and originally defined in \u2018GHC.List\u2019))\n        id :: forall a. a -&gt; a\n          with id @[Int]\n          (imported from \u2018Prelude\u2019 at test.hs:1:1\n           (and originally defined in \u2018GHC.Base\u2019))\n        (Some hole fits suppressed; use -fmax-valid-hole-fits=N or -fno-max-valid-hole-fits)\n  |\n2 | func = _\n  |        ^\nFailed, no modules loaded.\nPrelude&gt;\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206883586,
            "is_me_message": false,
            "last_edit_timestamp": 1597361966,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "jacob.vartuli.92@gmail.com",
            "sender_full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
            "sender_id": 314689,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "haskell type problem",
            "submessages": [],
            "timestamp": 1597361187,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1d9cae1f0cbcb78efb0fbd9650fbccb2?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Ori, neat thanks this is cool!</p>\n<p>I skimmed the MOSS paper (extreme skim) and it looks like document fingerprinting resembles what I skimmed about perceptual hashing for images and video.</p>\n<p>Fingerprinting seems to break up input into chunks (\"k-grams\") for a fingerprint. Then, fingerprints are compared by sampling and measuring the distance between sampled chunks/grams.</p>\n<p>I think this technique looks pretty similar for code/documents vs images and video.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206897869,
            "is_me_message": false,
            "last_edit_timestamp": 1597381527,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "julianvmodesto@gmail.com",
            "sender_full_name": "Julian Modesto (he) (m3'20)",
            "sender_id": 276201,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "source code similarity",
            "submessages": [],
            "timestamp": 1597380247,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/afcff71a280c619fe7f45af5df2f66b9617479fc?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"276201\">Julian Modesto (he) (m3'20)</span> <a href=\"#narrow/stream/18957-programming/topic/source.20code.20similarity/near/206775217\">said</a>:</p>\n<blockquote>\n<p>Aditya, thanks for thinking of the talk, I didn\u2019t know who Joe Armstrong was.</p>\n</blockquote>\n<p>Welcome to today's lucky Ten Thousand <a href=\"https://xkcd.com/1053/\">xkcd: Ten Thousand</a> :-)</p>\n<p>Joe co-invented Erlang, among other notable technical accomplishments. But more than anything, Joe was a rare and precious fount of goodness who made peoples' lives better. We are all left poorer by his untimely demise. <a href=\"https://ferd.ca/goodbye-joe.html\">Goodbye Joe</a>, and the <a href=\"https://mobile.twitter.com/search?q=%23rememberingjoe+armstrong&amp;s=typd&amp;x=0&amp;y=0\">Twitterverse #rememberingjoe</a> will give you a sense of why.</p>\n<p>It will be an excellent use of time to look up and peruse the talks he gave, and the things he wrote.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206903095,
            "is_me_message": false,
            "last_edit_timestamp": 1597394736,
            "reactions": [
                {
                    "emoji_code": "1f642",
                    "emoji_name": "smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "julianvmodesto@gmail.com",
                        "full_name": "Julian Modesto (he) (m3'20)",
                        "id": 276201
                    },
                    "user_id": 276201
                }
            ],
            "recipient_id": 20203,
            "sender_email": "aditya.athalye@gmail.com",
            "sender_full_name": "Aditya Athalye (he) (SP1'20)",
            "sender_id": 263547,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "source code similarity",
            "submessages": [],
            "timestamp": 1597387650,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4ca492e9d3c12616bdd949e4acdd86eee90766a6?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>Ah this is great info, thanks everyone! I just made it polymorphic and it works great :)</p>\n<p>re: the \"Found hole\" stuff, is the compiler listing all of the functions/types it knows about that satisfies the <code>func</code> type? That's cool</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206932912,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "taro.kuriyama@gmail.com",
                        "full_name": "Taro Kuriyama (he) (F1'20)",
                        "id": 327353
                    },
                    "user_id": 327353
                }
            ],
            "recipient_id": 20203,
            "sender_email": "dan@dmiller.dev",
            "sender_full_name": "Dan Miller (he) (F1'20)",
            "sender_id": 327414,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "haskell type problem",
            "submessages": [],
            "timestamp": 1597414190,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I did a <a href=\"https://www.youtube.com/watch?v=0oo8wIi2qBE\">short talk</a> about this once!</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"0oo8wIi2qBE\" href=\"https://www.youtube.com/watch?v=0oo8wIi2qBE\"><img src=\"https://i.ytimg.com/vi/0oo8wIi2qBE/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206940068,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "shae.erisson@gmail.com",
                        "full_name": "Shae Matijs Erisson (he) (F1'19)",
                        "id": 221819
                    },
                    "user_id": 221819
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "stanley@zheng.nyc",
                        "full_name": "Stanley Zheng (they) (W1'19)",
                        "id": 100315
                    },
                    "user_id": 100315
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jacob.vartuli.92@gmail.com",
                        "full_name": "Jacob Vartuli-Schonberg (he) (F2'20)",
                        "id": 314689
                    },
                    "user_id": 314689
                },
                {
                    "emoji_code": "1f440",
                    "emoji_name": "eyes",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "dan@dmiller.dev",
                        "full_name": "Dan Miller (he) (F1'20)",
                        "id": 327414
                    },
                    "user_id": 327414
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ilawal1996@gmail.com",
                        "full_name": "Ifeoluwa Lawal (he) (F1'20)",
                        "id": 327910
                    },
                    "user_id": 327910
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sara@farquharson.dev",
                        "full_name": "Sara Farquharson (she) (m6'20)",
                        "id": 327751
                    },
                    "user_id": 327751
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nikhil@nthomas.org",
                        "full_name": "Nikhil Thomas (he) (F1'20)",
                        "id": 327360
                    },
                    "user_id": 327360
                }
            ],
            "recipient_id": 20203,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "haskell type problem",
            "submessages": [],
            "timestamp": 1597418231,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/bfae6cfb52a5d20b01ee9d6a8c4d4490004b98ee?x=x&version=4",
            "client": "website",
            "content": "<p>I was at that talk <span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (he) (F1'16)</span> ! It was pretty intimidating to me because I didn't know anything about Haskell or functional programming (or list comprehensions or generators, etc) so I didn't expect to understand any of it, but your explanation was so fun and clear that, while I can't say I came away _understanding_ typed holes, by the end of your talk it felt like a thing I _could_ understand! So thank you <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 206941949,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                }
            ],
            "recipient_id": 20203,
            "sender_email": "sara@farquharson.dev",
            "sender_full_name": "Sara Farquharson (she) (m6'20)",
            "sender_id": 327751,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "haskell type problem",
            "submessages": [],
            "timestamp": 1597419210,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af3b40d3cbc970fd22c8cd0c466d9f1?d=identicon&version=1",
            "client": "website",
            "content": "<p>Kicking off the compiler OSS group with some links</p>\n<p><strong>LLVM</strong>: <a href=\"https://reviews.llvm.org/\">https://reviews.llvm.org/</a> and <a href=\"https://github.com/llvm/llvm-project\">https://github.com/llvm/llvm-project</a><br>\n<strong>Ocaml</strong>: <a href=\"https://github.com/ocaml/ocaml\">https://github.com/ocaml/ocaml</a><br>\n<strong>Rust</strong>: <a href=\"https://github.com/rust-lang/rust\">https://github.com/rust-lang/rust</a><br>\n<strong>Golang</strong>: <a href=\"https://github.com/golang/go/issues?q=is%3Aopen+is%3Aissue\">https://github.com/golang/go/issues?q=is%3Aopen+is%3Aissue</a><br>\n<strong>Typescript</strong>: <a href=\"https://github.com/microsoft/TypeScript\">https://github.com/microsoft/TypeScript</a><br>\n<strong>WASMtime</strong>: <a href=\"https://github.com/bytecodealliance/wasmtime\">https://github.com/bytecodealliance/wasmtime</a></p>\n<p>Helpful chat links: <br>\n<strong>Contributing to the Rust compiler</strong>: <a href=\"https://www.youtube.com/watch?v=KJ-V2BOtZnM\">https://www.youtube.com/watch?v=KJ-V2BOtZnM</a><br>\n<strong>Find Rust mentors</strong>: <a href=\"https://rustbeginners.github.io/awesome-rust-mentors/\">https://rustbeginners.github.io/awesome-rust-mentors/</a><br>\n<strong>rustc codegen via Cranelift</strong>: <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift\">https://github.com/bjorn3/rustc_codegen_cranelift</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207293151,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f980",
                    "emoji_name": "crab",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "grey@quietmisdreavus.net",
                        "full_name": "Victoria Mitchell (she) (F2'19)",
                        "id": 240569
                    },
                    "user_id": 240569
                }
            ],
            "recipient_id": 20203,
            "sender_email": "nikhil@nthomas.org",
            "sender_full_name": "Nikhil Thomas (he) (F1'20)",
            "sender_id": 327360,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Compiler OSS Group",
            "submessages": [],
            "timestamp": 1597773639,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af3b40d3cbc970fd22c8cd0c466d9f1?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"263533\">@Ifenna Ozoekwe-Awagu (he) (SP1'20)</span> <span class=\"user-mention\" data-user-id=\"301019\">@Ruijie Fang (he) (S1'20)</span> <span class=\"user-mention\" data-user-id=\"203533\">@Gargi Sharma (she/they) (SP1'19)</span> <span class=\"user-mention\" data-user-id=\"327388\">@Daniel McCrevan (he) (F1'20)</span></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207293178,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "nikhil@nthomas.org",
            "sender_full_name": "Nikhil Thomas (he) (F1'20)",
            "sender_id": 327360,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Compiler OSS Group",
            "submessages": [],
            "timestamp": 1597773654,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>After the oCaml &amp; Mirage workshop, I'm actually quite interested in working in the oCaml space. It'll be a good way to combine my learning in FP &amp; compilers. So if there is anyone who'd like to pair and look at some problems, I'd love to connect!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207436751,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Compiler OSS Group",
            "submessages": [],
            "timestamp": 1597857870,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/4ca492e9d3c12616bdd949e4acdd86eee90766a6?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>I'm not working on compilers stuff <span class=\"user-mention\" data-user-id=\"327388\">@Daniel McCrevan (he) (F1'20)</span> but getting better at ocaml is one of my goals for RC so I am down to pair!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207451542,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "dan@dmiller.dev",
            "sender_full_name": "Dan Miller (he) (F1'20)",
            "sender_id": 327414,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Compiler OSS Group",
            "submessages": [],
            "timestamp": 1597865431,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cb39f94599863e04806491a69f85ef199f380b0f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Sounds good, I was thinking of running through a few oCaml tutorials then figuring out what i'd like to work on next, either a project in oCaml or contributing back to the compiler</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207518340,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "danielmccrevan@gmail.com",
            "sender_full_name": "Daniel McCrevan (he) (F1'20)",
            "sender_id": 327388,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Compiler OSS Group",
            "submessages": [],
            "timestamp": 1597927968,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/052b3000f2489ccb2a411dea821d021a4c62f1e2?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>I write OCaml for a day job and would love to work on the compiler! I'm mostly free next week and in CEST time zone!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207527747,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "ruijief@princeton.edu",
                        "full_name": "Ruijie Fang (he) (S1'20)",
                        "id": 301019
                    },
                    "user_id": 301019
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "stanley@zheng.nyc",
                        "full_name": "Stanley Zheng (they) (W1'19)",
                        "id": 100315
                    },
                    "user_id": 100315
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nikhil@nthomas.org",
                        "full_name": "Nikhil Thomas (he) (F1'20)",
                        "id": 327360
                    },
                    "user_id": 327360
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "danielmccrevan@gmail.com",
                        "full_name": "Daniel McCrevan (he) (F1'20)",
                        "id": 327388
                    },
                    "user_id": 327388
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "dan@dmiller.dev",
                        "full_name": "Dan Miller (he) (F1'20)",
                        "id": 327414
                    },
                    "user_id": 327414
                },
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jpholzmann@gmail.com",
                        "full_name": "Justin Holzmann (he) (S2'20)",
                        "id": 315058
                    },
                    "user_id": 315058
                }
            ],
            "recipient_id": 20203,
            "sender_email": "gs051095@gmail.com",
            "sender_full_name": "Gargi Sharma (she/they) (SP1'19)",
            "sender_id": 203533,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Compiler OSS Group",
            "submessages": [],
            "timestamp": 1597933512,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7af3b40d3cbc970fd22c8cd0c466d9f1?d=identicon&version=1",
            "client": "website",
            "content": "<p>I know there's a weekly calendar meeting but idk it makes sense. How do y'all feel about keeping it async over zulip and just letting people find projects and pair?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 207994255,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "nikhil@nthomas.org",
            "sender_full_name": "Nikhil Thomas (he) (F1'20)",
            "sender_id": 327360,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Compiler OSS Group",
            "submessages": [],
            "timestamp": 1598376725,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>A few months ago one of my coworkers and I implemented a coffeebot program for my work. It's been a big hit and we're planning on releasing it open source this week with setup directions in case anyone else is interested in using it.</p>\n<p>Because of this, I'm wondering what best practices are for maintaining a public open source version of the repo, and also a private closed source \"development\" version of the repo. We're not planning on accepting PRs or feature requests to the public version (ie, not planning on maintaining it really) but if we develop any changes to our internal version we might want to push them out later. This seems like it's probably a not unusual setup.</p>\n<p>Anyone have advice for what best practices workflows are for this kind of situation, or what things to keep in mind? One example is it just occurred to me that I should add a license, which I hadn't done before because internally it didn't matter. </p>\n<p>I think in this specific case it doesn't much matter because it's a tiny project that we plan to update infrequently, though I am interested in general what some workflows for this kind of setup are.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208037575,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "open + closed source workflow",
            "submessages": [],
            "timestamp": 1598398627,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>It seems like the easiest answer is \"add the public repo as a second remote and push to it\"</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208037606,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "recurse@ardent.nebcorp.com",
                        "full_name": "Joe Ardent (he) (SP1'17)",
                        "id": 9097
                    },
                    "user_id": 9097
                }
            ],
            "recipient_id": 20203,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "open + closed source workflow",
            "submessages": [],
            "timestamp": 1598398664,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"9502\">Annie Cherkaev (she/they) (m4'18)</span> <a href=\"#narrow/stream/18957-programming/topic/open.20.2B.20closed.20source.20workflow/near/208037606\">said</a>:</p>\n<blockquote>\n<p>It seems like the easiest answer is \"add the public repo as a second remote and push to it\"</p>\n</blockquote>\n<p>You might need to make sure that you don't push all the branches or even the full history of the branch if it contains everything that came before it</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208039689,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "open + closed source workflow",
            "submessages": [],
            "timestamp": 1598400447,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"9097\">@Joe Ardent (he) (SP1'17)</span> Do you mind expanding a bit on that-- why do I need to not push all the branches / the full history of the branch?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208040912,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "open + closed source workflow",
            "submessages": [],
            "timestamp": 1598401622,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a4e1f602882ac013a0e19b85c17366e4256f3fe3?x=x&version=2",
            "client": "website",
            "content": "<p>I'm not Joe ( <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> ) but it's often recommended to truncate your git history so that the public version of your repo doesn't include any commit data from before you made the decision to open-source it. When committing to a private repo, folks are more likely to do things like: commit keys or other secret files to git; include not-super-professional commit messages; reference private company data; etc. It's often easiest / safest to avoid the risk of anything like that by preventing yourself from publishing the full history.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208045265,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "bonnie.eisenman@gmail.com",
            "sender_full_name": "Bonnie Eisenman (she) (m5'20)",
            "sender_id": 105050,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "open + closed source workflow",
            "submessages": [],
            "timestamp": 1598406723,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah, thanks for the explanation <span class=\"user-mention\" data-user-id=\"105050\">@Bonnie Eisenman (she) (m5'20)</span> ! That makes sense. (And this is exactly the kind of advice I'm looking for!)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208046985,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "open + closed source workflow",
            "submessages": [],
            "timestamp": 1598408739,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/afcff71a280c619fe7f45af5df2f66b9617479fc?x=x&version=4",
            "client": "website",
            "content": "<p>Seconding what <span class=\"user-mention\" data-user-id=\"105050\">@Bonnie Eisenman (she) (m5'20)</span> said. </p>\n<p>In that case consider that the private repo history and public repo history will always be different (e.g. if one squashes commits or truncates history before pushing to \"public\"). So, as far as git is concerned they might as well be entirely different codebases. </p>\n<p>Thus one can decide to treat them as such - different codebases. One could fork the private repo, sanitize the history (<code>git filter-branch</code> etc.), add license and publish it. Then, send contributions from private-to-public via patches (format-patch / add-patch). This will  also lend itself to better audit of what is pushed to public (review patch prior to publishing). Why? Because, it's likely several commits go to private, and then at some point when time permits, someone will want to contribute the changes to public. If it's easy to just git push to public,  then it will all get git pushed to public. If there's a patch review process, it will be harder to accidentally publish mistakes or secrets etc.</p>\n<p>[edit] re: sanitising a repo: I just found <a href=\"https://rtyley.github.io/bfg-repo-cleaner/\">https://rtyley.github.io/bfg-repo-cleaner/</a> and realised well of course there must be some way to automate repo cleaning (I've never used it, just sharing to suggest automation for what is a very tedious task).</p>\n<p>Re: licensing you might want to talk to legal at your company, about the ones that are acceptable for private/public use case. They may already have an approved list. </p>\n<p>If there's no policy, I usually pick either MIT (no commercial interest, and no impingement on anyones private IP) or EPL v2.0 (potential commercial interest,  without impinging on private IP, with an <a href=\"https://www.eclipse.org/legal/epl-2.0/faq.php#epl-secondary\">option to sublicense</a> if needed).</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208052404,
            "is_me_message": false,
            "last_edit_timestamp": 1598421728,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "aditya.athalye@gmail.com",
            "sender_full_name": "Aditya Athalye (he) (SP1'20)",
            "sender_id": 263547,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "open + closed source workflow",
            "submessages": [],
            "timestamp": 1598416812,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/a4e1f602882ac013a0e19b85c17366e4256f3fe3?x=x&version=2",
            "client": "website",
            "content": "<p>Glad that helps! <span aria-label=\"smiling face\" class=\"emoji emoji-263a\" role=\"img\" title=\"smiling face\">:smiling_face:</span>\ufe0f</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208088701,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "bonnie.eisenman@gmail.com",
            "sender_full_name": "Bonnie Eisenman (she) (m5'20)",
            "sender_id": 105050,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "open + closed source workflow",
            "submessages": [],
            "timestamp": 1598447601,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2ce71a96d529311d42a8a041471b31f9?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>A few of quick/easy suggestions:</p>\n<ul>\n<li>If you're using Github/Gitlab, you can disable all the features on the project you don't plan to use (in project settings).</li>\n<li>Add a note near the top of the README with your intentions for this repo, specifically that you don't plan to accept up-stream PRs and that people are welcome to maintain forks if they'd like to work on it. Or something like \"bugfix PRs are appreciated but we're not merging new features at this time, please maintain a fork for that.\" This is totally okay as long as the community doesn't feel misled about it.</li>\n<li>When in doubt, use the MIT license (by far the most popular license, everyone is familiar with it, easy to understand, included in all corporate OSS policies, best for most adoption). When not in doubt, use whatever license is most appropriate. :)</li>\n<li>Open sourcing is a great time to rotate any private keys that the project uses or has used at any point. This way you don't need to worry about past history as much, and a good security practice.</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208101146,
            "is_me_message": false,
            "last_edit_timestamp": 1598453254,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "rprior@protonmail.com",
                        "full_name": "Ryan Prior (he) (F1'19)",
                        "id": 234256
                    },
                    "user_id": 234256
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "bonnie.eisenman@gmail.com",
                        "full_name": "Bonnie Eisenman (she) (m5'20)",
                        "id": 105050
                    },
                    "user_id": 105050
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "aditya.athalye@gmail.com",
                        "full_name": "Aditya Athalye (he) (SP1'20)",
                        "id": 263547
                    },
                    "user_id": 263547
                }
            ],
            "recipient_id": 20203,
            "sender_email": "andrey.petrov@shazow.net",
            "sender_full_name": "Andrey Petrov (he) (F1'20)",
            "sender_id": 327980,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "open + closed source workflow",
            "submessages": [],
            "timestamp": 1598453219,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>Hey, sorry for not getting back to you sooner, Annie! But basically, Bonnie and Aditya pretty much covered it. My assumption was that your fun project started life in a \"more serious\" repo, like something related to your company's business in a way that would cause upset if its secrets were laid bare, and it's very easy to accidentally push more data out in git than you wanted.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208112210,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "open + closed source workflow",
            "submessages": [],
            "timestamp": 1598457968,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>This is great, thanks all for the advice!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208125376,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "open + closed source workflow",
            "submessages": [],
            "timestamp": 1598464566,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/0a35beaf5a354dafdf10494c0313e10fffc154fd?x=x&version=1",
            "client": "website",
            "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> hey folks, some v knowledgeable ppl at my work are doing a livestream today about how to roll out dev tools to a whole team! (Basically, you've found a great tool: now how to do you get people to actually use it?) It's TODAY (Thurs) 3PM EST/12PM PST, join us! <a href=\"https://www.youtube.com/watch?v=JarOoGXcTqU&amp;feature=youtu.be\">https://www.youtube.com/watch?v=JarOoGXcTqU&amp;feature=youtu.be</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"JarOoGXcTqU\" href=\"https://www.youtube.com/watch?v=JarOoGXcTqU&amp;feature=youtu.be\"><img src=\"https://i.ytimg.com/vi/JarOoGXcTqU/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208251760,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "maia.mcc@gmail.com",
            "sender_full_name": "Maia McCormick (she) (S2'14)",
            "sender_id": 6175,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Talk TODAY on Dev Tool Rollout to your team",
            "submessages": [],
            "timestamp": 1598550493,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f59b1bd52e790e176d04d3610ea3ada8?d=identicon&version=1",
            "client": "website",
            "content": "<p>tl;dr:  Do standard IDEs provide some simple way to jump to a function's definition (and just as easily jump back)?   ...does vim maybe have some sort of ability to do this that I'm unaware of?</p>\n<p>Long winded question:  I've developed a years-deep habit of using folds in my code (via vim's fold tags: <code>{{{</code> and <code>}}}</code>), and I've seen random posts on the internet saying \"that's evil omg don't use folds\", and that you should use functions instead (which I've ignored so far, because I mostly write code for personal projects that don't see the light of day).  I was just thinking about this, and realized I'm pretty much completely oblivious to how people go about navigating their code if they use functions, and I'm curious how that works.</p>\n<p>Let's say I have some code like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>if conditionP\n     doThingA (lots of lines of code)\nelse\n     if conditionQ\n          doThingB (a toooooon of code)\n     else\n          doThingC (also a bunch of lines)\n</code></pre></div>\n\n\n<p>If I didn't use functions or folding tags in this case, it'd be hard to get a sense of the overall logic involving conditions P and Q, since there'd be so much space between their if and else statements.</p>\n<p>What I generally do is wrap chunks A B and C in folds; then I can see the overall logic, and if I want to look at or change things A B or C I can expand and close them by hitting \"zj\"/\"zk\" to jump to the fold and then \"za\" to open it (I'm using vim, with no plugins, and I'm far from an expert with it).  If I replaced those folded code chunks with function calls, then if I wanted to look at or change the code I'd have to find that function's definition, which I generally do by either splitting my screen with \":vs\", or if it's in a seperate file then opening that file with \":tabnew\" (or jumping to it with \"gt\"), then search for the name with \"/\".  Typing \"gt /myFunctionName\" isn't that difficult, but it's not as easy and simple as hitting \"zjza\", and since I'm super lazy I've found it easier to stick with folds.</p>\n<p>Do standard IDEs provide some simple way to jump to a function's definition (and just as easily jump back)?   ...does vim maybe have some sort of ability to do this that I'm unaware of that's more elegant than \"open new file; search function's name\", so it's as easy to see the code in a function as it is to expand and close a fold?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208390900,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "adeshar00@gmail.com",
            "sender_full_name": "Andrew Desharnais (he) (W1'20)",
            "sender_id": 8863,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "How do people usually navigate code?",
            "submessages": [],
            "timestamp": 1598646114,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>tl;dr: Do standard IDEs provide some simple way to jump to a function's definition (and just as easily jump back)? ...does vim maybe have some sort of ability to do this that I'm unaware of?</p>\n</blockquote>\n<p>With vim, you have ctags and similar. When a tag file exists, Ctrl+] jumps to the definition of the word under the cursor, ctrl+t jumps back.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208392019,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "How do people usually navigate code?",
            "submessages": [],
            "timestamp": 1598646766,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>Long winded question: I've developed a years-deep habit of using folds in my code (via vim's fold tags: {{{ and }}}), and I've seen random posts on the internet saying \"that's evil omg don't use folds\", and that you should use functions instead (which I've ignored so far, because I mostly write code for personal projects that don't see the light of day)</p>\n</blockquote>\n<p>It's interesting seeing different people's approaches -- I tend to just use split opens, and  have the same file open 2 or 3 times, referring to different sections at the same time. Folds hide too much for my taste, and short functions just make me bounce everywhere -- I find \"meaty\" functions easier to read, because things just happen step by step, and I can follow them.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208392061,
            "is_me_message": false,
            "last_edit_timestamp": 1598646870,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "How do people usually navigate code?",
            "submessages": [],
            "timestamp": 1598646799,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1bd49962ff0f7e7f3ee603f8243a1015bb6690bd?x=x&version=7",
            "client": "website",
            "content": "<p>This might not apply 100% to vim, but in my current setup in Emacs-with-Vim-keybindings, the LSP integration package enriches <code>gd</code> to more reliably go-to-definition. <code>ctrl-o</code> works to \"return to previous position before gd\"</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208392957,
            "is_me_message": false,
            "last_edit_timestamp": 1598647401,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "talyian@gmail.com",
            "sender_full_name": "Jimmy Tang (he) (SP2'20)",
            "sender_id": 276140,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "How do people usually navigate code?",
            "submessages": [],
            "timestamp": 1598647377,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>ooh, interesting. I've just been using the bindings for xref-go-to-def (<code>alt-.</code>) and <code>pop-tag</code> (I need to get better about using bindings)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208394373,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "How do people usually navigate code?",
            "submessages": [],
            "timestamp": 1598648313,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f59b1bd52e790e176d04d3610ea3ada8?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>Folds hide too much for my taste, and short functions just make me bounce everywhere -- I find \"meaty\" functions easier to read, because things just happen step by step, and I can follow them.</p>\n</blockquote>\n<p>Yeah I personally find short functions where you're bouncing all over the place hard to read; maybe it's one of those things you get used to the more you do it, but any time I read code organized that way it distracts me from concentrating on what exactly the code is doing</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208395531,
            "is_me_message": false,
            "last_edit_timestamp": 1598649155,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "adeshar00@gmail.com",
            "sender_full_name": "Andrew Desharnais (he) (W1'20)",
            "sender_id": 8863,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "How do people usually navigate code?",
            "submessages": [],
            "timestamp": 1598649143,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f59b1bd52e790e176d04d3610ea3ada8?d=identicon&version=1",
            "client": "website",
            "content": "<p>And cooool I never new about <code>gd</code>!  I just tried it in vim and it works, that's really neat!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208395587,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "adeshar00@gmail.com",
            "sender_full_name": "Andrew Desharnais (he) (W1'20)",
            "sender_id": 8863,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "How do people usually navigate code?",
            "submessages": [],
            "timestamp": 1598649207,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f3e838bb3578a1bfb7d808f17602e4456f954f4f?x=x&version=3",
            "client": "website",
            "content": "<p>Interesting subject to compare notes on. I probably navigate code far too manually, but I do use a combo a search, tags, etc., to jump around. Tags are awesome though, and well worth the effort to get working. (I'm also a (neo)vim user.)<br>\nI hate folds with an unreasonable passion, and aggressively disable folds in every plugin. I do tend towards very short functions, so I'm going to refactoring the function long before I want to fold within a function. (Tfw a function has grown to three ideas on six lines and you can't bear to look at it anymore.) I guess I like code that can be read without following control flow, and tend to think in terms of expression substitution instead. When I think of \"meaty\" things to read I'm thinking at the level of a module or class or something larger than a function. I'm kind of stereotyping myself here, it does depend on the language and what I'm doing. (And I've certainly messed up and written code where you're forced to follow control flow through long chains of functions.)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208422063,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "adam@cthulahoops.org",
            "sender_full_name": "Adam Kelly (they/he) (S1'20)",
            "sender_id": 301014,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "How do people usually navigate code?",
            "submessages": [],
            "timestamp": 1598686607,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/bfae6cfb52a5d20b01ee9d6a8c4d4490004b98ee?x=x&version=4",
            "client": "ZulipMobile",
            "content": "<p>Most of my professional coding has been in Jetbrains IDEs, and I make heavy use of the jump-to-definition (cmd+B) and jump forward/back (cmd+]/cmd+[) when navigating code. I find that when I\u2019m trying to read code on github or whatever I really miss these navigation options, as they\u2019re integral to how I learn/debug new or large codebases.</p>\n<p>I often work with legacy code that may have 200-line functions and 2000-line classes, or deep levels of inheritance or abstraction, so being able to navigate quickly is a life saver!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208445912,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2795",
                    "emoji_name": "plus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "anna.leuchtenberger@gmail.com",
                        "full_name": "Anna Dunne Leuchtenberger (she/they) (F2'19)",
                        "id": 226663
                    },
                    "user_id": 226663
                },
                {
                    "emoji_code": "2795",
                    "emoji_name": "plus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "roland@rolandcrosby.com",
                        "full_name": "Roland Crosby (he) (SP2'20)",
                        "id": 276197
                    },
                    "user_id": 276197
                }
            ],
            "recipient_id": 20203,
            "sender_email": "sara@farquharson.dev",
            "sender_full_name": "Sara Farquharson (she) (m6'20)",
            "sender_id": 327751,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "How do people usually navigate code?",
            "submessages": [],
            "timestamp": 1598723756,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/097edbae0d41f8a5149c6ada6fd5c4941e572159?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>When I work in smaller (usually functional) code bases where most functions fit on a single screen, I do use jump-to-definition a lot. In codebases with huge procedures and classes, I usually lean more heavily on searching. I use <code>ripgrep</code> and Emacs <code>occur</code> often for that.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208564801,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "rprior@protonmail.com",
            "sender_full_name": "Ryan Prior (he) (F1'19)",
            "sender_id": 234256,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "How do people usually navigate code?",
            "submessages": [],
            "timestamp": 1598884467,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2ce71a96d529311d42a8a041471b31f9?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I switched all the languages I code in (go, js, python) to using language server (LSP) implementations with (neo)vim and it has been great. Much better than the ctags experience before. I definitely <code>go-to-definition</code> a lot.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208570512,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "andrey.petrov@shazow.net",
            "sender_full_name": "Andrey Petrov (he) (F1'20)",
            "sender_id": 327980,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "How do people usually navigate code?",
            "submessages": [],
            "timestamp": 1598886753,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/21552be5ed82525977defa85e528092813d584ba?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>Ditto on using a jump-to-definition feature a lot, in a variety of editors or ide's.</p>\n<p>Another thing I've found indispensable is a way to open a file with some sort of fuzzy name search. So if a file's path in a project was <code>foo/bar/something.baz</code> I'd just type a subset of the characters like <code>fobsom</code>.</p>\n<p>Both vim and emacs have plugins for this and intellij has it built in. With a keyboard shortcut it ends up being waaaay faster than trying to navigate a tree view</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 208960972,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "tamreenkhan@gmail.com",
            "sender_full_name": "Tamreen Khan (he) (SP1'20)",
            "sender_id": 263714,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "How do people usually navigate code?",
            "submessages": [],
            "timestamp": 1599137294,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/c21944a6a1d816666759e8c37fbdff15441a590b?x=x&version=1",
            "client": "website",
            "content": "<p>I'm wondering where a natural theory or model exists for a parsing task I'm working on.</p>\n<p>At my job we are creating a new declarative DSL for defining certain data transformations in our flagship application, as a sub-element of our existing Json configuration files. Up until this point our configuration files have been mostly flat and translatable directly into data structures from the shape of the Json, but this DSL is more complex and context-sensitive. Since this is only a configuration file parsed at startup, performance is not a concern.</p>\n<p>We've already used a generic Json parser to consume the initial text, ensuring up front that we at least have valid Json in a tree representation, like:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">PlainJson</span> <span class=\"o\">=</span>\n<span class=\"o\">|</span> <span class=\"n\">JsonRecord</span> <span class=\"k\">of</span> <span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"kt\">string</span><span class=\"o\">,</span><span class=\"n\">PlainJson</span><span class=\"o\">&gt;</span>\n<span class=\"o\">|</span> <span class=\"n\">JsonArray</span> <span class=\"k\">of</span> <span class=\"kt\">list</span><span class=\"o\">&lt;</span><span class=\"n\">PlainJson</span><span class=\"o\">&gt;</span>\n<span class=\"o\">|</span> <span class=\"n\">JsonString</span> <span class=\"k\">of</span> <span class=\"kt\">string</span>\n<span class=\"c1\">// ...</span>\n</code></pre></div>\n\n\n<p>And the current approach is to build the parser out of functions roughly of the type:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">JsonParser</span><span class=\"o\">&lt;</span><span class=\"k\">&#39;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"n\">PlainJson</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Result</span><span class=\"o\">&lt;</span><span class=\"k\">&#39;</span><span class=\"n\">T</span><span class=\"o\">,</span><span class=\"n\">ParseError</span><span class=\"o\">&gt;</span>\n</code></pre></div>\n\n\n<p>There are some easy cases, where we can use standard approaches for parsing algebraic data types. When parsing discriminated unions from Json, where each variant contains no internal structure, like:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">FlatUnion</span>\n<span class=\"o\">|</span> <span class=\"n\">Case1</span>\n<span class=\"o\">|</span> <span class=\"n\">Case2</span>\n<span class=\"o\">|</span> <span class=\"n\">Case3</span>\n</code></pre></div>\n\n\n<p>valid Json values would simply be <code>\"Case1\"</code>, <code>\"Case2\"</code>, or <code>\"Case3\"</code>.</p>\n<p>But for union types with internal structure:</p>\n<div class=\"codehilite\"><pre><span></span><code>type SomeDomainObject =\n| Simple of string\n| Complex of {| A : string; B : SomeOtherDomainObject |}\n\nand SomeOtherDomainObject =\n| Branch of {| C : string; D : list&lt;SomeDomainObject&gt; |}\n| Leaf of {| E : string; F : int |}\n</code></pre></div>\n\n\n<p>the traditional approach for defining a Json representation, or generating one using common reflection-based tools, looks something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>{&quot;tag&quot;: &quot;Simple&quot;\n &quot;value&quot;: &quot;something&quot; }\n--&gt; Simple &quot;something&quot;\n\n{&quot;tag&quot;: &quot;Complex&quot;\n &quot;value&quot;: {&quot;A&quot;: &quot;something&quot;,\n           &quot;B&quot;: {&quot;tag&quot;: &quot;Branch&quot;,\n                 &quot;value&quot;: {&quot;C&quot;: &quot;something&quot;,\n                           &quot;D&quot;: [] } } } }\n--&gt; Complex {| A = &quot;something&quot;\n               B = Branch {| C = &quot;something&quot;\n                             D = [] |} |}\n</code></pre></div>\n\n\n<p>Or, when the type of a variant is a record, and the name \"tag\" doesn't clash with any record label, a somewhat more terse allowable representation:</p>\n<div class=\"codehilite\"><pre><span></span><code>{&quot;tag&quot;: &quot;Complex&quot;\n &quot;A&quot;: &quot;something&quot;,\n &quot;B&quot;: {&quot;tag&quot;: &quot;Branch&quot;,\n       &quot;C&quot;: &quot;something&quot;,\n       &quot;D&quot;: [] } }\n</code></pre></div>\n\n\n<p>This is still unwieldy for Json that is meant to be human-readable and human-editable and that may nest several levels deep. We would prefer a representation like:</p>\n<div class=\"codehilite\"><pre><span></span><code>&quot;something&quot;\n\n{&quot;A&quot;: &quot;something&quot;,\n &quot;B&quot;: { &quot;C&quot;: &quot;something&quot;,\n        &quot;D&quot;: []} }\n</code></pre></div>\n\n\n<p>which is easy enough to use if the error messages are informative enough.</p>\n<p>When writing a traditional parser that transforms a flat sequence of characters all the way into an abstract syntax tree, error aggregation is difficult. Typically, you would pipe the error from the most specific subrule that failed all the way up to the top level, and not continue parsing, unless an ordered choice operator catches the failure and continues on to another possible choice that succeeds. During execution, caching of errors may be helpful (e.g. in a packrat/OMeta style parser), but if all possible choices fail, it's usually not helpful to return detailed descriptions of errors that occurred among every alternative that was tried at every node.</p>\n<p>But when something has already been pre-parsed as valid Json, the class of possible remaining syntax errors is much more limited and higher-level, and can more naturally be returned as a tree structure recursively describing all errors for each possible alternative.</p>\n<p>Coming up with an appropriate representation of a tree of errors is tricky, but currently looks something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">ParseErrorNode</span> <span class=\"o\">=</span>\n    <span class=\"o\">{</span> <span class=\"n\">Errors</span> <span class=\"o\">:</span> <span class=\"kt\">list</span><span class=\"o\">&lt;</span><span class=\"kt\">string</span><span class=\"o\">&gt;</span> <span class=\"c1\">// errors that occur difsharp within a rule</span>\n      <span class=\"n\">ChildErrors</span> <span class=\"o\">:</span> <span class=\"kt\">list</span><span class=\"o\">&lt;</span><span class=\"kt\">string</span><span class=\"o\">*</span><span class=\"n\">ParseError</span><span class=\"o\">&gt;</span> <span class=\"c1\">// errors that occur within subrules, as for a record</span>\n <span class=\"o\">}</span>\n\n<span class=\"ow\">and</span> <span class=\"n\">ParseError</span> <span class=\"o\">=</span>\n    <span class=\"o\">|</span> <span class=\"n\">ErrorNode</span> <span class=\"k\">of</span> <span class=\"n\">ParseErrorNode</span>\n    <span class=\"o\">|</span> <span class=\"n\">ParallelErrors</span> <span class=\"k\">of</span> <span class=\"kt\">list</span><span class=\"o\">&lt;</span><span class=\"kt\">string</span><span class=\"o\">*</span><span class=\"n\">ParseError</span><span class=\"o\">&gt;</span> <span class=\"c1\">// when an ordered choice operator fails to parse any alternative, return the error description tree for each alternative</span>\n</code></pre></div>\n\n\n<p>So a discriminated union parser would be defined using an ordered-choice operator, which returns the first successful variant parsed, or returns a description of how each of the possible branches failed to parse, e.g. <code>ParallelErrors [(\"Simple\", ...); (\"Complex\", ...)]</code>.<br>\n Other kinds of parsers would generally be built out of deterministic combinators. For a record type, if the value being parsed is not a Json record, you would get <code>ErrorNode { Errors = [\"Expected Json record, got Json string\"]; ChildErrors = [] }</code>.<br>\nIf a record type with fields A and B encountered errors in its subparsers for both A and B, it would return <code>ErrorNode (Errors = []; ChildErrors = [(\"A\", ...); (\"B\", ...)])</code>.</p>\n<p>It feels like there should be a way to naturally extend the approach of parser combinators to transform semi-structured tree data into a more fully-structured AST in this way, taking full advantage of the existing structure. Are there any good resources on this problem?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209005096,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "kyle.littler@gmail.com",
            "sender_full_name": "Kyle Littler (F'13)",
            "sender_id": 2857,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Parsing already-tree-structured data into full ASTs",
            "submessages": [],
            "timestamp": 1599155268,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1bd49962ff0f7e7f3ee603f8243a1015bb6690bd?x=x&version=7",
            "client": "website",
            "content": "<p>Hi Kyle, I've bumped into a similar shape of issue several times in F#, and the results are only halfway satisfying because of missing higher-kinded types in generics. What I was trying to achieve was something similar to recursion schemes, where the type becomes recursive and you can then augment it , for example by tagging particular cases with error messages.  </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">// This doesn&#39;t compile in F#, because we can&#39;t use the &#39;M type parameter as a parameterized type</span>\n<span class=\"k\">type</span> <span class=\"nc\">DomainObjectT</span><span class=\"o\">&lt;</span><span class=\"k\">&#39;</span><span class=\"n\">M</span><span class=\"o\">&gt;=</span>\n    <span class=\"o\">|</span> <span class=\"n\">Simple</span> <span class=\"k\">of</span> <span class=\"kt\">string</span>\n    <span class=\"o\">|</span> <span class=\"n\">Complex</span> <span class=\"k\">of</span> <span class=\"o\">{|</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">string</span><span class=\"o\">;</span> <span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">OtherObjectT</span> <span class=\"k\">&#39;</span><span class=\"n\">M</span><span class=\"o\">|}</span>\n<span class=\"k\">type</span> <span class=\"nc\">OtherObjectT</span><span class=\"o\">&lt;</span><span class=\"k\">&#39;</span><span class=\"n\">M</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span>\n    <span class=\"o\">|</span> <span class=\"n\">Branch</span> <span class=\"k\">of</span> <span class=\"o\">{|</span><span class=\"n\">C</span><span class=\"o\">:</span><span class=\"kt\">string</span><span class=\"o\">;</span> <span class=\"n\">D</span><span class=\"o\">:</span> <span class=\"n\">DomainObjectT</span> <span class=\"k\">&#39;</span><span class=\"n\">M</span><span class=\"o\">|}</span>\n    <span class=\"o\">|</span> <span class=\"n\">Leaf</span> <span class=\"k\">of</span> <span class=\"o\">{|</span><span class=\"n\">E</span><span class=\"o\">:</span><span class=\"kt\">string</span><span class=\"o\">;</span> <span class=\"n\">F</span><span class=\"o\">:</span><span class=\"n\">int</span><span class=\"o\">|}</span>\n<span class=\"c1\">// then this would be fairly nice client code</span>\n<span class=\"k\">type</span> <span class=\"nc\">Identity</span><span class=\"o\">&lt;</span><span class=\"k\">&#39;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"k\">&#39;</span><span class=\"n\">T</span>\n<span class=\"k\">type</span> <span class=\"nc\">StringErrResult</span><span class=\"o\">&lt;</span><span class=\"k\">&#39;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"n\">Result</span><span class=\"o\">&lt;</span><span class=\"k\">&#39;</span><span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"kt\">string</span><span class=\"o\">&gt;</span>\n<span class=\"k\">type</span> <span class=\"nc\">DomainObjectWithErrors</span> <span class=\"o\">=</span> <span class=\"n\">StringErrResult</span> <span class=\"n\">DomainObjectT</span>\n<span class=\"k\">type</span> <span class=\"nc\">DomainObjectPlain</span> <span class=\"o\">=</span> <span class=\"n\">Identity</span> <span class=\"n\">DomainObjectT</span>\n</code></pre></div>\n\n\n<p>But outside of that higher-kinded-types fantasy, I additionally had a problem in that F# type aliases can't be recursive, so I had to wrap it in a <code>newtype</code> of sorts with a single-case union. This makes the resulting code noisier than necessary. However, with that wrapper in place, and giving up some generality, you can kind of make your own adhoc instance of the recursive type here:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">DomainObjectT</span><span class=\"o\">&lt;</span><span class=\"k\">&#39;</span><span class=\"n\">Other</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span>\n    <span class=\"o\">|</span> <span class=\"n\">Simple</span> <span class=\"k\">of</span> <span class=\"kt\">string</span>\n    <span class=\"o\">|</span> <span class=\"n\">Complex</span> <span class=\"k\">of</span> <span class=\"o\">{|</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">string</span><span class=\"o\">;</span> <span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"k\">&#39;</span><span class=\"n\">Other</span><span class=\"o\">|}</span>\n<span class=\"k\">type</span> <span class=\"nc\">OtherObjectT</span><span class=\"o\">&lt;</span><span class=\"k\">&#39;</span><span class=\"n\">Domain</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span>\n    <span class=\"o\">|</span> <span class=\"n\">Branch</span> <span class=\"k\">of</span> <span class=\"o\">{|</span><span class=\"n\">C</span><span class=\"o\">:</span><span class=\"kt\">string</span><span class=\"o\">;</span> <span class=\"n\">D</span><span class=\"o\">:</span> <span class=\"k\">&#39;</span><span class=\"n\">Domain</span><span class=\"o\">|}</span>\n    <span class=\"o\">|</span> <span class=\"n\">Leaf</span> <span class=\"k\">of</span> <span class=\"o\">{|</span><span class=\"n\">E</span><span class=\"o\">:</span><span class=\"kt\">string</span><span class=\"o\">;</span> <span class=\"n\">F</span><span class=\"o\">:</span><span class=\"n\">int</span><span class=\"o\">|}</span>\n\n<span class=\"c1\">// Plain.DomainObjects are free of errors</span>\n<span class=\"k\">module</span> <span class=\"nn\">Plain</span> <span class=\"o\">=</span>\n  <span class=\"k\">type</span> <span class=\"nc\">DomainObject</span> <span class=\"o\">=</span> <span class=\"n\">D</span> <span class=\"k\">of</span> <span class=\"n\">DomainObjectT</span><span class=\"o\">&lt;</span><span class=\"n\">OtherObject</span><span class=\"o\">&gt;</span>\n  <span class=\"ow\">and</span> <span class=\"n\">OtherObject</span> <span class=\"o\">=</span> <span class=\"n\">O</span> <span class=\"k\">of</span> <span class=\"n\">OtherObjectT</span><span class=\"o\">&lt;</span><span class=\"n\">DomainObject</span><span class=\"o\">&gt;</span>\n\n<span class=\"c1\">// WithErrors.DomainObjects can have embedded errors</span>\n<span class=\"k\">module</span> <span class=\"nn\">WithErrors</span> <span class=\"o\">=</span>\n  <span class=\"k\">type</span> <span class=\"nc\">DomainObject</span> <span class=\"o\">=</span> <span class=\"n\">D</span> <span class=\"k\">of</span> <span class=\"n\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">DomainObjectT</span><span class=\"o\">&lt;</span><span class=\"n\">OtherObject</span><span class=\"o\">&gt;,</span> <span class=\"kt\">string</span><span class=\"o\">&gt;</span>\n  <span class=\"ow\">and</span> <span class=\"n\">OtherObject</span> <span class=\"o\">=</span> <span class=\"n\">O</span> <span class=\"k\">of</span> <span class=\"n\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">OtherObjectT</span><span class=\"o\">&lt;</span><span class=\"n\">DomainObject</span><span class=\"o\">&gt;,</span> <span class=\"kt\">string</span><span class=\"o\">&gt;</span>\n</code></pre></div>\n\n\n<p>So how is this useful? Well, for this example I'd guess the parser would be written to produce <code>WithErrors.DomainObject</code>s. Any parse error can locally generate an <code>Error \"message\"</code> that gets stored in the appropriate place in the tree. Then you have a transformer from WithErrors.DomainObject to Plain.DomainObject that can simultaneously extract the errors with their path as well as the plain object if no error occurred.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">open</span> <span class=\"nn\">WithErrors</span>\n  <span class=\"c1\">// collect_errors_domain :: path:string -&gt; errors: string list -&gt; input:WithErrors.DomainObject -&gt; Plain.DomainObject</span>\n  <span class=\"k\">let</span> <span class=\"nv\">rec</span> <span class=\"n\">collect_errors_domain</span> <span class=\"n\">path</span> <span class=\"n\">errors</span> <span class=\"o\">=</span> <span class=\"k\">function</span>\n      <span class=\"o\">|</span> <span class=\"n\">D</span><span class=\"o\">(</span><span class=\"n\">Error</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Error</span> <span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"o\">::</span> <span class=\"n\">errors</span><span class=\"o\">)</span>\n      <span class=\"o\">|</span> <span class=\"n\">D</span><span class=\"o\">(</span><span class=\"n\">Ok</span><span class=\"o\">(</span><span class=\"n\">Simple</span> <span class=\"n\">simple</span><span class=\"o\">))</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Ok</span> <span class=\"o\">(</span><span class=\"nn\">Plain</span><span class=\"p\">.</span><span class=\"n\">D</span><span class=\"o\">(</span><span class=\"n\">Simple</span> <span class=\"n\">simple</span><span class=\"o\">))</span>\n      <span class=\"o\">|</span> <span class=\"n\">D</span><span class=\"o\">(</span><span class=\"n\">Ok</span><span class=\"o\">(</span><span class=\"n\">Complex</span> <span class=\"n\">complex</span><span class=\"o\">))</span> <span class=\"o\">-&gt;</span>\n          <span class=\"n\">collect_errors_other</span> <span class=\"o\">(</span><span class=\"n\">path</span> <span class=\"o\">+</span> <span class=\"s\">&quot;.Complex.B&quot;</span><span class=\"o\">)</span> <span class=\"n\">errors</span> <span class=\"n\">complex</span><span class=\"o\">.</span><span class=\"n\">B</span>\n          <span class=\"o\">|&gt;</span> <span class=\"nn\">Result</span><span class=\"p\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"o\">-&gt;</span> <span class=\"nn\">Plain</span><span class=\"p\">.</span><span class=\"n\">D</span><span class=\"o\">(</span><span class=\"n\">Complex</span><span class=\"o\">{|</span><span class=\"n\">A</span><span class=\"o\">=</span><span class=\"n\">complex</span><span class=\"o\">.</span><span class=\"n\">A</span><span class=\"o\">;</span><span class=\"n\">B</span><span class=\"o\">=</span><span class=\"n\">b</span><span class=\"o\">|}))</span>\n  <span class=\"ow\">and</span> <span class=\"n\">collect_errors_other</span> <span class=\"n\">path</span> <span class=\"n\">errors</span> <span class=\"o\">=</span> <span class=\"k\">function</span>\n      <span class=\"o\">|</span> <span class=\"n\">O</span><span class=\"o\">(</span><span class=\"n\">Error</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Error</span> <span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"o\">::</span> <span class=\"n\">errors</span><span class=\"o\">)</span>\n      <span class=\"o\">|</span> <span class=\"n\">O</span><span class=\"o\">(</span><span class=\"n\">Ok</span><span class=\"o\">(</span><span class=\"n\">Branch</span> <span class=\"n\">branch</span><span class=\"o\">))</span> <span class=\"o\">-&gt;</span>\n          <span class=\"n\">collect_errors_domain</span> <span class=\"o\">(</span><span class=\"n\">path</span> <span class=\"o\">+</span> <span class=\"s\">&quot;.Branch.D&quot;</span><span class=\"o\">)</span> <span class=\"n\">errors</span> <span class=\"n\">branch</span><span class=\"o\">.</span><span class=\"n\">D</span>\n          <span class=\"o\">|&gt;</span> <span class=\"nn\">Result</span><span class=\"p\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">d</span> <span class=\"o\">-&gt;</span><span class=\"nn\">Plain</span><span class=\"p\">.</span><span class=\"n\">O</span><span class=\"o\">(</span><span class=\"n\">Branch</span><span class=\"o\">{|</span><span class=\"n\">C</span><span class=\"o\">=</span><span class=\"n\">branch</span><span class=\"o\">.</span><span class=\"n\">C</span><span class=\"o\">;</span><span class=\"n\">D</span><span class=\"o\">=</span><span class=\"n\">d</span><span class=\"o\">|}))</span>\n      <span class=\"o\">|</span> <span class=\"n\">O</span><span class=\"o\">(</span><span class=\"n\">Ok</span><span class=\"o\">(</span><span class=\"n\">Leaf</span> <span class=\"n\">leaf</span><span class=\"o\">))</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Ok</span><span class=\"o\">(</span><span class=\"nn\">Plain</span><span class=\"p\">.</span><span class=\"n\">O</span><span class=\"o\">(</span><span class=\"n\">Leaf</span> <span class=\"n\">leaf</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>Here's a demo - 5 testcases with errors at 3 different levels, and the resulting paths extracted:                                                            </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"nv\">success1</span> <span class=\"o\">=</span> <span class=\"n\">D</span><span class=\"o\">(</span><span class=\"n\">Ok</span><span class=\"o\">(</span><span class=\"n\">Simple</span> <span class=\"s\">&quot;something&quot;</span><span class=\"o\">))</span>\n<span class=\"k\">let</span> <span class=\"nv\">success2</span> <span class=\"o\">=</span> <span class=\"n\">D</span><span class=\"o\">(</span><span class=\"n\">Ok</span><span class=\"o\">(</span><span class=\"n\">Complex</span> <span class=\"o\">{|</span> <span class=\"n\">A</span><span class=\"o\">=</span><span class=\"s\">&quot;something&quot;</span><span class=\"o\">;</span> <span class=\"n\">B</span><span class=\"o\">=</span><span class=\"n\">O</span><span class=\"o\">(</span><span class=\"n\">Ok</span><span class=\"o\">(</span><span class=\"n\">Leaf</span><span class=\"o\">{|</span> <span class=\"n\">E</span><span class=\"o\">=</span><span class=\"s\">&quot;x&quot;</span><span class=\"o\">;</span> <span class=\"n\">F</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"o\">|}))</span> <span class=\"o\">|}))</span>\n<span class=\"k\">let</span> <span class=\"nv\">fail1</span> <span class=\"o\">=</span> <span class=\"n\">D</span><span class=\"o\">(</span><span class=\"n\">Error</span> <span class=\"s\">&quot;error 1&quot;</span><span class=\"o\">)</span>\n<span class=\"k\">let</span> <span class=\"nv\">fail2</span> <span class=\"o\">=</span> <span class=\"n\">D</span><span class=\"o\">(</span><span class=\"n\">Ok</span><span class=\"o\">(</span><span class=\"n\">Complex</span> <span class=\"o\">{|</span> <span class=\"n\">A</span><span class=\"o\">=</span><span class=\"s\">&quot;something&quot;</span><span class=\"o\">;</span> <span class=\"n\">B</span><span class=\"o\">=</span><span class=\"n\">O</span><span class=\"o\">(</span><span class=\"n\">Error</span> <span class=\"s\">&quot;error 2&quot;</span><span class=\"o\">)|}))</span>\n<span class=\"k\">let</span> <span class=\"nv\">fail3</span> <span class=\"o\">=</span> <span class=\"n\">D</span><span class=\"o\">(</span><span class=\"n\">Ok</span><span class=\"o\">(</span><span class=\"n\">Complex</span> <span class=\"o\">{|</span> <span class=\"n\">A</span><span class=\"o\">=</span><span class=\"s\">&quot;something&quot;</span><span class=\"o\">;</span> <span class=\"n\">B</span><span class=\"o\">=</span><span class=\"n\">O</span><span class=\"o\">(</span><span class=\"n\">Ok</span><span class=\"o\">(</span><span class=\"n\">Branch</span><span class=\"o\">{|</span><span class=\"n\">C</span><span class=\"o\">=</span><span class=\"s\">&quot;else&quot;</span><span class=\"o\">;</span><span class=\"n\">D</span><span class=\"o\">=</span><span class=\"n\">D</span><span class=\"o\">(</span><span class=\"n\">Error</span> <span class=\"s\">&quot;error3&quot;</span><span class=\"o\">)|}))|}))</span>\n\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"n\">success1</span><span class=\"o\">;</span> <span class=\"n\">success2</span><span class=\"o\">;</span> <span class=\"n\">fail1</span><span class=\"o\">;</span> <span class=\"n\">fail2</span><span class=\"o\">;</span> <span class=\"n\">fail3</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"k\">match</span> <span class=\"n\">collect_errors_domain</span> <span class=\"s\">&quot;root&quot;</span> <span class=\"bp\">[]</span> <span class=\"n\">item</span> <span class=\"k\">with</span>\n        <span class=\"o\">|</span> <span class=\"n\">Error</span> <span class=\"n\">e</span> <span class=\"o\">-&gt;</span> <span class=\"n\">printfn</span> <span class=\"s\">&quot;errors: %A&quot;</span> <span class=\"n\">e</span>\n        <span class=\"o\">|</span> <span class=\"n\">Ok</span> <span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"n\">printfn</span> <span class=\"s\">&quot;%A&quot;</span> <span class=\"n\">x</span>\n</code></pre></div>\n\n\n<p>Results:</p>\n<div class=\"codehilite\"><pre><span></span><code>D (Simple &quot;something&quot;)\nD (Complex { A = &quot;something&quot;\n             B = O (Leaf { E = &quot;x&quot;\n                           F = 2 }) })\nerrors: (&quot;root&quot;, [&quot;error 1&quot;])\nerrors: (&quot;root.Complex.B&quot;, [&quot;error 2&quot;])\nerrors: (&quot;root.Complex.B.Branch.D&quot;, [&quot;error3&quot;])\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 209739364,
            "is_me_message": false,
            "last_edit_timestamp": 1599798149,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "talyian@gmail.com",
            "sender_full_name": "Jimmy Tang (he) (SP2'20)",
            "sender_id": 276140,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Parsing already-tree-structured data into full ASTs",
            "submessages": [],
            "timestamp": 1599797728,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm writing a keyboard firmware for fun and am curious if y'all have any recommendations for books, blog posts, or tools for programming explicitly about <em>time</em> and <em>events</em>.<br>\nFor example, the <a href=\"https://qmk.fm/\">QMK</a> firmware supports neat things like \"long hold for shift\" where if keydown/keyup is (say):</p>\n<ul>\n<li>duration &lt; 20 ms apart then a lowercase \"a\" gets sent</li>\n<li>20 ms &lt; duration &lt; 100ms an uppercase \"A\" gets sent</li>\n<li>100ms &lt; duration repeating \"a\" gets sent</li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210834380,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Programming with time and events",
            "submessages": [],
            "timestamp": 1600758579,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I can think of ways to code this particular feature manually, but things get very hairy at the interaction with other features (e.g., having keys act like regular keys when you keydown/up without any other presses, but that act \"shift\" to other layers when you keydown, other-keydown, other-keyup, keyup).</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210834386,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Programming with time and events",
            "submessages": [],
            "timestamp": 1600758585,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm curious if people have seen neat approaches for these sorts of problems.<br>\nIn particular, I'm wondering if solvers (like SAT / SMT) can help one synthesize state machines, determine constant values, etc.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210834388,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Programming with time and events",
            "submessages": [],
            "timestamp": 1600758588,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm sure something like Harel Statecharts would be useful here and also found a \"<a href=\"https://www.safetty.net/publications/pttes\">Patterns for Time-Triggered Embedded Systems</a>\" book, but wanted to pose the question to y'all in case anyone had suggestions and/or wanted to jam on this kind of problem sometime.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210834389,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Programming with time and events",
            "submessages": [],
            "timestamp": 1600758593,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/359d630a04aca90e0857dad062f17b33cdc19b60?x=x&version=3",
            "client": "website",
            "content": "<p>There are a couple of options you can use in Vim:</p>\n<ul>\n<li>Indexing the functions / methods of your project using ctags.</li>\n<li>Using language server protocol (LSP) with a plugin like coc.vim (Neovim will soon support that officially). It's what most people use nowadays.</li>\n</ul>\n<p>For fuzzy search files, buffers, and whatnot in Vim, the best is to use another plugin: fzf.vim. You can use as well vanilla vim with <code>:find</code> and <code>:vimgrep</code>, but there is no fuzzy search.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210859334,
            "is_me_message": false,
            "last_edit_timestamp": 1600775994,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "matthieu.cneude@gmail.com",
            "sender_full_name": "Matthieu Cneude (F2'20)",
            "sender_id": 342815,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "How do people usually navigate code?",
            "submessages": [],
            "timestamp": 1600775947,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1cb366b0fb685ba2003085e766225817?d=identicon&version=1",
            "client": "website",
            "content": "<p>hi folks! I'm working on a project at work to add search to our internal tooling. It's drawing from a couple of different sources of data, some semi-structured and some unstructured.  The problem is essentially \"is this text in this other text\" and I'm trying to make a reasonable set of choices about like tokenization / normalization / levenshtein distance / whatever's useful. Are there any resources I should look at, papers to read, etc., on good basic search?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210907331,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "allison.kaptur@gmail.com",
            "sender_full_name": "Allison Kaptur (S'12)",
            "sender_id": 809,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "search",
            "submessages": [],
            "timestamp": 1600797101,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1cb366b0fb685ba2003085e766225817?d=identicon&version=1",
            "client": "website",
            "content": "<p>We don't have a lot of non-corpus factors to consider (e.g. PageRank, page views of the different parts of the corpus, etc.)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210907613,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "allison.kaptur@gmail.com",
            "sender_full_name": "Allison Kaptur (S'12)",
            "sender_id": 809,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "search",
            "submessages": [],
            "timestamp": 1600797237,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I feel like there are a bunch of Alistair Moffat papers to cite but I don't have anything at hand, I'd probably just start in Scholar maybe from references in his (old but good) book Managing Gigabytes.  I know <a href=\"https://snowballstem.org/\">Martin Porter's work</a> is a reasonable starting point for stemming, and a friend of mine reports great results from using <a href=\"https://en.wikipedia.org/wiki/Metaphone\">Metaphone</a> (3?) for search-by-pronunciation.  ISTR SQLite's full-text index code is somewhat readable and small and makes what seem like probably sensible decisions about stuff like tokenization.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210919525,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "search",
            "submessages": [],
            "timestamp": 1600802796,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1cb366b0fb685ba2003085e766225817?d=identicon&version=1",
            "client": "website",
            "content": "<p>thanks!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210922098,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "allison.kaptur@gmail.com",
            "sender_full_name": "Allison Kaptur (S'12)",
            "sender_id": 809,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "search",
            "submessages": [],
            "timestamp": 1600804134,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1cb366b0fb685ba2003085e766225817?d=identicon&version=1",
            "client": "website",
            "content": "<p>SEFT looks really interesting - my kingdom for a working link to the source code</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210922121,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "allison.kaptur@gmail.com",
            "sender_full_name": "Allison Kaptur (S'12)",
            "sender_id": 809,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "search",
            "submessages": [],
            "timestamp": 1600804145,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1cb366b0fb685ba2003085e766225817?d=identicon&version=1",
            "client": "website",
            "content": "<p>from here: <a href=\"https://people.eng.unimelb.edu.au/ammoffat/mg/\">https://people.eng.unimelb.edu.au/ammoffat/mg/</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210922138,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "allison.kaptur@gmail.com",
            "sender_full_name": "Allison Kaptur (S'12)",
            "sender_id": 809,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "search",
            "submessages": [],
            "timestamp": 1600804155,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1cb366b0fb685ba2003085e766225817?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'll email to ask</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210922373,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "allison.kaptur@gmail.com",
            "sender_full_name": "Allison Kaptur (S'12)",
            "sender_id": 809,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "search",
            "submessages": [],
            "timestamp": 1600804252,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>hm, I think this is a problem that Lucene was trying to solve.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210929332,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "search",
            "submessages": [],
            "timestamp": 1600807712,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1cb366b0fb685ba2003085e766225817?d=identicon&version=1",
            "client": "website",
            "content": "<p>the only thing I know about Lucene is that it's used in Jira</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210933474,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "allison.kaptur@gmail.com",
            "sender_full_name": "Allison Kaptur (S'12)",
            "sender_id": 809,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "search",
            "submessages": [],
            "timestamp": 1600810090,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://lucene.apache.org/core/\">https://lucene.apache.org/core/</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210934100,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "search",
            "submessages": [],
            "timestamp": 1600810467,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>no personal experience using it, but I see it referenced all over the place.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210934191,
            "is_me_message": false,
            "last_edit_timestamp": 1600810551,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "search",
            "submessages": [],
            "timestamp": 1600810515,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>elasticsearch is built on it, IIRC</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210934204,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "search",
            "submessages": [],
            "timestamp": 1600810525,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>and versions of it are in all sorts of desktop search stuff.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210934231,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "search",
            "submessages": [],
            "timestamp": 1600810538,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Lucene is hella complicated though</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210935158,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "search",
            "submessages": [],
            "timestamp": 1600811050,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>But, absolutely, if you need an off-the-shelf implementation, it will do everything you want, at least in theory.  At least for some problems that I've approached, it was faster and more maintainable to implement something simple on top of a trigram index or suffix tree than to understand how to use Lucene (or its derivatives) effectively but YMMV.  There are a bunch of competitors in that space... I would suggest SQLite FTS instead of Lucene for simple applications, or maybe Xapian.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210935916,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "search",
            "submessages": [],
            "timestamp": 1600811497,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"809\">@Allison Kaptur (S'12)</span> hound is built around a trigram index: <a href=\"https://github.com/hound-search/hound\">https://github.com/hound-search/hound</a> </p>\n<p>based on <a href=\"https://swtch.com/~rsc/regexp/regexp4.html\">https://swtch.com/~rsc/regexp/regexp4.html</a></p>\n<p>and 1) works really well and 2) iirc implemented in that repo.</p>\n<p>Also hi! <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 210967221,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "search",
            "submessages": [],
            "timestamp": 1600846243,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/fd1e763bc15ec2542c97b2b99bef92a5?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I'm a big fan of <a href=\"https://github.com/meilisearch/MeiliSearch\">MeiliSearch</a>. It's similar to Algolia, but open-source. Written in Rust.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211038001,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "oh@zaiste.net",
            "sender_full_name": "Jakub Neander (he) (F2'20)",
            "sender_id": 342702,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "search",
            "submessages": [],
            "timestamp": 1600883212,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e4e0b8da64d9af566e9c99caee83ca90?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hi all,<br>\nI am writing a compiler and hit a wall in my understanding about the stack in assembly. On x86_64 I read that push and pop deal with 8 bits by default (<a href=\"https://stackoverflow.com/questions/40305965/does-each-push-instruction-push-a-multiple-of-8-bytes-on-x64\">https://stackoverflow.com/questions/40305965/does-each-push-instruction-push-a-multiple-of-8-bytes-on-x64</a>).  Here is my code that doesn't work.</p>\n<div class=\"codehilite\" data-code-language=\"NASM\"><pre><span></span><code><span class=\"k\">global </span><span class=\"nv\">_start</span>\n<span class=\"k\">section </span><span class=\"nv\">.text</span>\n<span class=\"nl\">_start:</span>\n<span class=\"nf\">sub</span> <span class=\"nb\">rsp</span><span class=\"p\">,</span> <span class=\"mi\">1</span> <span class=\"o\">*</span> <span class=\"mi\">8</span> <span class=\"c1\">; allocate space on stack</span>\n<span class=\"nf\">mov</span> <span class=\"kt\">qword</span> <span class=\"p\">[</span><span class=\"nb\">rsp</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"o\">*</span> <span class=\"mi\">8</span><span class=\"p\">],</span> <span class=\"mi\">200</span> <span class=\"c1\">; set a var to 200</span>\n<span class=\"c1\">; set it to itself + 100</span>\n<span class=\"nf\">push</span> <span class=\"mi\">100</span>\n<span class=\"nf\">push</span> <span class=\"kt\">qword</span> <span class=\"p\">[</span><span class=\"nb\">rsp</span> <span class=\"o\">-</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"nf\">pop</span> <span class=\"nb\">r8</span>\n<span class=\"nf\">pop</span> <span class=\"nb\">r9</span>\n<span class=\"nf\">add</span> <span class=\"nb\">r9</span><span class=\"p\">,</span> <span class=\"nb\">r8</span>\n<span class=\"nf\">push</span> <span class=\"nb\">r9</span>\n<span class=\"nf\">pop</span> <span class=\"nb\">r8</span>\n<span class=\"nf\">mov</span> <span class=\"kt\">qword</span> <span class=\"p\">[</span><span class=\"nb\">rsp</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"o\">*</span> <span class=\"mi\">8</span><span class=\"p\">],</span> <span class=\"nb\">r8</span>\n<span class=\"c1\">; deallocate space</span>\n<span class=\"nf\">add</span> <span class=\"nb\">rsp</span><span class=\"p\">,</span> <span class=\"mi\">1</span> <span class=\"o\">*</span> <span class=\"mi\">8</span>\n<span class=\"c1\">; exit</span>\n<span class=\"nf\">mov</span> <span class=\"nb\">rax</span><span class=\"p\">,</span> <span class=\"mi\">60</span>\n<span class=\"nf\">xor</span> <span class=\"nb\">rdi</span><span class=\"p\">,</span> <span class=\"nb\">rdi</span>\n<span class=\"nf\">syscall</span>\n</code></pre></div>\n\n<p>here is the code. it is not very optimised because my compiler wrote it. To me this should set a var on the stack to 200,  and then add 100 to itself in the most inefficient way possible.  The rsp - 8 and - 16 is because it needs to access lower on the stack because another item was pushed on. But right now the code doesn't work.  At the end [rsp - 8] is 100. Do you have any thoughts about why this may be. I have a feeling I have the amount of bytes the push and pop use wrong.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211049412,
            "is_me_message": false,
            "last_edit_timestamp": 1600888595,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "jacoblevgw@gmail.com",
            "sender_full_name": "Jacob Lev Goldman-Wetlzer (he) (m2'20)",
            "sender_id": 264901,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Stack In Assembly",
            "submessages": [],
            "timestamp": 1600888308,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e4e0b8da64d9af566e9c99caee83ca90?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>It seems like the push 100 is screwing everything up. <a href=\"/user_uploads/13/dxUT_F2fRE2Leg1rBt1SzmSq/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/dxUT_F2fRE2Leg1rBt1SzmSq/image.png\" title=\"image.png\"><img src=\"/user_uploads/13/dxUT_F2fRE2Leg1rBt1SzmSq/image.png\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211050353,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "jacoblevgw@gmail.com",
            "sender_full_name": "Jacob Lev Goldman-Wetlzer (he) (m2'20)",
            "sender_id": 264901,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Stack In Assembly",
            "submessages": [],
            "timestamp": 1600888790,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>Push and pop are basically convenience functions that do exactly this:</p>\n<div class=\"codehilite\"><pre><span></span><code>sub rsp, 1 * 8 ; allocate space on stack\nmov qword [rsp - 1 * 8], 200 ; set a var to 200\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211053170,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Stack In Assembly",
            "submessages": [],
            "timestamp": 1600890319,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>for me, though, this code doesn't build:</p>\n<div class=\"codehilite\"><pre><span></span><code>test.s:5: error: impossible combination of address sizes\ntest.s:8: error: impossible combination of address sizes\ntest.s:14: error: impossible combination of address sizes\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211053695,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Stack In Assembly",
            "submessages": [],
            "timestamp": 1600890617,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e4e0b8da64d9af566e9c99caee83ca90?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>i think you need -felf64</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211053732,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "jacoblevgw@gmail.com",
            "sender_full_name": "Jacob Lev Goldman-Wetlzer (he) (m2'20)",
            "sender_id": 264901,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Stack In Assembly",
            "submessages": [],
            "timestamp": 1600890636,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e4e0b8da64d9af566e9c99caee83ca90?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>with nasm. nasm is automatically 32 bit. but also it seems that pushing something puts it at $rsp not $rsp - 8</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211053832,
            "is_me_message": false,
            "last_edit_timestamp": 1600890785,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "jacoblevgw@gmail.com",
            "sender_full_name": "Jacob Lev Goldman-Wetlzer (he) (m2'20)",
            "sender_id": 264901,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Stack In Assembly",
            "submessages": [],
            "timestamp": 1600890706,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1bd49962ff0f7e7f3ee603f8243a1015bb6690bd?x=x&version=7",
            "client": "ZulipMobile",
            "content": "<p>I think your stack is growing downwards so you'd need to offset positively from esp</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211054257,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "talyian@gmail.com",
            "sender_full_name": "Jimmy Tang (he) (SP2'20)",
            "sender_id": 276140,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Stack In Assembly",
            "submessages": [],
            "timestamp": 1600890941,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e4e0b8da64d9af566e9c99caee83ca90?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Thanks! It works.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211054915,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "jacoblevgw@gmail.com",
            "sender_full_name": "Jacob Lev Goldman-Wetlzer (he) (m2'20)",
            "sender_id": 264901,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Stack In Assembly",
            "submessages": [],
            "timestamp": 1600891274,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>ah, that makes sense.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211056073,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Stack In Assembly",
            "submessages": [],
            "timestamp": 1600891871,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeah, I usually use gas, so I don't remember how to drive nasm off the top of my head.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211056114,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Stack In Assembly",
            "submessages": [],
            "timestamp": 1600891899,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>It might be worth looking at this pure Python search engine?  Not necessarily to use but to see what design choices it exposes.</p>\n<p>It seems like it has pretty good docs.  I haven't used it myself though.</p>\n<p><a href=\"https://whoosh.readthedocs.io/en/latest/intro.html\">https://whoosh.readthedocs.io/en/latest/intro.html</a></p>\n<p><a href=\"https://github.com/mchaput/whoosh\">https://github.com/mchaput/whoosh</a></p>\n<p>In college I used an earlier version of this textbook.  I don't know what to compare it with, but it seems to cover all the relevant topics:</p>\n<p><a href=\"https://www.amazon.com/Modern-Information-Retrieval-Concepts-Technology/dp/0321416910\">https://www.amazon.com/Modern-Information-Retrieval-Concepts-Technology/dp/0321416910</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211088949,
            "is_me_message": false,
            "last_edit_timestamp": 1600921172,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "search",
            "submessages": [],
            "timestamp": 1600921137,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9b59a59f24058e465d934bdafce39c4a?d=identicon&version=1",
            "client": "website",
            "content": "<p>BTW that is for unstructured data.  I think those techniques usually do well in practice for semi-structured data.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211089027,
            "is_me_message": false,
            "last_edit_timestamp": 1600921310,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "andychup@gmail.com",
            "sender_full_name": "Andy Chu (S1'18)",
            "sender_id": 116399,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "search",
            "submessages": [],
            "timestamp": 1600921253,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/904ad0ca4199ee5df193c77423af56f91244ad9c?x=x&version=3",
            "client": "ZulipElectron",
            "content": "<p>One small project I'm planning on working on is using the <a href=\"https://github.com/apertium/apertium-keyboard\">apertium</a> keyboard project to build a mobile keyboard for Khoekhoe (a language from Namibia I worked on for my dissertation). The problem is: I have no experience with Android development! When I started working on this the other day, I couldn't get my build environment up and running.</p>\n<p>Does anyone have experience with this who'd be willing to help talk me through setting up gradle / Android Studio / etc.?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211271217,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "me@lelandpaul.com",
            "sender_full_name": "Leland Paul Kusmer (they) (F2'20)",
            "sender_id": 342407,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Android",
            "submessages": [],
            "timestamp": 1601046862,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78359dd9d3cf59abacfa85565edc1eb2?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"2172\">@Kevin Lynagh (he)</span>  I don't have any good resources for your question, but I am very interested in doing a similar project- building a keyboard from scratch and coding the firmware myself. I have made several attempts at this but it's proved really _really_ difficult to find exactly the resources and fabricators I need (highly specific, one off...) that don't cost a fortune. I have a really clear picture in my mind of the keyboard I want though! Would you be interested in a zoom call to compare notes / answer some of my noob hardware questions?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211354792,
            "is_me_message": false,
            "last_edit_timestamp": 1601118014,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "jeffowler@gmail.com",
            "sender_full_name": "Jeff Fowler (W'14)",
            "sender_id": 4998,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Programming with time and events",
            "submessages": [],
            "timestamp": 1601118002,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"4998\">@Jeff Fowler (W'14)</span> Absolutely, I'll send you a PM and we can work out details there. Also, just FYI I have a rough build log of my keyboard in another thread, which might be useful background for you: <a href=\"#narrow/stream/220079-keyboards/topic/split.20wireless.20keyboard.20build.20log\">https://recurse.zulipchat.com/#narrow/stream/220079-keyboards/topic/split.20wireless.20keyboard.20build.20log</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211402550,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jeffowler@gmail.com",
                        "full_name": "Jeff Fowler (W'14)",
                        "id": 4998
                    },
                    "user_id": 4998
                }
            ],
            "recipient_id": 20203,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Programming with time and events",
            "submessages": [],
            "timestamp": 1601190208,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/96142d73d7c8509f3bd05947dcf731b5337544fe?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hi all,<br>\nI'm having some trouble going through a Express tutorial. I keep getting content security policy warnings even though I've added a bunch of stuff to my response headers. Here's my server code for more context:</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"kr\">const</span> <span class=\"p\">{</span> <span class=\"nx\">MongoClient</span><span class=\"p\">,</span> <span class=\"nx\">ObjectID</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s2\">\"mongodb\"</span><span class=\"p\">);</span>\n<span class=\"kr\">const</span> <span class=\"nx\">Express</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s2\">\"express\"</span><span class=\"p\">)();</span>\n<span class=\"kr\">const</span> <span class=\"nx\">Cors</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s2\">\"cors\"</span><span class=\"p\">);</span>\n<span class=\"kr\">const</span> <span class=\"nx\">BodyParser</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s2\">\"body-parser\"</span><span class=\"p\">);</span>\n<span class=\"kr\">const</span> <span class=\"p\">{</span> <span class=\"nx\">request</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s2\">\"express\"</span><span class=\"p\">);</span>\n<span class=\"kr\">const</span> <span class=\"nx\">csp</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s2\">\"helmet-csp\"</span><span class=\"p\">);</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">client</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">MongoClient</span><span class=\"p\">(</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">[</span><span class=\"s2\">\"ATLAS_URI\"</span><span class=\"p\">]);</span>\n\n<span class=\"nx\">Express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">BodyParser</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">());</span>\n<span class=\"nx\">Express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">BodyParser</span><span class=\"p\">.</span><span class=\"nx\">urlencoded</span><span class=\"p\">({</span> <span class=\"nx\">extended</span><span class=\"o\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}));</span>\n<span class=\"nx\">Express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">Cors</span><span class=\"p\">());</span>\n\n<span class=\"nx\">Express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span>\n    <span class=\"nx\">csp</span><span class=\"p\">({</span>\n      <span class=\"nx\">directives</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"nx\">defaultSrc</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"sb\">`'unsafe-inline'`</span><span class=\"p\">,</span> <span class=\"sb\">`'self'`</span><span class=\"p\">],</span>\n        <span class=\"nx\">scriptSrc</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"sb\">`'self'`</span><span class=\"p\">,</span> <span class=\"sb\">`'unsafe-inline'`</span><span class=\"p\">,</span> <span class=\"sb\">`'unsafe-eval'`</span><span class=\"p\">,</span> <span class=\"sb\">`http://*`</span><span class=\"p\">],</span>\n        <span class=\"nx\">styleSrc</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"sb\">`'self'`</span><span class=\"p\">,</span> <span class=\"sb\">`'unsafe-inline'`</span><span class=\"p\">,</span> <span class=\"sb\">`http://*`</span><span class=\"p\">],</span>\n        <span class=\"nx\">fontSrc</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"sb\">`'self'`</span><span class=\"p\">],</span>\n        <span class=\"nx\">frameSrc</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"sb\">`'self'`</span><span class=\"p\">],</span>\n        <span class=\"nx\">connectSrc</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"sb\">`'self'`</span><span class=\"p\">],</span>\n        <span class=\"nx\">imgSrc</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"sb\">`'self'`</span><span class=\"p\">],</span>\n        <span class=\"nx\">objectSrc</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"sb\">`'self'`</span><span class=\"p\">],</span>\n        <span class=\"nx\">reportUri</span><span class=\"o\">:</span> <span class=\"sb\">`/csp`</span>\n      <span class=\"p\">},</span>\n      <span class=\"nx\">reportOnly</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"p\">}),</span>\n  <span class=\"p\">);</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">collection</span><span class=\"p\">;</span>\n\n<span class=\"nx\">Express</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"s2\">\"3000\"</span><span class=\"p\">,</span> <span class=\"nx\">async</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">try</span> <span class=\"p\">{</span>\n        <span class=\"nx\">await</span> <span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">connect</span><span class=\"p\">();</span>\n        <span class=\"nx\">collection</span> <span class=\"o\">=</span> <span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">db</span><span class=\"p\">(</span><span class=\"s2\">\"gamedev\"</span><span class=\"p\">).</span><span class=\"nx\">collection</span><span class=\"p\">(</span><span class=\"s2\">\"scores\"</span><span class=\"p\">);</span>\n        <span class=\"nx\">collection</span><span class=\"p\">.</span><span class=\"nx\">createIndex</span><span class=\"p\">({</span> <span class=\"s2\">\"location\"</span><span class=\"o\">:</span> <span class=\"s2\">\"2dsphere\"</span> <span class=\"p\">});</span>\n    <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">Express</span><span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"s2\">\"/create\"</span><span class=\"p\">,</span> <span class=\"nx\">async</span> <span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">,</span> <span class=\"nx\">response</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n   <span class=\"c1\">// create code</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">Express</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s2\">\"/get\"</span><span class=\"p\">,</span> <span class=\"nx\">async</span> <span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">,</span> <span class=\"nx\">response</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// get code</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">Express</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s2\">\"/getNearLocation\"</span><span class=\"p\">,</span> <span class=\"nx\">async</span> <span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">,</span> <span class=\"nx\">response</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n <span class=\"c1\">// getNearLocation code</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n\n<p>Basically, whenever I run this code, and try to access it using a client program I have, I run into the following errors even though I have seemingly set them in the code using <code>helmet-csp</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>Content Security Policy: The page\u2019s settings blocked the loading of a resource at http://localhost:3000/favicon.ico (\u201cdefault-src\u201d).\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code>Content Security Policy: The page\u2019s settings blocked the loading of a resource at inline (\u201cdefault-src\u201d).\n</code></pre></div>\n\n\n<p>Furthermore, when I curl <code>http://localhost:3000</code>, I get a 200 OK response, but when I curl <code>http://localhost:3000/get</code> or any of my predefined Express routes, I get a 404 error.</p>\n<div class=\"codehilite\"><pre><span></span><code>$ curl -I http://localhost:3000/\nHTTP/1.1 200 OK\nX-Powered-By: Express\nAccept-Ranges: bytes\nContent-Type: text/html; charset=UTF-8\nContent-Length: 150\nETag: W/&quot;96-tX0B7LKaOuUPvTVjHjbS+EAVlus&quot;\nDate: Tue, 29 Sep 2020 00:27:53 GMT\nConnection: keep-alive\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code>$ curl -I http://localhost:3000/get\nHTTP/1.1 404 Not Found\nX-Powered-By: Express\nContent-Security-Policy: default-src &#39;none&#39;\nX-Content-Type-Options: nosniff\nContent-Type: text/html; charset=utf-8\nContent-Length: 143\nDate: Tue, 29 Sep 2020 00:31:44 GMT\nConnection: keep-alive\n</code></pre></div>\n\n\n<p>Any help or pairing would be appreciated on this! <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span> My brain is slowly frying</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211569061,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "yang.benjamin1998@gmail.com",
            "sender_full_name": "Ben Yang (he) (F2'20)",
            "sender_id": 341035,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Problems with Content Security Policy and Express.js",
            "submessages": [],
            "timestamp": 1601340443,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/29581c8174d213b28a7fd1d59b1ce0d8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Okay I'm not super familiar with the express libs you are using but if you want to pair on this later today I think us three (you, me &amp; google :p) could figure it out</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211637655,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "pstefek2@gmail.com",
            "sender_full_name": "Peter Stefek (he) (F2'20)",
            "sender_id": 329808,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Problems with Content Security Policy and Express.js",
            "submessages": [],
            "timestamp": 1601393437,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/96142d73d7c8509f3bd05947dcf731b5337544fe?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Sounds good! I'm pretty much free all day <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> Let me know what time is good for you</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211638070,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "yang.benjamin1998@gmail.com",
            "sender_full_name": "Ben Yang (he) (F2'20)",
            "sender_id": 341035,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Problems with Content Security Policy and Express.js",
            "submessages": [],
            "timestamp": 1601393554,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/29581c8174d213b28a7fd1d59b1ce0d8?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm free around 9:30 PST and then later in the afternoon (after 11:30 PST)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211641191,
            "is_me_message": false,
            "last_edit_timestamp": 1601397563,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "pstefek2@gmail.com",
            "sender_full_name": "Peter Stefek (he) (F2'20)",
            "sender_id": 329808,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Problems with Content Security Policy and Express.js",
            "submessages": [],
            "timestamp": 1601394801,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/96142d73d7c8509f3bd05947dcf731b5337544fe?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>how does 12 PST sound? Meet you in pairing station 5?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211657895,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "yang.benjamin1998@gmail.com",
            "sender_full_name": "Ben Yang (he) (F2'20)",
            "sender_id": 341035,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Problems with Content Security Policy and Express.js",
            "submessages": [],
            "timestamp": 1601401650,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/29581c8174d213b28a7fd1d59b1ce0d8?d=identicon&version=1",
            "client": "website",
            "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211663593,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "pstefek2@gmail.com",
            "sender_full_name": "Peter Stefek (he) (F2'20)",
            "sender_id": 329808,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Problems with Content Security Policy and Express.js",
            "submessages": [],
            "timestamp": 1601404072,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/96142d73d7c8509f3bd05947dcf731b5337544fe?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>JK, let's go to pairing station 3, 5 is taken</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211664630,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "yang.benjamin1998@gmail.com",
            "sender_full_name": "Ben Yang (he) (F2'20)",
            "sender_id": 341035,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Problems with Content Security Policy and Express.js",
            "submessages": [],
            "timestamp": 1601404461,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/96142d73d7c8509f3bd05947dcf731b5337544fe?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"329808\">@Peter Stefek (he) (F2'20)</span> Helped me fix my error! Apparently I was running my <code>webpack-dev-server</code> and my back-end stuff on the same port, but neither <code>nodemon</code> nor <code>webpack</code> was throwing an error, saying that one server was overwriting the other server. <img alt=\":thinking_face_3d:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/13/emoji/images/14067.gif\" title=\"thinking face 3d\"></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211676168,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "14067",
                    "emoji_name": "thinking_face_3d",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "pstefek2@gmail.com",
                        "full_name": "Peter Stefek (he) (F2'20)",
                        "id": 329808
                    },
                    "user_id": 329808
                }
            ],
            "recipient_id": 20203,
            "sender_email": "yang.benjamin1998@gmail.com",
            "sender_full_name": "Ben Yang (he) (F2'20)",
            "sender_id": 341035,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Problems with Content Security Policy and Express.js",
            "submessages": [],
            "timestamp": 1601409634,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/6485c74622306264ff53449c6f0ca540?d=identicon&version=1",
            "client": "website",
            "content": "<p>Ah, I've had a problem like that! The variant I had was that one of them was listening on 127.0.0.1 and the other one was listening on 0.0.0.0</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 211708579,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "iain@mccoy.id.au",
            "sender_full_name": "Iain McCoy (he) (SP2'17)",
            "sender_id": 100806,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Problems with Content Security Policy and Express.js",
            "submessages": [],
            "timestamp": 1601432888,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f6dabe79f4348d5f0e27cd4a75032580526b9c5c?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>Hi all, I am trying to extract data from a SQL dump and reformat it in a usable way, but I'm not very familiar with the process. I am aware how to decompress and open the file as a <code>_io.TextIOWrapper</code> item. When I apply <code>file.read()</code>, <code>file</code> gets transformed into one gigantic string.  I was wondering what the best way is to a) limit and reformat the results and b) if there is a better way to load this file in the first place. Is there a way to for example use SQL and do something like <code>SELECT * FROM table LIMIT 100</code> in Python?</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">with</span> <span class=\"n\">gzip</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">DUMP_DIR</span><span class=\"p\">,</span> <span class=\"n\">DUMP_FN</span><span class=\"p\">),</span> <span class=\"s1\">'rt'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">file</span><span class=\"p\">:</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"n\">line</span><span class=\"p\">)</span> <span class=\"c1\">#will fail because file too big</span>\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 213058959,
            "is_me_message": false,
            "last_edit_timestamp": 1602519740,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "melanie@imfeld.info",
            "sender_full_name": "Melanie Imfeld (she) (F2'20)",
            "sender_id": 342311,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Loading a SQL dump in Python",
            "submessages": [],
            "timestamp": 1602519686,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p><code>readlines()</code> will read the SQL into a list, where each element in the list is a line from the file (it splits the string on newline)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 213059343,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Loading a SQL dump in Python",
            "submessages": [],
            "timestamp": 1602519869,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>you can also read a given number of bytes with <code>read()</code> and go through it that way (maybe search for <code>;</code> characters?)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 213059504,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Loading a SQL dump in Python",
            "submessages": [],
            "timestamp": 1602519961,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>you might also want to look into something like <a href=\"https://pypi.org/project/sqlparse/\">https://pypi.org/project/sqlparse/</a>, which takes strings of SQL and lets you ask for a list of SQL statements that are present in them</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 213059839,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Loading a SQL dump in Python",
            "submessages": [],
            "timestamp": 1602520140,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ef0cc9607b07f392f70560a43dbbb2d0efd6328?x=x&version=1",
            "client": "website",
            "content": "<p>readlines() will pull the entire file into memory, which is what you wanted to avoid. Just iterating over the file (<code>for line in file</code>) will lazily fetch the next line, without pulling it into memory.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 213066514,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "brian.kihoon.lee@gmail.com",
            "sender_full_name": "Brian Lee (F1'16)",
            "sender_id": 100043,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Loading a SQL dump in Python",
            "submessages": [],
            "timestamp": 1602524223,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8ef0cc9607b07f392f70560a43dbbb2d0efd6328?x=x&version=1",
            "client": "website",
            "content": "<p>A SQL dump, iirc, is dialect-specific and gives you a set of statements, when executed, would recreate the sql database. If you're trying to extract the data into a final format that isn't a SQL database, then you may have better luck dumping the data in a format that isn't a SQL dump</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 213066622,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "brian.kihoon.lee@gmail.com",
            "sender_full_name": "Brian Lee (F1'16)",
            "sender_id": 100043,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Loading a SQL dump in Python",
            "submessages": [],
            "timestamp": 1602524290,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f6dabe79f4348d5f0e27cd4a75032580526b9c5c?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>So <code>read()</code> actually works fine to split off the parts of the file that I don't need and to split the remaining items in a list. But that way I would still be loading the entire file into memory, correct?</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">with</span> <span class=\"n\">gzip</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">DUMP_DIR</span><span class=\"p\">,</span> <span class=\"n\">DUMP_FN</span><span class=\"p\">),</span> <span class=\"s1\">'rt'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">file</span><span class=\"p\">:</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">\"INSERT INTO `page_restrictions` VALUES (\"</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"c1\">#get rid of the parts that I don't need</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">\"),(\"</span><span class=\"p\">)</span> <span class=\"c1\">#split the remaining items to create list</span>\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 213068362,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "melanie@imfeld.info",
            "sender_full_name": "Melanie Imfeld (she) (F2'20)",
            "sender_id": 342311,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Loading a SQL dump in Python",
            "submessages": [],
            "timestamp": 1602525368,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>that'd be reading the whole thing into memory -- you can also do it line by line, IIRC something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>with open(path) as f:\n     for ln in f:\n         handle(ln)\n</code></pre></div>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 213071933,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Loading a SQL dump in Python",
            "submessages": [],
            "timestamp": 1602527657,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f6dabe79f4348d5f0e27cd4a75032580526b9c5c?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>Hm, attempting to read the file that way actually results in <code>IOPub data rate exceeded</code> error in Jupyter notebook. Should I attempt to change the rate?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 213076623,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "melanie@imfeld.info",
            "sender_full_name": "Melanie Imfeld (she) (F2'20)",
            "sender_id": 342311,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Loading a SQL dump in Python",
            "submessages": [],
            "timestamp": 1602530333,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8776bd2d19cdb1399c4e9589d9397d57290e5729?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>I've started using treemacs-lsp for navigation, it works well.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 213420387,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "shae.erisson@gmail.com",
            "sender_full_name": "Shae Matijs Erisson (he) (F1'19)",
            "sender_id": 221819,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "How do people usually navigate code?",
            "submessages": [],
            "timestamp": 1602766804,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/9dfae5ecf93c861db337992d2f2f3121?d=identicon&version=1",
            "client": "website",
            "content": "<p>I just deployed a little Haskell server on Digital Ocean which receives LaTeX files by Http and sends back the corresponding PDF file.  I need to keep it running 24/7.  Right now I am running it under <code>nohup</code>.  But suppose the server goes down &amp; restarts.  Then it won't be running anymore. Or suppose it can't handle an error and crashes ...</p>\n<p>What is the right way to do this?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214430812,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "jxxcarlson@gmail.com",
            "sender_full_name": "James Carlson (he) (F2'20)",
            "sender_id": 342488,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "keep it running",
            "submessages": [],
            "timestamp": 1603549931,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Usually you want it to be managed by your init or service supervisor.  There's a good chance you're using either systemd or runit these days; if you look up information on how to describe the service to whichever system you're using, it should just be a matter of writing a small config file and enabling it; then the service supervisor will keep the process alive if it dies, and start it on boot (if the service supervisor is started by init or is built into init).</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214432533,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "keep it running",
            "submessages": [],
            "timestamp": 1603552241,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f6bef626649c46b4cc3fd9f67c151a19170da5e?x=x&version=21",
            "client": "website",
            "content": "<p>This article seems to be a good intro to systemd services with a bunch of examples at the end: <a href=\"https://www.shellhacks.com/systemd-service-file-example/\">https://www.shellhacks.com/systemd-service-file-example/</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214457243,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "jkozak@fmail.co.uk",
            "sender_full_name": "Jake \u26e4 Prozvyshe (they) (W1'17)",
            "sender_id": 8478,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "keep it running",
            "submessages": [],
            "timestamp": 1603584448,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/29581c8174d213b28a7fd1d59b1ce0d8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Although I don't have that much experience here, if you really want it running 24/7 I'd also suggest adding some kind of alerting via <a href=\"https://www.solarwinds.com/pingdom\">pingdom</a> or such. I run a tiny little web game and our longest recent outage was caused by digital ocean migrating our server which broke supervisord (which was backed by systemd but that didn't restart it either). The only way I found out about it was via a friend texting me.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214505977,
            "is_me_message": false,
            "last_edit_timestamp": 1603665721,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "pstefek2@gmail.com",
            "sender_full_name": "Peter Stefek (he) (F2'20)",
            "sender_id": 329808,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "keep it running",
            "submessages": [],
            "timestamp": 1603652213,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>I just wanted to say how great <a href=\"https://github.com/casey/just\">just</a> is. Thanks <span class=\"user-mention\" data-user-id=\"6935\">@Casey Rodarmor (SP2'18)</span> :)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214871296,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "me@lelandpaul.com",
                        "full_name": "Leland Paul Kusmer (they) (F2'20)",
                        "id": 342407
                    },
                    "user_id": 342407
                }
            ],
            "recipient_id": 20203,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "just is great",
            "submessages": [],
            "timestamp": 1603906335,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/afcff71a280c619fe7f45af5df2f66b9617479fc?x=x&version=4",
            "client": "website",
            "content": "<p>Supplementing what Julian and Jake mentioned above:</p>\n<p><a href=\"https://gitlab.com/nilenso/cats/-/commit/d90f01210d9fe7f31861e1df64b898af98a403fa#0c7cf7f0e9bd5129d96548e005403ba4c146b68c\">This is what I wrote recently to configure a minimal service</a>, similar to your scenario. </p>\n<p>Note: The link is a commit having several things. I've hot-linked to the systemd service declaration file. The commit message explains the setup. (Note: I'm not an expert sysadmin, and this is my most recent best-effort setup.)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "historical"
            ],
            "id": 214878238,
            "is_me_message": false,
            "last_edit_timestamp": 1603909377,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "aditya.athalye@gmail.com",
            "sender_full_name": "Aditya Athalye (he) (SP1'20)",
            "sender_id": 263547,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "keep it running",
            "submessages": [],
            "timestamp": 1603909238,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f6bef626649c46b4cc3fd9f67c151a19170da5e?x=x&version=21",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"342000\">@Lizz Thabet (she) (F2'20)</span> Remember I was saying much of what gulp or grunt does can be replaced with <code>make</code>? <code>just</code> is even better!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215330449,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "jkozak@fmail.co.uk",
            "sender_full_name": "Jake \u26e4 Prozvyshe (they) (W1'17)",
            "sender_id": 8478,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "just is great",
            "submessages": [],
            "timestamp": 1604329692,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1d9cae1f0cbcb78efb0fbd9650fbccb2?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm starting to work on a state machine project. What are some resources that stand out to you with important concepts on state machines? Also for general theory or practices.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215373422,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "julianvmodesto@gmail.com",
            "sender_full_name": "Julian Modesto (he) (m3'20)",
            "sender_id": 276201,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "state machines",
            "submessages": [],
            "timestamp": 1604348697,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f6bef626649c46b4cc3fd9f67c151a19170da5e?x=x&version=21",
            "client": "website",
            "content": "<p>automata theory is the big one</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215540432,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "jkozak@fmail.co.uk",
            "sender_full_name": "Jake \u26e4 Prozvyshe (they) (W1'17)",
            "sender_id": 8478,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "state machines",
            "submessages": [],
            "timestamp": 1604464440,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f6bef626649c46b4cc3fd9f67c151a19170da5e?x=x&version=21",
            "client": "website",
            "content": "<p>if by \"practices\" you mean design patterns for implementing state machines, there's a few different patterns there</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215540485,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "jkozak@fmail.co.uk",
            "sender_full_name": "Jake \u26e4 Prozvyshe (they) (W1'17)",
            "sender_id": 8478,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "state machines",
            "submessages": [],
            "timestamp": 1604464464,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ef039ebebe21b975d2459f92aa693722?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>This interesting post came up in blaggragator not too long ago... it's not necessarily a deep resource, but I hadn't heard of State Tables (rather than Diagrams) until seeing it: <a href=\"https://bytes.zone/posts/state-transition-tables\">https://bytes.zone/posts/state-transition-tables</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215622930,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "aaronstrick@gmail.com",
            "sender_full_name": "Aaron Strick (he) (F2'18)",
            "sender_id": 129958,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "state machines",
            "submessages": [],
            "timestamp": 1604514861,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6ca38a4d0df1f7bab53c8089bdbfb83fe0baec4f?x=x&version=3",
            "client": "ZulipElectron",
            "content": "<p>oh cool!! i will check this out. thanks, <span class=\"user-mention\" data-user-id=\"8478\">@Jake \u26e4 Prozvyshe (they) (W1'17)</span>. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215730503,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "lizzthabet@gmail.com",
            "sender_full_name": "Lizz Thabet (she) (F2'20)",
            "sender_id": 342000,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "just is great",
            "submessages": [],
            "timestamp": 1604591409,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>For python, emacs-jedi is a must-have, and for rust, racer-company.  Both offer some version of goto-definition.</p>\n<p>However, I have more or less avoided trying to answer this question - preferring instead to keep the code factored in such a way that  it's unnecessary.  I find it forces me to keep my abstractions tight and makes the whole process easier.</p>\n<p>That said, some of the replies in here are going to seriously come in handy when traversing OPC. :P</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215755101,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "How do people usually navigate code?",
            "submessages": [],
            "timestamp": 1604601190,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>I find that rust-analyzer (with emacs-lsp) works much better than racer</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215755728,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "How do people usually navigate code?",
            "submessages": [],
            "timestamp": 1604601498,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>thanks for this.  I never had any problems with racer but this looks like it has some killer features that racer doesn't cover.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215778454,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "How do people usually navigate code?",
            "submessages": [],
            "timestamp": 1604612810,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've been working on circuit boards and want to try generating some art on my designs. For example, randomly position little circles, triangles, and arcs around my board. However, I need to do this subject to various geometric constraints (the shapes shouldn't fall of the edge of the board or across holes/cutouts; they should be a minimum distance from other shapes like electrical components and traces, etc.)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215817973,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "18755",
                    "emoji_name": "hardware-circuit-board-2",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "victoria@unconventionaldata.ai",
                        "full_name": "Victoria Levchenko (she) (W2'19)",
                        "id": 198466
                    },
                    "user_id": 198466
                }
            ],
            "recipient_id": 20203,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "favorite languages / libraries for generative art",
            "submessages": [],
            "timestamp": 1604652147,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Right now my plan is to try this all in Python --- it's not a language I know well, but it seems like the libraries are there. E.g., I can use <code>ezdxf</code> to import the board outline from my CAD program, do some geometry math using <code>shapely</code>, then spit out again as DXF or into KiCAD (circuit board program) to combine everything.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215818047,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "favorite languages / libraries for generative art",
            "submessages": [],
            "timestamp": 1604652219,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I foresee doing a bunch of manual programming stuff. Like, I'll probably just generate shapes, then do n^2 intersection checks, and uh, maybe just delete any shapes that intersect another or the board outline until everything is good?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215818136,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "favorite languages / libraries for generative art",
            "submessages": [],
            "timestamp": 1604652262,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I dunno how this will turn out, and I assume things would be much faster and the results better if I could do things like simulated anealing or other algos to \"push\" things around to evenly distribute shapes, etc.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215818162,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "favorite languages / libraries for generative art",
            "submessages": [],
            "timestamp": 1604652292,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Is there a good environment or kit-of-parts that I should be looking at to do this kind of thing?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215818247,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "favorite languages / libraries for generative art",
            "submessages": [],
            "timestamp": 1604652361,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7bd8ef7bfa9d5305e347e352b785087496f5c311?x=x&version=1",
            "client": "website",
            "content": "<p>Sorry I'm not a python person, but I know you can do this sort of thing \"fairly easily\" in <a href=\"https://observablehq.com/collection/@d3/d3-force\">d3 using force-directed graphs</a>. d3 has a high learning curve so if you're set on using python then using d3 would be like learning a new language in addition to whatever you want to do in python. There are force directed graph implementations in python out there though. Good luck! This sounds like a cool project!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215844188,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "hackerschool@alphabeticaldisorder.com",
            "sender_full_name": "Emil Ng (he) (W2'15)",
            "sender_id": 7104,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "favorite languages / libraries for generative art",
            "submessages": [],
            "timestamp": 1604668808,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/33de48db54cb67ad74fa1b8991b6e790a7941300?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>If you need to do this in a non-python language, the meat of Shapely is just GEOS and it has bindings for most languages. I would find a way to avoid DXF if possible, many CAD programs support OpenNURBS (.3dm) which is superior in every way</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215855106,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "liu.brandon@gmail.com",
            "sender_full_name": "Brandon Liu (SP2'18)",
            "sender_id": 111910,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "favorite languages / libraries for generative art",
            "submessages": [],
            "timestamp": 1604673978,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/33de48db54cb67ad74fa1b8991b6e790a7941300?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>GEOS is a port of Java Topology Suite, so JVM languages could use bindings to JTS instead</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215855741,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "liu.brandon@gmail.com",
            "sender_full_name": "Brandon Liu (SP2'18)",
            "sender_id": 111910,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "favorite languages / libraries for generative art",
            "submessages": [],
            "timestamp": 1604674251,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>Hi, Recurse,<br>\nI have a problem.<br>\nI love writing <em>almost</em> all code.  The glaring exception is UI.  Every time I go near it I hate it.  MVC creates an annoying amount of steps and methods for placing things on screen are a pain.  CSS makes my head explode.  I wish I were better at these sorts of things, and someday, perhaps I'll get there.  For the time being, I don't want to touch them any more than I have to.  This, by itself, isn't that much of an issue, until you consider that I have a ton of things I'm working on, that need a UI to be useful.  That, and building out things like web interfaces in raw HTML is depressing.</p>\n<p>So, ever hopeful, I go out in search of simple, minimally opinionated, easy to use frameworks to build working UIs.  I don't need flexibility or power.  I don't need to animate things.  I don't want a library that calls directly to OpenGL and expects you to tell it how, where, why, and in what color to render text.  I want a kit that with minimal effort will let me poke at things that I've written.   I end up trudging through a never-ending bog full of half-baked tools forgotten by their creators, slick monstrosities of proprietary UI frameworks that claim they can End World Hunger(tm), modules (that I'm sure are really cool if it's your thing) that manipulate individual pixels by compiling to assembly, and a host of other more or less useless-for-the-case _stuff_.</p>\n<p>And, like most things code, this problem has a problem.  I need this for projects that span from lisp to python to rust and beyond.  </p>\n<p>Any of you in a similar boat?  Anyone have a solution to this?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215922319,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "My UI Conundrum",
            "submessages": [],
            "timestamp": 1604710169,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/635ab4f3efb5c26f8276373d9767320104538f85?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Dunno if you know Haskell syntax, but I really like the Elm programming language (makes coding front end really fun).</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215922554,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "jpholzmann@gmail.com",
            "sender_full_name": "Justin Holzmann (he) (S2'20)",
            "sender_id": 315058,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "My UI Conundrum",
            "submessages": [],
            "timestamp": 1604710425,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>this looks pretty fun: <a href=\"https://www.raylib.com/\">https://www.raylib.com/</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215922576,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "My UI Conundrum",
            "submessages": [],
            "timestamp": 1604710443,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"https://www.raylib.com/examples/web/text/loader.html?name=text_rectangle_bounds\">https://www.raylib.com/examples/web/text/loader.html?name=text_rectangle_bounds</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215922668,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "My UI Conundrum",
            "submessages": [],
            "timestamp": 1604710545,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>and has bindings to a lot of languages (it's C)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215922729,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "My UI Conundrum",
            "submessages": [],
            "timestamp": 1604710583,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>Heh. I keep on thinking about thinking about playing with a multithreaded UI framework where every widget has a control channel and a few event channels, and a simple runtime-parsed layout language.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215923319,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "My UI Conundrum",
            "submessages": [],
            "timestamp": 1604711245,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>so I can have all of the app logic in one place selecting from a bunch of different event sources, instead of spreading it across a ton of random callbacks on random widgets</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215923366,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "My UI Conundrum",
            "submessages": [],
            "timestamp": 1604711284,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>\"simple runtime-parsed layout language\" is doing a lot of work :)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215924137,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "My UI Conundrum",
            "submessages": [],
            "timestamp": 1604712347,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>though maybe just like \"no way to specify layout adjustments, everything is centered with padding in a column or a row\" and then a bunch of gauge-like widgets for displaying text or graphs</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215924225,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "My UI Conundrum",
            "submessages": [],
            "timestamp": 1604712482,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>might be simple enough to use</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215924261,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "My UI Conundrum",
            "submessages": [],
            "timestamp": 1604712499,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>for poking at things one has written</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215924276,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "My UI Conundrum",
            "submessages": [],
            "timestamp": 1604712546,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>but widgets as black boxes with some control and data channels does sound pretty cool</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215924305,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "My UI Conundrum",
            "submessages": [],
            "timestamp": 1604712602,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>yeah, sure is.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215924489,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "My UI Conundrum",
            "submessages": [],
            "timestamp": 1604712826,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>there's a reason I haven't actually tried <em>working</em> on this; I look at the work to get a good toolkit going and bail.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215924540,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "My UI Conundrum",
            "submessages": [],
            "timestamp": 1604712865,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>:)</p>\n<p>I keep trying different ones myself and never loving any.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215924572,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "My UI Conundrum",
            "submessages": [],
            "timestamp": 1604712915,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>This pure-C single-file immediate mode gui looks pretty nice: <a href=\"https://github.com/Immediate-Mode-UI/Nuklear\">https://github.com/Immediate-Mode-UI/Nuklear</a></p>\n<blockquote>\n<p>Immediate-mode graphical user interface toolkit<br>\nSingle-header library<br>\nWritten in C89 (ANSI C)<br>\nSmall codebase (~18kLOC)<br>\nFocus on portability, efficiency and simplicity<br>\nNo dependencies (not even the standard library if not wanted)</p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215924798,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "My UI Conundrum",
            "submessages": [],
            "timestamp": 1604713260,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>D3 is a good idea, I haven't used it for years but should be able to pick it back up. Thanks Emil!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215924828,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f642",
                    "emoji_name": "smile",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "hackerschool@alphabeticaldisorder.com",
                        "full_name": "Emil Ng (he) (W2'15)",
                        "id": 7104
                    },
                    "user_id": 7104
                }
            ],
            "recipient_id": 20203,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "favorite languages / libraries for generative art",
            "submessages": [],
            "timestamp": 1604713305,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Brandon, unfortunately DXF is an interop requirement --- it's what my CAD software outputs and what the PCB software accepts as input. I could probably get away with drawing in the PCB software via it's Python API directly, but I'd still need to handle DXF on the input side.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215924913,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "favorite languages / libraries for generative art",
            "submessages": [],
            "timestamp": 1604713400,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've seen nuklear bounced around; one of these days I should try it.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215925023,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "My UI Conundrum",
            "submessages": [],
            "timestamp": 1604713509,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'll give JTS a try this morning and see if I can put some pokadots in a shape. Will report back.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215925110,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "favorite languages / libraries for generative art",
            "submessages": [],
            "timestamp": 1604713612,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>I want a kit that with minimal effort will let me poke at things that I've written.</p>\n</blockquote>\n<p><a href=\"https://github.com/ocornut/imgui\">https://github.com/ocornut/imgui</a> is very popular for that sort of thing. It doesn't have good support for a11y or non-latin languages, but it's very easy to use and has bindings in lots of languages.</p>\n<p><span class=\"user-mention\" data-user-id=\"255045\">@Ori Dean Bernstein (he) (W2'20)</span>  The author of nuklear no longer recommends using it and points at <a href=\"https://github.com/rxi/microui\">https://github.com/rxi/microui</a> instead.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215925192,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "My UI Conundrum",
            "submessages": [],
            "timestamp": 1604713701,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>interesting; what's the reasonin?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215925229,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "My UI Conundrum",
            "submessages": [],
            "timestamp": 1604713782,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>just tired of maintaining it?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215925232,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "My UI Conundrum",
            "submessages": [],
            "timestamp": 1604713788,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>or were there any design flaws that they feel are unfixable?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215925238,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "My UI Conundrum",
            "submessages": [],
            "timestamp": 1604713800,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>(I love reading design postmortems)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215925292,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "My UI Conundrum",
            "submessages": [],
            "timestamp": 1604713830,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p>It was in a tweet :D I think it was along the lines of \"I didn't know very much at the time, this is how it should have been done\"</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215925307,
            "is_me_message": false,
            "last_edit_timestamp": 1604714509,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "My UI Conundrum",
            "submessages": [],
            "timestamp": 1604713858,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f59b1bd52e790e176d04d3610ea3ada8?d=identicon&version=1",
            "client": "website",
            "content": "<p>I feel the same way about HTML and CSS: when I've done UI stuff (I think it qualifies as UI stuff... kind of building widgety interactive things for a website; is that UI?), I end up writing it all in JavaScript, generating elements with <code>createElement</code> and attaching them to the DOM with <code>appendChild</code>.  I have no idea if this is OK practice or if it's frowned upon for legitimate reasons that I'm completely oblivious too (if anyone has an opinion on that, I'd be keen to hear it!), but I found it actually fun to build UIs that way whereas I've found HTML+CSS painful the few times I've tried them</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 215927883,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "adeshar00@gmail.com",
            "sender_full_name": "Andrew Desharnais (he) (W1'20)",
            "sender_id": 8863,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "My UI Conundrum",
            "submessages": [],
            "timestamp": 1604717469,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/afcff71a280c619fe7f45af5df2f66b9617479fc?x=x&version=4",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"361923\">@Ben Morsillo</span> If you're up for something Lispy, have a look-see at the land of Clojure/ClojureScript (see also: <a class=\"stream\" data-stream-id=\"18946\" href=\"/#narrow/stream/18946-clojure\">#clojure</a> ). </p>\n<p>Re: CSS and HTML, this talk should show a way to do it the Clojure(Script) way <a href=\"https://www.youtube.com/watch?v=-jnJGNDoSXc\">Responsive Grid with Garden CLJS</a>. The talk features these libraries <a href=\"https://github.com/weavejester/hiccup\">hiccup</a>: HTML as Clojure data, and <a href=\"https://github.com/noprompt/garden\">garden</a>: CSS as Clojure data.</p>\n<p>One can use both of them in <a href=\"https://clojure.org\">Clojure</a>, e.g. to make a fully server-rendered web app. And one can also use them in <a href=\"https://clojurescript.org/\">ClojureScript</a>, for rich client-side functionality.</p>\n<p>Further, there's <a href=\"https://day8.github.io/re-frame/\">re-frame</a> for single-page \"reactive\" apps, and <em>still</em> further, there's <a href=\"https://cljsrn.org/\">ClojureScript + React Native</a> for Android/iOS apps.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read",
                "mentioned"
            ],
            "id": 216019401,
            "is_me_message": false,
            "last_edit_timestamp": 1604860905,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nathanisom27@gmail.com",
                        "full_name": "Nathan Isom (he) (W2'20)",
                        "id": 255190
                    },
                    "user_id": 255190
                }
            ],
            "recipient_id": 20203,
            "sender_email": "aditya.athalye@gmail.com",
            "sender_full_name": "Aditya Athalye (he) (SP1'20)",
            "sender_id": 263547,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "My UI Conundrum",
            "submessages": [],
            "timestamp": 1604860874,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"263547\">@Aditya Athalye (he) (SP1'20)</span>  oooooh, I'm currently diving into clojure and lisps.  This might be sort of perfect.</p>\n<p><span class=\"user-mention\" data-user-id=\"8863\">@Andrew Desharnais (he) (W1'20)</span>  I feel like we might benefit from some sort of support group.  Having problems with CSS seems like it's really, really common.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216020943,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "aditya.athalye@gmail.com",
                        "full_name": "Aditya Athalye (he) (SP1'20)",
                        "id": 263547
                    },
                    "user_id": 263547
                }
            ],
            "recipient_id": 20203,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "My UI Conundrum",
            "submessages": [],
            "timestamp": 1604863136,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>I have an idea for a game - and I want to test it out with you guys and develop the concept.  It's going to be pretty simple.</p>\n<p>Two coders play (perhaps more).  You start with a little piece of working code - anything from hello world to fizzbuzz or more complex if you're feeling froggy.  You modify the code by some constrained amount, like X LOC or function definitions (and perhaps, within certain parameters like - you must take the output of the last function and have a specified output for the next player to work with. I would love ideas about this) and pass the code back.  The idea would be to interpret what was sent back and modify it without breaking it, until someone could no longer grok what was going on.</p>\n<p>The point of this game, besides for fun, would be to flex your ability to read obfuscated / badly designed code, as well as expose new parts of whatever language you're working with (one winning strategy would be to use the most exotic parts of your standard library, the ones that your opponent is least likely to be familiar with).</p>\n<p>There  are two rules I can think of, off the top of my head, that would be totally necessary for a basic 'vanilla' implementation.  I imagine that if this is an idea with any sort of wings, many more modified versions could be conceived.  They are:</p>\n<p>1 - No using anything outside of the standard library of whatever language(s) you're working with.<br>\n2 - The amount of code you can add per turn should be limited, either by LOC or functions defined or some other metric - anyone got any ideas about this?</p>\n<p>I'm thinking a winner could be decided when you can  no longer modify the code and have it run.  I know for a fact that I'm missing components to make this idea work for real, and that any game would have to have some amount of handshakey chivalry to be interesting.  If this is interesting to any of you, I would love some input.  I feel like there's fun to be had here.  It is still a fairly raw idea.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216021633,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Coding Jenga, or Tennis, or something.",
            "submessages": [],
            "timestamp": 1604864079,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>addendum:  This could also be structured to have a Blue Team (who's aim is to refactor the code so it makes sense and runs) and a Red Team (whose job it is to obfuscate and create bugs).  Although I feel like the rule set for such a version would be more complex.  It seems to me that starting simple is the best way to zero in on a set of rules that's actually fun to play.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216021950,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Coding Jenga, or Tennis, or something.",
            "submessages": [],
            "timestamp": 1604864574,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f59b1bd52e790e176d04d3610ea3ada8?d=identicon&version=1",
            "client": "website",
            "content": "<p>[posted in the wrong stream]</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216024008,
            "is_me_message": false,
            "last_edit_timestamp": 1604867700,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "adeshar00@gmail.com",
            "sender_full_name": "Andrew Desharnais (he) (W1'20)",
            "sender_id": 8863,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Coding Jenga, or Tennis, or something.",
            "submessages": [],
            "timestamp": 1604867569,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>My bad.  Where should this go?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216024153,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Coding Jenga, or Tennis, or something.",
            "submessages": [],
            "timestamp": 1604867769,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f59b1bd52e790e176d04d3610ea3ada8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh no I meant that I posted something in the wrong stream and then deleted it, hehe</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216024158,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "adeshar00@gmail.com",
            "sender_full_name": "Andrew Desharnais (he) (W1'20)",
            "sender_id": 8863,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Coding Jenga, or Tennis, or something.",
            "submessages": [],
            "timestamp": 1604867792,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>ah. got it!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216024162,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Coding Jenga, or Tennis, or something.",
            "submessages": [],
            "timestamp": 1604867804,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/f59b1bd52e790e176d04d3610ea3ada8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Sorry I shoulda made that clearer!  And that idea sounds like it could be fun!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216024326,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "adeshar00@gmail.com",
            "sender_full_name": "Andrew Desharnais (he) (W1'20)",
            "sender_id": 8863,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Coding Jenga, or Tennis, or something.",
            "submessages": [],
            "timestamp": 1604868038,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f6bef626649c46b4cc3fd9f67c151a19170da5e?x=x&version=21",
            "client": "website",
            "content": "<p>sounds a little bit like Refucktoring</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216030718,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "jkozak@fmail.co.uk",
            "sender_full_name": "Jake \u26e4 Prozvyshe (they) (W1'17)",
            "sender_id": 8478,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Coding Jenga, or Tennis, or something.",
            "submessages": [],
            "timestamp": 1604877568,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f6bef626649c46b4cc3fd9f67c151a19170da5e?x=x&version=21",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"100774\">@Katie Allen (SP2'17)</span> has this repo: <a href=\"https://github.com/katieamazing/refucktoring\">https://github.com/katieamazing/refucktoring</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216030832,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "jkozak@fmail.co.uk",
            "sender_full_name": "Jake \u26e4 Prozvyshe (they) (W1'17)",
            "sender_id": 8478,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Coding Jenga, or Tennis, or something.",
            "submessages": [],
            "timestamp": 1604877718,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f6bef626649c46b4cc3fd9f67c151a19170da5e?x=x&version=21",
            "client": "website",
            "content": "<p>It might be useful to fork for your game</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216030876,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "jkozak@fmail.co.uk",
            "sender_full_name": "Jake \u26e4 Prozvyshe (they) (W1'17)",
            "sender_id": 8478,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Coding Jenga, or Tennis, or something.",
            "submessages": [],
            "timestamp": 1604877729,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>This is amazing - I'm definitely going to spend some time on this.</p>\n<p>For clarity: I don't want to write any code to make this.  I want to keep the rules so simple that you can just play a pick-up game with someone using gists (or whatever your preferred method of code trading is).  I suppose what I'm drilling at is the most basic and flexible implementation of a multiplayer refucktoring.</p>\n<p>The tests thing is really inspiring, here.  Maybe the way you start the game is to write no more than 25 LOC + a single test that must always pass.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216032141,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Coding Jenga, or Tennis, or something.",
            "submessages": [],
            "timestamp": 1604879540,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://www.handmade-seattle.com/\">Handmade Seattle</a> is this weekend (Nov 14-15). It's not obvious from the website but tickets are optional this year - tickets give you access to a private chat but you can  watch the live talks for free.</p>\n<p>Also there is at least one recurser speaking this year.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216127225,
            "is_me_message": false,
            "last_edit_timestamp": 1604947841,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "dabbagh.aos@gmail.com",
                        "full_name": "Aos Dabbagh (S2'17)",
                        "id": 101320
                    },
                    "user_id": 101320
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "victoria@unconventionaldata.ai",
                        "full_name": "Victoria Levchenko (she) (W2'19)",
                        "id": 198466
                    },
                    "user_id": 198466
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mail@nathanael0x4c.com",
                        "full_name": "Nate Lane (he) (W1'20)",
                        "id": 361690
                    },
                    "user_id": 361690
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "finartcialist@gmail.com",
                        "full_name": "Edith Viau (she) (F2'20)",
                        "id": 341049
                    },
                    "user_id": 341049
                }
            ],
            "recipient_id": 20203,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Handmade Seattle",
            "submessages": [],
            "timestamp": 1604947637,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "website",
            "content": "<p>this looks like a really solid lineup!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216131186,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Handmade Seattle",
            "submessages": [],
            "timestamp": 1604949573,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/692e4b98820a7c9bd5fe6c17408346c6e7f67c6b?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I'm looking for someone with experience deploying machine learning algorithms to web apps. Basically, I need some help determining if my stack is overkill, and if there's a more concise way to serve predictions to users than what I'm envisioning. Please let me know if you're free this week!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216225572,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "azhadsyed17@gmail.com",
            "sender_full_name": "Azhad Syed (he) (W1'20)",
            "sender_id": 363087,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "machine-learning",
            "submessages": [],
            "timestamp": 1605021286,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/50c0f109320065168bd7a918c9f5e205?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I'm still getting my head around this stuff, but would something like AWS lambda be applicable here?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216226554,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "imran@imranmalek.com",
            "sender_full_name": "Imran Malek (he) (W1'20)",
            "sender_id": 361178,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "machine-learning",
            "submessages": [],
            "timestamp": 1605021741,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/692e4b98820a7c9bd5fe6c17408346c6e7f67c6b?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Yes! I'm planning on incorporating AWS Lambda and Gateway API into my stack, but after hearing about others projects I'm not sure if that's necessary. </p>\n<p>Different stack, but <span class=\"user-mention\" data-user-id=\"361230\">@Rebecca Holley (she) (W1'20)</span>  I remember hearing you talk about deploying a Markov model to a predictive app...what does the process of getting that online/usable look like for you?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216227170,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "azhadsyed17@gmail.com",
            "sender_full_name": "Azhad Syed (he) (W1'20)",
            "sender_id": 363087,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "machine-learning",
            "submessages": [],
            "timestamp": 1605022031,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/244291d85dbf8643b55dd38d332797bd84cb3687?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Caveat: I'm using R (data wrangling/model building) and Shiny (web app), outside of those tools I'm afraid I'm not much help.<br>\nIf you're interested in the model building itself, <a class=\"stream\" data-stream-id=\"27684\" href=\"/#narrow/stream/27684-natural-language-processing\">#natural language processing</a> went over Markov models yesterday and there are a lot of people in that group with more expertise than I!</p>\n<p>My current biggest challenge is <strong> structuring/resizing/etc the model data so that it is small enough to load and run efficiently</strong> on the web app - without removing so much data that I lose accuracy. I think this is something that varies with the language you are using; what is the most concise, compact way to store data in your chosen language? Are there size limits built in to your server host? How can the server get the information it needs while loading the least amount of necessary data? I've been going over these questions for a while with my project and I'm still not sure I've come up with the best answer. <span class=\"user-mention\" data-user-id=\"363087\">@Azhad Syed (he) (W1'20)</span></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216231119,
            "is_me_message": false,
            "last_edit_timestamp": 1605024449,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "becca.a.holley@gmail.com",
            "sender_full_name": "Rebecca Holley (she) (W1'20)",
            "sender_id": 361230,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "machine-learning",
            "submessages": [],
            "timestamp": 1605023795,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/89b8e9df59b9bcfce1d79ff8409f474e879d2b7b?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"363087\">@Azhad Syed (he) (W1'20)</span>  Just curious - what kind of stack are you currently using? (I only have experience dealing with large scale ML serving systems, so what I'm used to is probably an overkill here)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216246948,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "helga.nikonova@gmail.com",
            "sender_full_name": "Olga Nikonova (she) (W1'20)",
            "sender_id": 360989,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "machine-learning",
            "submessages": [],
            "timestamp": 1605030371,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/692e4b98820a7c9bd5fe6c17408346c6e7f67c6b?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"360989\">@Olga Nikonova (she) (W1'20)</span> The plan is:</p>\n<ul>\n<li>S3 to store data and model</li>\n<li>CloudWatch event to trigger Lambdas function that downloads new data and updates model</li>\n<li>Fargate/ECS for app built using streamlit framework</li>\n<li>Gateway API to handle requests from Fargate/ECS</li>\n</ul>\n<p>Does that sound like the minimum I need, or am I overthinking something in your opinion?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216254438,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "azhadsyed17@gmail.com",
            "sender_full_name": "Azhad Syed (he) (W1'20)",
            "sender_id": 363087,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "machine-learning",
            "submessages": [],
            "timestamp": 1605033547,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/692e4b98820a7c9bd5fe6c17408346c6e7f67c6b?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"361178\">@Imran Malek (he) (W1'20)</span>  are you working in Pandas these days? Would you be willing to pair with me while I redesign a data pipeline? Let me know your avails</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216260776,
            "is_me_message": false,
            "last_edit_timestamp": 1605036094,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "azhadsyed17@gmail.com",
            "sender_full_name": "Azhad Syed (he) (W1'20)",
            "sender_id": 363087,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "machine-learning",
            "submessages": [],
            "timestamp": 1605036082,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/50c0f109320065168bd7a918c9f5e205?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"363087\">@Azhad Syed (he) (W1'20)</span>  I don't have  much recent experience but I would love to sit down with you walk through your pipeline as you develop it</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216261806,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "imran@imranmalek.com",
            "sender_full_name": "Imran Malek (he) (W1'20)",
            "sender_id": 361178,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "machine-learning",
            "submessages": [],
            "timestamp": 1605036549,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/50c0f109320065168bd7a918c9f5e205?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I should be free after 3pm tod</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216261893,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "azhadsyed17@gmail.com",
                        "full_name": "Azhad Syed (he) (W1'20)",
                        "id": 363087
                    },
                    "user_id": 363087
                }
            ],
            "recipient_id": 20203,
            "sender_email": "imran@imranmalek.com",
            "sender_full_name": "Imran Malek (he) (W1'20)",
            "sender_id": 361178,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "machine-learning",
            "submessages": [],
            "timestamp": 1605036590,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/692e4b98820a7c9bd5fe6c17408346c6e7f67c6b?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Sweet let's meet at 4?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216262426,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "azhadsyed17@gmail.com",
            "sender_full_name": "Azhad Syed (he) (W1'20)",
            "sender_id": 363087,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "machine-learning",
            "submessages": [],
            "timestamp": 1605036800,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/50c0f109320065168bd7a918c9f5e205?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"363087\">@Azhad Syed (he) (W1'20)</span> <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216262946,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "imran@imranmalek.com",
            "sender_full_name": "Imran Malek (he) (W1'20)",
            "sender_id": 361178,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "machine-learning",
            "submessages": [],
            "timestamp": 1605037028,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/89b8e9df59b9bcfce1d79ff8409f474e879d2b7b?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"363087\">Azhad Syed (he) (W1'20)</span> <a href=\"#narrow/stream/18957-programming/topic/machine-learning/near/216254438\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"360989\">Olga Nikonova (she) (W1'20)</span> The plan is:</p>\n<ul>\n<li>S3 to store data and model</li>\n<li>CloudWatch event to trigger Lambdas function that downloads new data and updates model</li>\n<li>Fargate/ECS for app built using streamlit framework</li>\n<li>Gateway API to handle requests from Fargate/ECS</li>\n</ul>\n<p>Does that sound like the minimum I need, or am I overthinking something in your opinion?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"363087\">@Azhad Syed (he) (W1'20)</span>  That sounds pretty reasonable to me.</p>\n<p>I would assume that AWS might have a more dedicated solution for handling model retraining life-cycle to combine the first 2 things (e.g. <a href=\"https://aws.amazon.com/machine-learning/amis/\">https://aws.amazon.com/machine-learning/amis/</a>). But if your training workflow is very straight-forward, this might end up being way more heavy-weight.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216266435,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "helga.nikonova@gmail.com",
            "sender_full_name": "Olga Nikonova (she) (W1'20)",
            "sender_id": 360989,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "machine-learning",
            "submessages": [],
            "timestamp": 1605038736,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/89b8e9df59b9bcfce1d79ff8409f474e879d2b7b?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Unrelated but relevant to general ML: me and <span class=\"user-mention\" data-user-id=\"360768\">@Kelly Foulk (she) (W1'20)</span>  are trying to revive <a class=\"stream\" data-stream-id=\"247528\" href=\"/#narrow/stream/247528-Kaggle-Challenges\">#Kaggle Challenges</a> stream, come join if you are interested.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216266646,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "2764",
                    "emoji_name": "heart",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "klf16@my.fsu.edu",
                        "full_name": "Kelly Foulk (she) (W1'20)",
                        "id": 360768
                    },
                    "user_id": 360768
                }
            ],
            "recipient_id": 20203,
            "sender_email": "helga.nikonova@gmail.com",
            "sender_full_name": "Olga Nikonova (she) (W1'20)",
            "sender_id": 360989,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "machine-learning",
            "submessages": [],
            "timestamp": 1605038827,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/692e4b98820a7c9bd5fe6c17408346c6e7f67c6b?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"360989\">@Olga Nikonova (she) (W1'20)</span>  By my estimation the training is straightforward - from a pandas table to xgboost.train() method. Deep learning AMI's might be overkill, so for now I'll stick to above. Thanks for weighing in!!!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216266760,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f43c",
                    "emoji_name": "panda",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "helga.nikonova@gmail.com",
                        "full_name": "Olga Nikonova (she) (W1'20)",
                        "id": 360989
                    },
                    "user_id": 360989
                }
            ],
            "recipient_id": 20203,
            "sender_email": "azhadsyed17@gmail.com",
            "sender_full_name": "Azhad Syed (he) (W1'20)",
            "sender_id": 363087,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "machine-learning",
            "submessages": [],
            "timestamp": 1605038878,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/692e4b98820a7c9bd5fe6c17408346c6e7f67c6b?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Has anyone encountered this warning message in Super Collider? </p>\n<p><code>Buffer UGen channel mismatch: expected 1, yet buffer has 2 channels</code></p>\n<p>If so, does anyone know how to suppress it?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216272896,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "azhadsyed17@gmail.com",
            "sender_full_name": "Azhad Syed (he) (W1'20)",
            "sender_id": 363087,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Super Collider",
            "submessages": [],
            "timestamp": 1605041659,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/50c0f109320065168bd7a918c9f5e205?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"363087\">@Azhad Syed (he) (W1'20)</span> LMK what station you want to hop into</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216273712,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "imran@imranmalek.com",
            "sender_full_name": "Imran Malek (he) (W1'20)",
            "sender_id": 361178,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "machine-learning",
            "submessages": [],
            "timestamp": 1605042075,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8b28fb7de9aa73dd6555215503e92310?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>hey can i jump in and shadow on this, I just want to see what machine learning is like</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216273864,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "lmassiah37@gmail.com",
            "sender_full_name": "Lloyd Massiah (he) (W1'20)",
            "sender_id": 362560,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "machine-learning",
            "submessages": [],
            "timestamp": 1605042144,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/692e4b98820a7c9bd5fe6c17408346c6e7f67c6b?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Join us at Pair 1!!!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216273903,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "azhadsyed17@gmail.com",
            "sender_full_name": "Azhad Syed (he) (W1'20)",
            "sender_id": 363087,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "machine-learning",
            "submessages": [],
            "timestamp": 1605042165,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/50c0f109320065168bd7a918c9f5e205?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>sorry <span class=\"user-mention\" data-user-id=\"363087\">@Azhad Syed (he) (W1'20)</span></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216278898,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "imran@imranmalek.com",
            "sender_full_name": "Imran Malek (he) (W1'20)",
            "sender_id": 361178,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "machine-learning",
            "submessages": [],
            "timestamp": 1605044625,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/50c0f109320065168bd7a918c9f5e205?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I was saying at the very beginning of your cleaning, just see what you can toss aside now that you know what you want to keep and use</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216278967,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "imran@imranmalek.com",
            "sender_full_name": "Imran Malek (he) (W1'20)",
            "sender_id": 361178,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "machine-learning",
            "submessages": [],
            "timestamp": 1605044647,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/692e4b98820a7c9bd5fe6c17408346c6e7f67c6b?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>hopping back in to pair 1!!! <span class=\"user-mention\" data-user-id=\"361178\">@Imran Malek (he) (W1'20)</span> <span class=\"user-mention\" data-user-id=\"263533\">@Ifenna Ozoekwe-Awagu (he) (SP1'20)</span> <span class=\"user-mention\" data-user-id=\"362560\">@Lloyd Massiah (he) (W1'20)</span></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216278973,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "azhadsyed17@gmail.com",
            "sender_full_name": "Azhad Syed (he) (W1'20)",
            "sender_id": 363087,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "machine-learning",
            "submessages": [],
            "timestamp": 1605044650,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/692e4b98820a7c9bd5fe6c17408346c6e7f67c6b?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>my session keeps timing out guys! I think I have it from here, and will try and make my custom class work. Thanks for your input and time!!!!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216283368,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "azhadsyed17@gmail.com",
            "sender_full_name": "Azhad Syed (he) (W1'20)",
            "sender_id": 363087,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "machine-learning",
            "submessages": [],
            "timestamp": 1605047135,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/50c0f109320065168bd7a918c9f5e205?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Absolutely, thank you!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216283377,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "imran@imranmalek.com",
            "sender_full_name": "Imran Malek (he) (W1'20)",
            "sender_id": 361178,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "machine-learning",
            "submessages": [],
            "timestamp": 1605047143,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8b28fb7de9aa73dd6555215503e92310?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>yes, thank you for letting me participate</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216283410,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "lmassiah37@gmail.com",
            "sender_full_name": "Lloyd Massiah (he) (W1'20)",
            "sender_id": 362560,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "machine-learning",
            "submessages": [],
            "timestamp": 1605047160,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/203ece6b30be5cb94c1a95a8a4976d34a584298f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I think you mentioned the wrong Ife. Thanks for letting me watch on too though, it was good to see that process</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216298691,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ilawal1996@gmail.com",
            "sender_full_name": "Ifeoluwa Lawal (he) (F1'20)",
            "sender_id": 327910,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "machine-learning",
            "submessages": [],
            "timestamp": 1605058984,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/692e4b98820a7c9bd5fe6c17408346c6e7f67c6b?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"327910\">@Ifeoluwa Lawal (he) (F1'20)</span> <span class=\"user-mention\" data-user-id=\"263533\">@Ifenna Ozoekwe-Awagu (he) (SP1'20)</span> SORRY! If only I had gone one letter more, learned for next time hahaha</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216298915,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "azhadsyed17@gmail.com",
            "sender_full_name": "Azhad Syed (he) (W1'20)",
            "sender_id": 363087,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "machine-learning",
            "submessages": [],
            "timestamp": 1605059175,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/203ece6b30be5cb94c1a95a8a4976d34a584298f?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hahaha no worries. I @mentioned the wrong Jake once during my batch too, so it happens</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216298962,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f606",
                    "emoji_name": "laughing",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mathvikki@gmail.com",
                        "full_name": "Vikki Jean Kowalski Williams (W1'20)",
                        "id": 361306
                    },
                    "user_id": 361306
                },
                {
                    "emoji_code": "1f606",
                    "emoji_name": "laughing",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "me@lelandpaul.com",
                        "full_name": "Leland Paul Kusmer (they) (F2'20)",
                        "id": 342407
                    },
                    "user_id": 342407
                }
            ],
            "recipient_id": 20203,
            "sender_email": "ilawal1996@gmail.com",
            "sender_full_name": "Ifeoluwa Lawal (he) (F1'20)",
            "sender_id": 327910,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "machine-learning",
            "submessages": [],
            "timestamp": 1605059254,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/692e4b98820a7c9bd5fe6c17408346c6e7f67c6b?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I just stumbled upon Cassie Kozyrkov's Medium blog, these were thought-provoking reads for me: <a href=\"https://medium.com/@kozyrkov\">read here</a>.</p>\n<p>As someone interested in transitioning into a data-centric career, I took away alot from Cassie's perspective on the different data roles in organizations today.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216301856,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "klf16@my.fsu.edu",
                        "full_name": "Kelly Foulk (she) (W1'20)",
                        "id": 360768
                    },
                    "user_id": 360768
                }
            ],
            "recipient_id": 20203,
            "sender_email": "azhadsyed17@gmail.com",
            "sender_full_name": "Azhad Syed (he) (W1'20)",
            "sender_id": 363087,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "data-science",
            "submessages": [],
            "timestamp": 1605062280,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b4a0313a5b4da07f6dda63ed2885e1c2de660cba?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I am not sure if this is too much to ask or if this is the right stream for this. </p>\n<p>I am relatively new to Javascript and have no experience with Typescript. I am trying to understand this almost undocumented repo <a href=\"https://github.com/WorldBrain/storex-hub-demo-memex-gist-sharer/\">WorldBrain/storex-hub-demo-memex-gist-sharer: Demo app for Storex Hub that shares pages saved in Memex to a Gist</a>.</p>\n<p>It will be great if someone can help me figure out how the entire project is working and a few specific TS syntax. I can write down questions in this thread or do a pairing session or something.</p>\n<p>Related API documentation : <a href=\"https://worldbrain.github.io/storex-docs/#/storex-hub/guides/memex/\">Storex Documentation</a></p>\n<p>Thanks in advance!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216318082,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "7rat13@gmail.com",
            "sender_full_name": "Sayan Sarkar (they) (W1'20)",
            "sender_id": 361862,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "help understand a typescript codebase",
            "submessages": [],
            "timestamp": 1605083324,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3f4785d95e43ecfb2f20d49e6ec824dc?d=identicon&version=1",
            "client": "website",
            "content": "<p>Tagging <span class=\"user-mention\" data-user-id=\"342702\">@Jakub Neander (he) (F2'20)</span>, who I believe has been doing some TypeScript work and might be interested :)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216354734,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "nick@recurse.com",
            "sender_full_name": "Nick Bergson-Shilcock (he)",
            "sender_id": 811,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "help understand a typescript codebase",
            "submessages": [],
            "timestamp": 1605106082,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6ca38a4d0df1f7bab53c8089bdbfb83fe0baec4f?x=x&version=3",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"361862\">@Sayan Sarkar (they) (W1'20)</span>, i also have experience with typescript if you'd like another set of eyes! it may be easiest to walk through the code over a pairing session, but i'm also happy to answer any specific qs (especially syntax, which i know can be a little confusing at first) on zulip.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216358189,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "7rat13@gmail.com",
                        "full_name": "Sayan Sarkar (they) (W1'20)",
                        "id": 361862
                    },
                    "user_id": 361862
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "nick@recurse.com",
                        "full_name": "Nick Bergson-Shilcock (he)",
                        "id": 811
                    },
                    "user_id": 811
                }
            ],
            "recipient_id": 20203,
            "sender_email": "lizzthabet@gmail.com",
            "sender_full_name": "Lizz Thabet (she) (F2'20)",
            "sender_id": 342000,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "help understand a typescript codebase",
            "submessages": [],
            "timestamp": 1605107730,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b4a0313a5b4da07f6dda63ed2885e1c2de660cba?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"342000\">@Lizz Thabet (she) (F2'20)</span>  Thank you very much. PM-ing you!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216367901,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "7rat13@gmail.com",
            "sender_full_name": "Sayan Sarkar (they) (W1'20)",
            "sender_id": 361862,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "help understand a typescript codebase",
            "submessages": [],
            "timestamp": 1605112317,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f0f3bb373c0a28296b6f28a6664cc4d5a0ee3b6c?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>If you are going to pair program, would you mind if someone tagged along for a little bit? I've got some Javascript experience (no real Typescript experience), but I'd love to spend some time reviewing a new code base.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216370528,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "langer.md@gmail.com",
            "sender_full_name": "Mark Langer (he) (W1'20)",
            "sender_id": 360454,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "help understand a typescript codebase",
            "submessages": [],
            "timestamp": 1605113571,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"360454\">@Mark Langer (he) (W1'20)</span> <span class=\"user-mention\" data-user-id=\"8478\">@Jake \u26e4 Prozvyshe (they) (W1'17)</span> @anyone else who has an interest in cookies.  Putting this in zulip as a thread to share information and research about cookies and tracking, as we've all expressed an interest</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216391637,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Cookie research",
            "submessages": [],
            "timestamp": 1605124703,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f6bef626649c46b4cc3fd9f67c151a19170da5e?x=x&version=21",
            "client": "website",
            "content": "<p><a href=\"https://scholar.google.com/scholar?hl=en&amp;as_sdt=0%2C31&amp;q=browser+fingerprinting+2020&amp;btnG=\">https://scholar.google.com/scholar?hl=en&amp;as_sdt=0%2C31&amp;q=browser+fingerprinting+2020&amp;btnG=</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216393664,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "jkozak@fmail.co.uk",
            "sender_full_name": "Jake \u26e4 Prozvyshe (they) (W1'17)",
            "sender_id": 8478,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Cookie research",
            "submessages": [],
            "timestamp": 1605125699,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f6bef626649c46b4cc3fd9f67c151a19170da5e?x=x&version=21",
            "client": "website",
            "content": "<p><a href=\"https://arxiv.org/abs/2008.04480\">https://arxiv.org/abs/2008.04480</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216393688,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "jkozak@fmail.co.uk",
            "sender_full_name": "Jake \u26e4 Prozvyshe (they) (W1'17)",
            "sender_id": 8478,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Cookie research",
            "submessages": [],
            "timestamp": 1605125714,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f0f3bb373c0a28296b6f28a6664cc4d5a0ee3b6c?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Thanks for setting this up, Ben.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216399592,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "langer.md@gmail.com",
            "sender_full_name": "Mark Langer (he) (W1'20)",
            "sender_id": 360454,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Cookie research",
            "submessages": [],
            "timestamp": 1605129168,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>No problem!  Let's dump whatever we find here and reconvene when we have a better sense of what projects / interests there are and how they overlap</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216400218,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Cookie research",
            "submessages": [],
            "timestamp": 1605129541,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee0ddeb6695d909dc44e4ccc9fc543c7b494c7d0?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"363087\">@Azhad Syed (he) (W1'20)</span> related resources I've found helpful (with plenty of examples from real teams growing bumpily):</p>\n<ul>\n<li><a href=\"https://www.manning.com/books/build-a-career-in-data-science\">https://www.manning.com/books/build-a-career-in-data-science</a> (for audience of people in related more junior or adjacent roles)</li>\n<li><a href=\"https://counting.substack.com/people/6437090-randy-au\">https://counting.substack.com/people/6437090-randy-au</a>, eg this post on <a href=\"https://counting.substack.com/p/showing-value-as-a-support-data-scientist\">\"Showing value as a data scientist\"</a></li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216407902,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "danammiller360@gmail.com",
            "sender_full_name": "Dana Miller (she) (F2'20)",
            "sender_id": 342383,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "data-science",
            "submessages": [],
            "timestamp": 1605134968,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f0f3bb373c0a28296b6f28a6664cc4d5a0ee3b6c?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hi all,<br>\nSeems like a few people are interested in going through SICP (<a href=\"https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book.html\">https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book.html</a>). This also appears to be a regular enterprise here at RC, and there is a stream (\"sicp study group\") already dedicated to it. If that's at all interesting to you, subscribe to that stream, and we can start chatting about what the study group could look like for W1'20, F2'20, etc.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216412259,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mathvikki@gmail.com",
                        "full_name": "Vikki Jean Kowalski Williams (W1'20)",
                        "id": 361306
                    },
                    "user_id": 361306
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "bud.coulson@gmail.com",
                        "full_name": "Bud B Coulson (he) (F2'20)",
                        "id": 341026
                    },
                    "user_id": 341026
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mail@nathanael0x4c.com",
                        "full_name": "Nate Lane (he) (W1'20)",
                        "id": 361690
                    },
                    "user_id": 361690
                }
            ],
            "recipient_id": 20203,
            "sender_email": "langer.md@gmail.com",
            "sender_full_name": "Mark Langer (he) (W1'20)",
            "sender_id": 360454,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "SICP study group (other stream)",
            "submessages": [],
            "timestamp": 1605138997,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee0ddeb6695d909dc44e4ccc9fc543c7b494c7d0?x=x&version=2",
            "client": "website",
            "content": "<p>As y'all may have heard from a facilitator, writing a BitTorrent client is a project that many former RCers have embarked on to understand structuring a multi-part program in your target programming language of choice at varying levels of complexity. There's even an <a href=\"https://github.com/recursecenter/wiki/wiki/BitTorrent\">RC wiki entry</a> about it! No previous BitTorrent experience required. </p>\n<p>I'm interested to work on this to understand building up a larger  python program that's not related to data analysis and will require a bunch of different parts of the python standard library. </p>\n<p>If anyone else is interested (in any language) let me know! We could set up eg 'hack-and-tell' sessions to share learnings and accountability along the way</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216420347,
            "is_me_message": false,
            "last_edit_timestamp": 1605147619,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "danammiller360@gmail.com",
            "sender_full_name": "Dana Miller (she) (F2'20)",
            "sender_id": 342383,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Writing BitTorrent clients?",
            "submessages": [],
            "timestamp": 1605147369,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee0ddeb6695d909dc44e4ccc9fc543c7b494c7d0?x=x&version=2",
            "client": "website",
            "content": "<p>Pinging <span class=\"user-mention\" data-user-id=\"344883\">@George Michel (he) (F2'20)</span> who'd previously expressed some interest in working on this in JS, and who shared these links for additional context:</p>\n<ul>\n<li><a href=\"http://web.cs.ucla.edu/classes/cs217/05BitTorrent.pdf\">http://web.cs.ucla.edu/classes/cs217/05BitTorrent.pdf</a> </li>\n<li>JavaScript implementation:  <a href=\"https://allenkim67.github.io/programming/2016/05/04/how-to-make-your-own-bittorrent-client.html\">https://allenkim67.github.io/programming/2016/05/04/how-to-make-your-own-bittorrent-client.html</a></li>\n</ul>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216420462,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "danammiller360@gmail.com",
            "sender_full_name": "Dana Miller (she) (F2'20)",
            "sender_id": 342383,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Writing BitTorrent clients?",
            "submessages": [],
            "timestamp": 1605147574,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7e1c0b3147c56cd2c016b2f5282012e9b7f7db90?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hi Dana! I am definitely interested in this - I have received the advice to build a bitTorrent client a couple of times as well and would love some pointers to get started.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216422263,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "danammiller360@gmail.com",
                        "full_name": "Dana Miller (she) (F2'20)",
                        "id": 342383
                    },
                    "user_id": 342383
                }
            ],
            "recipient_id": 20203,
            "sender_email": "sai9raman@gmail.com",
            "sender_full_name": "Sai Raman (he) (m8'20)",
            "sender_id": 360460,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Writing BitTorrent clients?",
            "submessages": [],
            "timestamp": 1605149725,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee0ddeb6695d909dc44e4ccc9fc543c7b494c7d0?x=x&version=2",
            "client": "website",
            "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> <span class=\"user-mention\" data-user-id=\"360460\">@Sai Raman (he) (m8'20)</span> I'm new to this topic as well. What language are you thinking to write in? Former RCer Kristan W's writeup <a href=\"http://www.kristenwidman.com/blog/33/how-to-write-a-bittorrent-client-part-1/\">here</a> is the most detailed guide I've seen so far. </p>\n<p>I started a shared editable doc <a href=\"https://docs.google.com/document/d/1ITDhZcsu3UZf7tsC6IuRLhQ7StFPqIh5uVYtyybDtv8/edit\">here</a> to collect questions and resources. How about setting a check-in to discuss tomorrow afternoon or Friday?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216422835,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "danammiller360@gmail.com",
            "sender_full_name": "Dana Miller (she) (F2'20)",
            "sender_id": 342383,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Writing BitTorrent clients?",
            "submessages": [],
            "timestamp": 1605150401,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7e1c0b3147c56cd2c016b2f5282012e9b7f7db90?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I am thinking of Python, since thats the language I am most familiar with. I will go through the write-up. <br>\nThe editable doc and the check-in tomorrow both sounds great to me! Appreciate you setting this up</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216423029,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "sai9raman@gmail.com",
            "sender_full_name": "Sai Raman (he) (m8'20)",
            "sender_id": 360460,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Writing BitTorrent clients?",
            "submessages": [],
            "timestamp": 1605150664,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee0ddeb6695d909dc44e4ccc9fc543c7b494c7d0?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"360460\">@Sai Raman (he) (m8'20)</span> Would 11:30 am ET on Friday work for you ? I think I'll need tomorrow to catch up on other projects and read for this</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216423648,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "danammiller360@gmail.com",
            "sender_full_name": "Dana Miller (she) (F2'20)",
            "sender_id": 342383,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Writing BitTorrent clients?",
            "submessages": [],
            "timestamp": 1605151447,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7e1c0b3147c56cd2c016b2f5282012e9b7f7db90?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"342383\">Dana Miller (she) (F2'20)</span> <a href=\"#narrow/stream/18957-programming/topic/Writing.20BitTorrent.20clients.3F/near/216423648\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"360460\">Sai Raman (he) (m8'20)</span> Would 11:30 am ET on Friday work for you ? I think I'll need tomorrow to catch up on other projects and read for this</p>\n</blockquote>\n<p>Yeah works for me! Thank you</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216423743,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "danammiller360@gmail.com",
                        "full_name": "Dana Miller (she) (F2'20)",
                        "id": 342383
                    },
                    "user_id": 342383
                }
            ],
            "recipient_id": 20203,
            "sender_email": "sai9raman@gmail.com",
            "sender_full_name": "Sai Raman (he) (m8'20)",
            "sender_id": 360460,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Writing BitTorrent clients?",
            "submessages": [],
            "timestamp": 1605151571,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8e68d48b833a687d791d034b420f7fc1621e0d3c?x=x&version=2",
            "client": "website",
            "content": "<p>Ooo, I'm into this! I wrote a BitTorrent tracker a few years ago,  so I have a passing familiarity with how the protocol works. Sounds like a job for... <img alt=\":rust:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/13/emoji/images/18704.png\" title=\"rust\"></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216483685,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "recurse@email.mikkel.ca",
            "sender_full_name": "Mikkel Paulson (he) (W1'20)",
            "sender_id": 360490,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Writing BitTorrent clients?",
            "submessages": [],
            "timestamp": 1605195186,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/71e1c5c9d32bdce5ab4ce166c7f35520cbfd3d56?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>curious about this as well. may just audit though cause i'm interested in the topic but kind of fully committed on projects right now.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216487723,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "12795",
                    "emoji_name": "plus1",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "lmassiah37@gmail.com",
                        "full_name": "Lloyd Massiah (he) (W1'20)",
                        "id": 362560
                    },
                    "user_id": 362560
                },
                {
                    "emoji_code": "12795",
                    "emoji_name": "plus1",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "mail@nathanael0x4c.com",
                        "full_name": "Nate Lane (he) (W1'20)",
                        "id": 361690
                    },
                    "user_id": 361690
                }
            ],
            "recipient_id": 20203,
            "sender_email": "bradyf@hey.com",
            "sender_full_name": "Brady Fontenot (he) (F2'20)",
            "sender_id": 342266,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Writing BitTorrent clients?",
            "submessages": [],
            "timestamp": 1605196795,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8e68d48b833a687d791d034b420f7fc1621e0d3c?x=x&version=2",
            "client": "website",
            "content": "<p>Would anyone be interested in attending a half-hour tutorial on bootstrapping projects with Docker? I'm not planning on getting deep into the weeds on how Docker works or how to use it in production, just focusing in on the angle of throwing something together that'll run your code in an encapsulated environment (and how to help your collaborators do the same).</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216507740,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "sai9raman@gmail.com",
                        "full_name": "Sai Raman (he) (m8'20)",
                        "id": 360460
                    },
                    "user_id": 360460
                },
                {
                    "emoji_code": "19016",
                    "emoji_name": "docker",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "victoria@unconventionaldata.ai",
                        "full_name": "Victoria Levchenko (she) (W2'19)",
                        "id": 198466
                    },
                    "user_id": 198466
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "lmassiah37@gmail.com",
                        "full_name": "Lloyd Massiah (he) (W1'20)",
                        "id": 362560
                    },
                    "user_id": 362560
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "me@lelandpaul.com",
                        "full_name": "Leland Paul Kusmer (they) (F2'20)",
                        "id": 342407
                    },
                    "user_id": 342407
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "melanie@imfeld.info",
                        "full_name": "Melanie Imfeld (she) (F2'20)",
                        "id": 342311
                    },
                    "user_id": 342311
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jemmaissroff@gmail.com",
                        "full_name": "Jemma Issroff (she) (F2'20)",
                        "id": 341038
                    },
                    "user_id": 341038
                }
            ],
            "recipient_id": 20203,
            "sender_email": "recurse@email.mikkel.ca",
            "sender_full_name": "Mikkel Paulson (he) (W1'20)",
            "sender_id": 360490,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Docker tutorial",
            "submessages": [],
            "timestamp": 1605205396,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b1627e1eeec422888fbab24a96e4d894e1c64f66?x=x&version=2",
            "client": "website",
            "content": "<p>interested,for sure</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216508436,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "benmorsillo@gmail.com",
            "sender_full_name": "Ben Morsillo (W1'20)",
            "sender_id": 361923,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Docker tutorial",
            "submessages": [],
            "timestamp": 1605205726,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/620d0eb7fcb87b272b387cf33e4ed314?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>(edited, confused for something else)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216510667,
            "is_me_message": false,
            "last_edit_timestamp": 1605206819,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "me@captnemo.in",
            "sender_full_name": "Nemo (he) (S1'20)",
            "sender_id": 301256,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Docker tutorial",
            "submessages": [],
            "timestamp": 1605206783,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/1383ef3ae8feb720ba31c6d44d34acb5ecf85b39?x=x&version=2",
            "client": "website",
            "content": "<p>Will also be dropping by, definitely interested!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216510791,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "amandagalemmo@gmail.com",
            "sender_full_name": "Amanda Hong Galemmo (she) (F2'20)",
            "sender_id": 342347,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Writing BitTorrent clients?",
            "submessages": [],
            "timestamp": 1605206844,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/50c0f109320065168bd7a918c9f5e205?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Docker continues to be a mystery to me so I would also be interested</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216511620,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "imran@imranmalek.com",
            "sender_full_name": "Imran Malek (he) (W1'20)",
            "sender_id": 361178,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Docker tutorial",
            "submessages": [],
            "timestamp": 1605207246,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f6dabe79f4348d5f0e27cd4a75032580526b9c5c?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>I know the Docker basics, but I've never quite understood how to leverage it...so definitely interested!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216512118,
            "is_me_message": false,
            "last_edit_timestamp": 1605207469,
            "reactions": [
                {
                    "emoji_code": "12795",
                    "emoji_name": "plus1",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "danammiller360@gmail.com",
                        "full_name": "Dana Miller (she) (F2'20)",
                        "id": 342383
                    },
                    "user_id": 342383
                }
            ],
            "recipient_id": 20203,
            "sender_email": "melanie@imfeld.info",
            "sender_full_name": "Melanie Imfeld (she) (F2'20)",
            "sender_id": 342311,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Docker tutorial",
            "submessages": [],
            "timestamp": 1605207462,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/692e4b98820a7c9bd5fe6c17408346c6e7f67c6b?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>(deleted)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216528648,
            "is_me_message": false,
            "last_edit_timestamp": 1605215218,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "azhadsyed17@gmail.com",
            "sender_full_name": "Azhad Syed (he) (W1'20)",
            "sender_id": 363087,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "FoxDot",
            "submessages": [],
            "timestamp": 1605215203,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee0ddeb6695d909dc44e4ccc9fc543c7b494c7d0?x=x&version=2",
            "client": "website",
            "content": "<p>/poll &lt;Poll for new BitTorrent project meetup time (moving to Monday)&gt;</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216632694,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "bradyf@hey.com",
                        "full_name": "Brady Fontenot (he) (F2'20)",
                        "id": 342266
                    },
                    "user_id": 342266
                }
            ],
            "recipient_id": 20203,
            "sender_email": "danammiller360@gmail.com",
            "sender_full_name": "Dana Miller (she) (F2'20)",
            "sender_id": 342383,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Writing BitTorrent clients?",
            "submessages": [
                {
                    "content": "{\"widget_type\": \"poll\", \"extra_data\": {\"question\": \"<Poll for new BitTorrent project meetup time (moving to Monday)>\", \"options\": []}}",
                    "id": 45036,
                    "message_id": 216632694,
                    "msg_type": "widget",
                    "sender_id": 342383
                },
                {
                    "content": "{\"type\":\"new_option\",\"idx\":1,\"option\":\"Monday 9 am ET\"}",
                    "id": 45037,
                    "message_id": 216632694,
                    "msg_type": "widget",
                    "sender_id": 342383
                },
                {
                    "content": "{\"type\":\"new_option\",\"idx\":2,\"option\":\"Monday 10 am ET\"}",
                    "id": 45038,
                    "message_id": 216632694,
                    "msg_type": "widget",
                    "sender_id": 342383
                },
                {
                    "content": "{\"type\":\"new_option\",\"idx\":3,\"option\":\"Monday 11 am ET\"}",
                    "id": 45039,
                    "message_id": 216632694,
                    "msg_type": "widget",
                    "sender_id": 342383
                },
                {
                    "content": "{\"type\":\"new_option\",\"idx\":4,\"option\":\"Monday noon ET\"}",
                    "id": 45040,
                    "message_id": 216632694,
                    "msg_type": "widget",
                    "sender_id": 342383
                },
                {
                    "content": "{\"type\":\"new_option\",\"idx\":5,\"option\":\"Monday 1pm ET\"}",
                    "id": 45041,
                    "message_id": 216632694,
                    "msg_type": "widget",
                    "sender_id": 342383
                },
                {
                    "content": "{\"type\":\"vote\",\"key\":\"342383,1\",\"vote\":1}",
                    "id": 45042,
                    "message_id": 216632694,
                    "msg_type": "widget",
                    "sender_id": 342383
                },
                {
                    "content": "{\"type\":\"vote\",\"key\":\"342383,2\",\"vote\":1}",
                    "id": 45043,
                    "message_id": 216632694,
                    "msg_type": "widget",
                    "sender_id": 342383
                },
                {
                    "content": "{\"type\":\"vote\",\"key\":\"342383,3\",\"vote\":1}",
                    "id": 45044,
                    "message_id": 216632694,
                    "msg_type": "widget",
                    "sender_id": 342383
                },
                {
                    "content": "{\"type\":\"vote\",\"key\":\"342383,4\",\"vote\":1}",
                    "id": 45045,
                    "message_id": 216632694,
                    "msg_type": "widget",
                    "sender_id": 342383
                },
                {
                    "content": "{\"type\":\"vote\",\"key\":\"342383,5\",\"vote\":1}",
                    "id": 45046,
                    "message_id": 216632694,
                    "msg_type": "widget",
                    "sender_id": 342383
                },
                {
                    "content": "{\"type\":\"vote\",\"key\":\"342383,5\",\"vote\":-1}",
                    "id": 45047,
                    "message_id": 216632694,
                    "msg_type": "widget",
                    "sender_id": 342383
                },
                {
                    "content": "{\"type\":\"vote\",\"key\":\"342383,4\",\"vote\":-1}",
                    "id": 45048,
                    "message_id": 216632694,
                    "msg_type": "widget",
                    "sender_id": 342383
                },
                {
                    "content": "{\"type\":\"vote\",\"key\":\"342383,3\",\"vote\":-1}",
                    "id": 45049,
                    "message_id": 216632694,
                    "msg_type": "widget",
                    "sender_id": 342383
                },
                {
                    "content": "{\"type\":\"vote\",\"key\":\"342383,2\",\"vote\":-1}",
                    "id": 45050,
                    "message_id": 216632694,
                    "msg_type": "widget",
                    "sender_id": 342383
                },
                {
                    "content": "{\"type\":\"vote\",\"key\":\"342383,1\",\"vote\":-1}",
                    "id": 45051,
                    "message_id": 216632694,
                    "msg_type": "widget",
                    "sender_id": 342383
                },
                {
                    "content": "{\"type\":\"vote\",\"key\":\"342383,4\",\"vote\":1}",
                    "id": 45052,
                    "message_id": 216632694,
                    "msg_type": "widget",
                    "sender_id": 342266
                },
                {
                    "content": "{\"type\":\"vote\",\"key\":\"342383,5\",\"vote\":1}",
                    "id": 45053,
                    "message_id": 216632694,
                    "msg_type": "widget",
                    "sender_id": 342266
                },
                {
                    "content": "{\"type\":\"vote\",\"key\":\"342383,4\",\"vote\":1}",
                    "id": 45086,
                    "message_id": 216632694,
                    "msg_type": "widget",
                    "sender_id": 342383
                },
                {
                    "content": "{\"type\":\"vote\",\"key\":\"342383,5\",\"vote\":1}",
                    "id": 45087,
                    "message_id": 216632694,
                    "msg_type": "widget",
                    "sender_id": 342383
                },
                {
                    "content": "{\"type\":\"vote\",\"key\":\"342383,2\",\"vote\":1}",
                    "id": 45088,
                    "message_id": 216632694,
                    "msg_type": "widget",
                    "sender_id": 342383
                },
                {
                    "content": "{\"type\":\"vote\",\"key\":\"342383,3\",\"vote\":1}",
                    "id": 45089,
                    "message_id": 216632694,
                    "msg_type": "widget",
                    "sender_id": 342383
                },
                {
                    "content": "{\"type\":\"new_option\",\"idx\":6,\"option\":\"Monday 2pm ET\"}",
                    "id": 45640,
                    "message_id": 216632694,
                    "msg_type": "widget",
                    "sender_id": 360460
                },
                {
                    "content": "{\"type\":\"vote\",\"key\":\"360460,6\",\"vote\":1}",
                    "id": 45641,
                    "message_id": 216632694,
                    "msg_type": "widget",
                    "sender_id": 360460
                },
                {
                    "content": "{\"type\":\"vote\",\"key\":\"360460,6\",\"vote\":1}",
                    "id": 45642,
                    "message_id": 216632694,
                    "msg_type": "widget",
                    "sender_id": 342383
                }
            ],
            "timestamp": 1605283737,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee0ddeb6695d909dc44e4ccc9fc543c7b494c7d0?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"360460\">@Sai Raman (he) (m8'20)</span> <span class=\"user-mention\" data-user-id=\"342347\">@Amanda Hong Galemmo (she) (F2'20)</span> <span class=\"user-mention\" data-user-id=\"342266\">@Brady Fontenot (he) (F2'20)</span> <span class=\"user-mention\" data-user-id=\"360490\">@Mikkel Paulson (he) (W1'20)</span> Glad to see so much interest (and thanks for the additions to the shared doc). If anyone still wants to meet at 11:30 am ET today, go for it, but I can no longer make it and it's not on the calendar yet, so created poll above for  a new time that I will ensure gets onto the RC calendar for Monday</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216633478,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "danammiller360@gmail.com",
            "sender_full_name": "Dana Miller (she) (F2'20)",
            "sender_id": 342383,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Writing BitTorrent clients?",
            "submessages": [],
            "timestamp": 1605283953,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8e68d48b833a687d791d034b420f7fc1621e0d3c?x=x&version=2",
            "client": "website",
            "content": "<p><a href=\"https://infiniteundo.com/post/25326999628/falsehoods-programmers-believe-about-time\">https://infiniteundo.com/post/25326999628/falsehoods-programmers-believe-about-time</a><br>\n<a href=\"https://infiniteundo.com/post/25509354022/more-falsehoods-programmers-believe-about-time\">https://infiniteundo.com/post/25509354022/more-falsehoods-programmers-believe-about-time</a><br>\n<span class=\"user-mention\" data-user-id=\"341049\">@Edith Viau (she) (F2'20)</span></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216633981,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "14181",
                    "emoji_name": "thank-you-word",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "victoria@unconventionaldata.ai",
                        "full_name": "Victoria Levchenko (she) (W2'19)",
                        "id": 198466
                    },
                    "user_id": 198466
                },
                {
                    "emoji_code": "14181",
                    "emoji_name": "thank-you-word",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "finartcialist@gmail.com",
                        "full_name": "Edith Viau (she) (F2'20)",
                        "id": 341049
                    },
                    "user_id": 341049
                }
            ],
            "recipient_id": 20203,
            "sender_email": "recurse@email.mikkel.ca",
            "sender_full_name": "Mikkel Paulson (he) (W1'20)",
            "sender_id": 360490,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Falsehoods about time",
            "submessages": [],
            "timestamp": 1605284174,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/b4a0313a5b4da07f6dda63ed2885e1c2de660cba?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>What's the simplest way to replace all occurrences of a given word in the DOM with a custom html element? Something like <code>replaceAll</code> on <code>document.body.innerHTML</code> but robust.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216636045,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "7rat13@gmail.com",
            "sender_full_name": "Sayan Sarkar (they) (W1'20)",
            "sender_id": 361862,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "replace dom text with html element in javascript",
            "submessages": [],
            "timestamp": 1605285096,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3344bde70c1e1010ef326eb078358c71?d=identicon&version=1",
            "client": "website",
            "content": "<p>I think you might have to walk the entire tree looking for text nodes, and do the search/replace there. Glad to be proven wrong!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216636655,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "mail@nathanael0x4c.com",
            "sender_full_name": "Nate Lane (he) (W1'20)",
            "sender_id": 361690,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "replace dom text with html element in javascript",
            "submessages": [],
            "timestamp": 1605285299,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/29581c8174d213b28a7fd1d59b1ce0d8?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't know anything about programming languages but I'm wondering about the following question:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">def</span> <span class=\"nf\">loopy</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">):</span>\n  <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">%</span><span class=\"mi\">5</span>\n  <span class=\"k\">return</span> <span class=\"n\">loopy</span><span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Are there programming languages that will detect when functions like the above (which calls back to an identical previous state from earlier in the stack trace) have entered infinite loops? If so what do they do with it this information?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216649127,
            "is_me_message": false,
            "last_edit_timestamp": 1605290716,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "pstefek2@gmail.com",
            "sender_full_name": "Peter Stefek (he) (F2'20)",
            "sender_id": 329808,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Detecting Infinite Recursion",
            "submessages": [],
            "timestamp": 1605290635,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/635ab4f3efb5c26f8276373d9767320104538f85?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>That's a super interesting question. I don't know the answer, but it seems like this would only be possible if you are in a completely closed system (i.e. no side effects). Otherwise, the system could call out to an external system (from the same starting state) and get different results.</p>\n<p>Not totally sure, but I think that this field is called \"the halting problem\" if that helps.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216651535,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "jpholzmann@gmail.com",
            "sender_full_name": "Justin Holzmann (he) (S2'20)",
            "sender_id": 315058,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Detecting Infinite Recursion",
            "submessages": [],
            "timestamp": 1605291792,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/29581c8174d213b28a7fd1d59b1ce0d8?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>Good point Justin! The functions would have to be pure. RE: halting problem. In general you can not tell when a function will halt but this question only covers a tiny subset of functions which run forever I think</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216653201,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "pstefek2@gmail.com",
            "sender_full_name": "Peter Stefek (he) (F2'20)",
            "sender_id": 329808,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Detecting Infinite Recursion",
            "submessages": [],
            "timestamp": 1605292496,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8260829a7479dd27047312816718afaed99f3fd1?x=x&version=1",
            "client": "website",
            "content": "<p>The proof for the halting problem shows that in any language where you can write a nonterminating program and where you can manipulate programs as data (so you can inspect programs in the hopes of learning something about them) that there is no way to write an algorithm to decide if a program halts or not, in general. Specific easy cases may be detected, though.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216658767,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "plragde@uwaterloo.ca",
            "sender_full_name": "Prabhakar Ragde (he)",
            "sender_id": 8655,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Detecting Infinite Recursion",
            "submessages": [],
            "timestamp": 1605294973,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8260829a7479dd27047312816718afaed99f3fd1?x=x&version=1",
            "client": "website",
            "content": "<p>A language that would detect and reject the program posted above is Agda (being discussed right now in the <strong>type theory</strong> channel). The reason is that Agda is used to prove things, and nontermination leads to logical inconsistency (and the ability to prove everything, including things that should not be proved). Agda has a very conservative termination checker. It requires that recursion happen on structurally smaller arguments. This can be a nuisance, because some algorithms are not naturally expressed this way (quicksort or mergesort, for example). One needs to convert a termination proof into a structurally decreasing function argument.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216659475,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "plragde@uwaterloo.ca",
            "sender_full_name": "Prabhakar Ragde (he)",
            "sender_id": 8655,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Detecting Infinite Recursion",
            "submessages": [],
            "timestamp": 1605295317,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e2f8987799eac611a3e8189eeb6b8cf0b63de0c9?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Depending on your needs, it looks like you can <a href=\"https://stackoverflow.com/questions/37098405/javascript-queryselector-find-div-by-innertext\">use xpath</a> to do the search for you, which should give you a list of <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node\">html nodes</a>  that match. Then you can iterate through them and replace the contents with .innerHTML</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216660008,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mail@nathanael0x4c.com",
                        "full_name": "Nate Lane (he) (W1'20)",
                        "id": 361690
                    },
                    "user_id": 361690
                }
            ],
            "recipient_id": 20203,
            "sender_email": "jimmy@skelios.com",
            "sender_full_name": "James Byess (he) (F1'19)",
            "sender_id": 234072,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "replace dom text with html element in javascript",
            "submessages": [],
            "timestamp": 1605295575,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e2f8987799eac611a3e8189eeb6b8cf0b63de0c9?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Side note: I haven't tried this but it doesn't look super complex. There might be some weird finagling with the xpath interface which looks like it requires you to use generator-style iteration. But it should give you references to the proper nodes</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216661996,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "jimmy@skelios.com",
            "sender_full_name": "James Byess (he) (F1'19)",
            "sender_id": 234072,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "replace dom text with html element in javascript",
            "submessages": [],
            "timestamp": 1605296197,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>Some of my coworkers just launched a monthly podcast called \"Building Better Systems\" which is about the real world challenges of building correct &amp; secure systems, and what can be done about it. I thought it might be of interest to folks here; the first episode is available here (and I think also on many podcast streaming services): <a href=\"https://www.youtube.com/channel/UC3B3K0ETtqDqfVRRK4HKbpA\">https://www.youtube.com/channel/UC3B3K0ETtqDqfVRRK4HKbpA</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"channel\" href=\"https://www.youtube.com/channel/UC3B3K0ETtqDqfVRRK4HKbpA\"><img src=\"https://i.ytimg.com/vi/channel/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216666722,
            "is_me_message": false,
            "last_edit_timestamp": 1605298339,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "bradyf@hey.com",
                        "full_name": "Brady Fontenot (he) (F2'20)",
                        "id": 342266
                    },
                    "user_id": 342266
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "dabbagh.aos@gmail.com",
                        "full_name": "Aos Dabbagh (S2'17)",
                        "id": 101320
                    },
                    "user_id": 101320
                }
            ],
            "recipient_id": 20203,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "building better systems podcast",
            "submessages": [],
            "timestamp": 1605298321,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>For this specific question, 'tail call optimization' is also relevant.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216673462,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Detecting Infinite Recursion",
            "submessages": [],
            "timestamp": 1605301865,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/29581c8174d213b28a7fd1d59b1ce0d8?d=identicon&version=1",
            "client": "website",
            "content": "<p>that's interesting. I almost wonder if tail call optimization would destroy the ability to detect this because we lose the call stack</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216678937,
            "is_me_message": false,
            "last_edit_timestamp": 1605304498,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "pstefek2@gmail.com",
            "sender_full_name": "Peter Stefek (he) (F2'20)",
            "sender_id": 329808,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Detecting Infinite Recursion",
            "submessages": [],
            "timestamp": 1605304472,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>Tail call optimization requires detecting this, so you can decide that it's safe to lose the call stack. :)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216685587,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Detecting Infinite Recursion",
            "submessages": [],
            "timestamp": 1605308247,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/29581c8174d213b28a7fd1d59b1ce0d8?d=identicon&version=1",
            "client": "website",
            "content": "<p>yea I see what you mean it's certainly a similar problem</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216690914,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "pstefek2@gmail.com",
            "sender_full_name": "Peter Stefek (he) (F2'20)",
            "sender_id": 329808,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Detecting Infinite Recursion",
            "submessages": [],
            "timestamp": 1605311904,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/692e4b98820a7c9bd5fe6c17408346c6e7f67c6b?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Has anyone who deployed a predictive algorithm to an online app, done a comparison of AWS vs Heroku? Given a project that likely consists of:</p>\n<ul>\n<li>A front-end to accept user data and return a prediction</li>\n<li>An API that predicts on user data using a trained XGBoost model</li>\n<li>A job to download new data from the web and retrain the model daily</li>\n<li>A Database to store the training data</li>\n</ul>\n<p>Does anyone have an opinion on whether I should worry about AWS and its behemoth of solutions or would Heroku save me some headache?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216699875,
            "is_me_message": false,
            "last_edit_timestamp": 1605321294,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "azhadsyed17@gmail.com",
            "sender_full_name": "Azhad Syed (he) (W1'20)",
            "sender_id": 363087,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "cloud deployment",
            "submessages": [],
            "timestamp": 1605321282,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8260829a7479dd27047312816718afaed99f3fd1?x=x&version=1",
            "client": "website",
            "content": "<p>TCO changes it from \"will blow stack\" to \"will spin indefinitely\". It's a question of when the abstraction breaks.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216701301,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "plragde@uwaterloo.ca",
            "sender_full_name": "Prabhakar Ragde (he)",
            "sender_id": 8655,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Detecting Infinite Recursion",
            "submessages": [],
            "timestamp": 1605322636,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/29581c8174d213b28a7fd1d59b1ce0d8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Yes I guess my question is can we have a third option where we realize we have gone back to a previous call and will repeat forever therefore we return some kind of \"infinite value\" or drop the call instead of either blowing the stack or looping forever. </p>\n<p>Also the agda stuff seems interesting (and is something I know nothing about). It sounds like that approach is to disallow the program from compiling entirely?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216701473,
            "is_me_message": false,
            "last_edit_timestamp": 1605323065,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "pstefek2@gmail.com",
            "sender_full_name": "Peter Stefek (he) (F2'20)",
            "sender_id": 329808,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Detecting Infinite Recursion",
            "submessages": [],
            "timestamp": 1605322827,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8260829a7479dd27047312816718afaed99f3fd1?x=x&version=1",
            "client": "website",
            "content": "<p>Your original example incremented the argument and so there isn't really a return to a previous call, something is completely new. One could imagine a static analysis that would catch this but wouldn't catch something only slightly more complicated.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216701619,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "plragde@uwaterloo.ca",
            "sender_full_name": "Prabhakar Ragde (he)",
            "sender_id": 8655,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Detecting Infinite Recursion",
            "submessages": [],
            "timestamp": 1605323080,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8260829a7479dd27047312816718afaed99f3fd1?x=x&version=1",
            "client": "website",
            "content": "<p>Agda has a way of turning off the termination checker for individual functions. This can be useful during development (\"I know this terminates, I'll prove it to you later\") but it is unsafe from a proof point of view as it opens the door to bogus proofs.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216701683,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "plragde@uwaterloo.ca",
            "sender_full_name": "Prabhakar Ragde (he)",
            "sender_id": 8655,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Detecting Infinite Recursion",
            "submessages": [],
            "timestamp": 1605323175,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>It looks like you're kind of trying to derive <a href=\"https://en.wikipedia.org/wiki/Primitive_recursive_function\">https://en.wikipedia.org/wiki/Primitive_recursive_function</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216701686,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Detecting Infinite Recursion",
            "submessages": [],
            "timestamp": 1605323181,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/29581c8174d213b28a7fd1d59b1ce0d8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Oh in that example the argument is % 5 so afaik it will eventually loop with the same arg. In my understanding it should go:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">loopy</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">loopy</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">loopy</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">loopy</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">loopy</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">loopy</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">loopy</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">...</span>\n</code></pre></div>\n<p>Without the modulus it would definitely be undetectable with this method</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216701692,
            "is_me_message": false,
            "last_edit_timestamp": 1605323393,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "pstefek2@gmail.com",
            "sender_full_name": "Peter Stefek (he) (F2'20)",
            "sender_id": 329808,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Detecting Infinite Recursion",
            "submessages": [],
            "timestamp": 1605323213,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>it's not exactly what you're talking about -- but it's a formalism that allows you to guarantee finite programs</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216701699,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Detecting Infinite Recursion",
            "submessages": [],
            "timestamp": 1605323235,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8260829a7479dd27047312816718afaed99f3fd1?x=x&version=1",
            "client": "website",
            "content": "<p>Ah, yes, you are right <span class=\"user-mention\" data-user-id=\"329808\">@Peter Stefek (he) (F2'20)</span>, I overlooked the %5. But that is pretty subtle from the point of view of an automatic detection mechanism.</p>\n<p>Agda's termination checker is slightly more sophisticated than primitive recursive functions. It will allow recursion on n-2, whereas primitive recursion only allows n-1. Ackermann's function is not primitive recursive, but Agda accepts a straightforward implementation.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216701820,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "plragde@uwaterloo.ca",
            "sender_full_name": "Prabhakar Ragde (he)",
            "sender_id": 8655,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Detecting Infinite Recursion",
            "submessages": [],
            "timestamp": 1605323409,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/29581c8174d213b28a7fd1d59b1ce0d8?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"255045\">@Ori Dean Bernstein (he) (W2'20)</span> Interesting! I've never heard of those functions before. The wikipedia definition seems straight forward but I'm definitely wondering what kind of programs can and cannot be written with them. I'll look into that more.<br>\n<span class=\"user-mention\" data-user-id=\"8655\">@Prabhakar Ragde (he)</span> That's interesting (and a good answer to my question above about what can be represented with primitive recursion).  I really have to check out agda (and probably sub to <a class=\"stream\" data-stream-id=\"26806\" href=\"/#narrow/stream/26806-type-theory\">#type theory</a>. I guess my main difference between agda and what I'm taking about is that the system I'm imagining could happen during program execution instead of beforehand. If I understand what you're saying about the termination checker it seems like it's a type system-esque thing where the program won't compile if it can't be proved it will terminate, not something that happens while the program runs?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216702046,
            "is_me_message": false,
            "last_edit_timestamp": 1605323945,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "pstefek2@gmail.com",
            "sender_full_name": "Peter Stefek (he) (F2'20)",
            "sender_id": 329808,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Detecting Infinite Recursion",
            "submessages": [],
            "timestamp": 1605323778,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8260829a7479dd27047312816718afaed99f3fd1?x=x&version=1",
            "client": "website",
            "content": "<p>So to detect looping at runtime you need to confirm that the entire relevant state is repeated. For a pure function this is the stack frame. For an impure function you have to throw in the entire heap which may change between calls. Even for the pure situation, think about saving the stack frame for each call, and then on each subsequent call, checking all saved stack frames for a duplicate. Kind of inefficient! Easier to throw up one's hands and say , \"You want to write nonterminating programs? That's your problem.\"</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216702128,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "plragde@uwaterloo.ca",
            "sender_full_name": "Prabhakar Ragde (he)",
            "sender_id": 8655,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Detecting Infinite Recursion",
            "submessages": [],
            "timestamp": 1605323953,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>hm, I think you can actually do that reasonably efficiently</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216702329,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Detecting Infinite Recursion",
            "submessages": [],
            "timestamp": 1605324261,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>(\"python-efficient\", I mean, not \"c-efficient\")</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216702332,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Detecting Infinite Recursion",
            "submessages": [],
            "timestamp": 1605324282,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>if you hash your stack frame and just consult that when recursing</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216702352,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Detecting Infinite Recursion",
            "submessages": [],
            "timestamp": 1605324342,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>bigger problem is that it only works for pure functions</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216702379,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Detecting Infinite Recursion",
            "submessages": [],
            "timestamp": 1605324364,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8260829a7479dd27047312816718afaed99f3fd1?x=x&version=1",
            "client": "website",
            "content": "<p>You're paying that overhead for every run, and you can't turn it off because you're not sure you've encountered the situation that would cause the looping. This is why static analysis and conservative restrictions are preferable.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216702610,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "plragde@uwaterloo.ca",
            "sender_full_name": "Prabhakar Ragde (he)",
            "sender_id": 8655,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Detecting Infinite Recursion",
            "submessages": [],
            "timestamp": 1605324674,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/29581c8174d213b28a7fd1d59b1ce0d8?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"255045\">@Ori Dean Bernstein (he) (W2'20)</span> that's kind of what I was going for as well</p>\n<p><span class=\"user-mention\" data-user-id=\"8655\">@Prabhakar Ragde (he)</span> That makes sense to me. Definitely a much bigger win if you don't need an overhead. I understand your point and this seems like the right way to do things.  </p>\n<p><del>However just for fun, in this other system we could record only  once every x frames and just check all future frames against the most recently recorded frame.  This should be a much smaller overhead in memory and will only have worst case <code>x+l</code> (I think?) extra loops in an infinite loop situation of size <code>l</code>. Also should actually be compatible with tail recursion so we won't blow the stack.</del> Edit oh no wait this doesn't work at all please ignore</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216703333,
            "is_me_message": false,
            "last_edit_timestamp": 1605325787,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "pstefek2@gmail.com",
            "sender_full_name": "Peter Stefek (he) (F2'20)",
            "sender_id": 329808,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Detecting Infinite Recursion",
            "submessages": [],
            "timestamp": 1605325382,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f6bef626649c46b4cc3fd9f67c151a19170da5e?x=x&version=21",
            "client": "ZulipMobile",
            "content": "<p>Depends on what scale you need. If you're making a demo or something for which one web server can suffice, then normal aws ec2 instances are probably enough. You can write a small web app with python and flask to implement your api, and do predictions with a model directly in python. The job to download the new model can be just a cron job. As for training data, it depends on the format. Aws offers RDS, just postgres. You might be able to use dynamodb.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216703861,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "jkozak@fmail.co.uk",
            "sender_full_name": "Jake \u26e4 Prozvyshe (they) (W1'17)",
            "sender_id": 8478,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "cloud deployment",
            "submessages": [],
            "timestamp": 1605325918,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f6bef626649c46b4cc3fd9f67c151a19170da5e?x=x&version=21",
            "client": "ZulipMobile",
            "content": "<p>Not sure what form your training data has. For stuff like user profiles, I usually see typical databases for web apps and then a big export job that dumps the whole thing to a csv or something that can be used as training data.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216703948,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "jkozak@fmail.co.uk",
            "sender_full_name": "Jake \u26e4 Prozvyshe (they) (W1'17)",
            "sender_id": 8478,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "cloud deployment",
            "submessages": [],
            "timestamp": 1605325986,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8e68d48b833a687d791d034b420f7fc1621e0d3c?x=x&version=2",
            "client": "website",
            "content": "<p>I discovered statecharts last night. I don't anticipate working on anything with business logic complex enough for it to make sense, but I like the idea of an architecture that straight-up transcribes those pretty diagrams I like to draw on whiteboards into code. <a href=\"https://statecharts.github.io/\">https://statecharts.github.io/</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216883375,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "recurse@email.mikkel.ca",
            "sender_full_name": "Mikkel Paulson (he) (W1'20)",
            "sender_id": 360490,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Statecharts",
            "submessages": [],
            "timestamp": 1605539328,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee0ddeb6695d909dc44e4ccc9fc543c7b494c7d0?x=x&version=2",
            "client": "website",
            "content": "<p>Rescheduled checkin on calendar here: <a href=\"https://www.recurse.com/calendar/13636\">https://www.recurse.com/calendar/13636</a> - looking forward to sharing experiences and tips this afternoon!</p>\n<p>And pinging <span class=\"user-mention\" data-user-id=\"360460\">@Sai Raman (he) (m8'20)</span>  who asked about this earlier</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216891383,
            "is_me_message": false,
            "last_edit_timestamp": 1605542680,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "danammiller360@gmail.com",
            "sender_full_name": "Dana Miller (she) (F2'20)",
            "sender_id": 342383,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Writing BitTorrent clients?",
            "submessages": [],
            "timestamp": 1605542580,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7e1c0b3147c56cd2c016b2f5282012e9b7f7db90?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"342383\">@Dana Miller (she) (F2'20)</span> - Sorry things have been a bit busy with work. Does 2pm work for you all by any chance? If not, I'll try to see if I can make 1pm work.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216895048,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "sai9raman@gmail.com",
            "sender_full_name": "Sai Raman (he) (m8'20)",
            "sender_id": 360460,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Writing BitTorrent clients?",
            "submessages": [],
            "timestamp": 1605544004,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8e68d48b833a687d791d034b420f7fc1621e0d3c?x=x&version=2",
            "client": "website",
            "content": "<p>I'm into it, but currently focused on other projects. Might jump in partway through or audit the course.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216895921,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "danammiller360@gmail.com",
                        "full_name": "Dana Miller (she) (F2'20)",
                        "id": 342383
                    },
                    "user_id": 342383
                }
            ],
            "recipient_id": 20203,
            "sender_email": "recurse@email.mikkel.ca",
            "sender_full_name": "Mikkel Paulson (he) (W1'20)",
            "sender_id": 360490,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Writing BitTorrent clients?",
            "submessages": [],
            "timestamp": 1605544366,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ee0ddeb6695d909dc44e4ccc9fc543c7b494c7d0?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"360460\">@Sai Raman (he) (m8'20)</span> For today, I can move to 2pm (updated on calendar)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216899505,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "danammiller360@gmail.com",
            "sender_full_name": "Dana Miller (she) (F2'20)",
            "sender_id": 342383,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Writing BitTorrent clients?",
            "submessages": [],
            "timestamp": 1605545814,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/89b8e9df59b9bcfce1d79ff8409f474e879d2b7b?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I'm always a bit doubtful about anything that suggests people draw diagrams instead of coding. Though their design is pretty neat!</p>\n<p>Some folks from my uni did a similar thing but for programming robots (<a href=\"https://help.trikset.com/v/en/studio/about\">https://help.trikset.com/v/en/studio/about</a>), so I assume it works if you target it to kids <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216900012,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "18756",
                    "emoji_name": "robot-waving",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "ilia.demianenko@gmail.com",
                        "full_name": "Ilia Demianenko (he) (F2'20)",
                        "id": 343083
                    },
                    "user_id": 343083
                }
            ],
            "recipient_id": 20203,
            "sender_email": "helga.nikonova@gmail.com",
            "sender_full_name": "Olga Nikonova (she) (W1'20)",
            "sender_id": 360989,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Statecharts",
            "submessages": [],
            "timestamp": 1605546040,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/7e1c0b3147c56cd2c016b2f5282012e9b7f7db90?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"342383\">@Dana Miller (she) (F2'20)</span></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216900833,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "sai9raman@gmail.com",
            "sender_full_name": "Sai Raman (he) (m8'20)",
            "sender_id": 360460,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Writing BitTorrent clients?",
            "submessages": [],
            "timestamp": 1605546398,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8e68d48b833a687d791d034b420f7fc1621e0d3c?x=x&version=2",
            "client": "website",
            "content": "<p>To  be clear, it's not a visual programming language or no-code development or anything. It's a way of structuring your business logic according to state and state transitions, analogous to the elements in a flowchart. The idea is that all valid states are representable and no invalid states are representable, ensuring (in theory) that you handle all possible edge cases and that your code never ends up in an unexpected state.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216900934,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "helga.nikonova@gmail.com",
                        "full_name": "Olga Nikonova (she) (W1'20)",
                        "id": 360989
                    },
                    "user_id": 360989
                }
            ],
            "recipient_id": 20203,
            "sender_email": "recurse@email.mikkel.ca",
            "sender_full_name": "Mikkel Paulson (he) (W1'20)",
            "sender_id": 360490,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Statecharts",
            "submessages": [],
            "timestamp": 1605546450,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0aac726e8ce27b55809824e7f6de77e7?d=identicon&version=1",
            "client": "website",
            "content": "<p>Videos are up:</p>\n<p><a href=\"https://vimeo.com/479193681\">https://vimeo.com/479193681</a></p>\n<p><a href=\"https://vimeo.com/479428925\">https://vimeo.com/479428925</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216907698,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mail@nathanael0x4c.com",
                        "full_name": "Nate Lane (he) (W1'20)",
                        "id": 361690
                    },
                    "user_id": 361690
                }
            ],
            "recipient_id": 20203,
            "sender_email": "jamie@scattered-thoughts.net",
            "sender_full_name": "Jamie Brandon (he) (W1'20)",
            "sender_id": 863,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Handmade Seattle",
            "submessages": [],
            "timestamp": 1605549514,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/ef039ebebe21b975d2459f92aa693722?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Connecting threads:<br>\n<a href=\"#narrow/stream/18957-programming/topic/state.20machines/near/215622930\">https://recurse.zulipchat.com/#narrow/stream/18957-programming/topic/state.20machines/near/215622930</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216927348,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "14176",
                    "emoji_name": "thankyou",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "recurse@email.mikkel.ca",
                        "full_name": "Mikkel Paulson (he) (W1'20)",
                        "id": 360490
                    },
                    "user_id": 360490
                }
            ],
            "recipient_id": 20203,
            "sender_email": "aaronstrick@gmail.com",
            "sender_full_name": "Aaron Strick (he) (F2'18)",
            "sender_id": 129958,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Statecharts",
            "submessages": [],
            "timestamp": 1605558488,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3344bde70c1e1010ef326eb078358c71?d=identicon&version=1",
            "client": "website",
            "content": "<p>How does one efficiently recognize patterns like e.g. <a href=\"https://doc.rust-lang.org/reference/tokens.html#raw-string-literals\">Rust raw string literals</a>, where there can be an arbitrary number of ambiguous state transitions when constructing a given token?  For example , <code>r#######\"\"######\"#######</code>, where we don't know until after examining all 6 <code>#</code>s whether those characters belong to the quoted string literal (they do) or delimit an empty string. Can this be done in a general way without backtracking?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216940843,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "mail@nathanael0x4c.com",
            "sender_full_name": "Nate Lane (he) (W1'20)",
            "sender_id": 361690,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "context-free lexing?",
            "submessages": [],
            "timestamp": 1605565155,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/692e4b98820a7c9bd5fe6c17408346c6e7f67c6b?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Pinning this to my moodboard for the week: procedurally generated trap music in Supercollider!</p>\n<p><a href=\"https://algorithmictrap.com/\">https://algorithmictrap.com/</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216949895,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "azhadsyed17@gmail.com",
            "sender_full_name": "Azhad Syed (he) (W1'20)",
            "sender_id": 363087,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Generative Music and Art",
            "submessages": [],
            "timestamp": 1605571089,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5f5061d6c6d330229a78c6ccd334e0b12ac56084?x=x&version=2",
            "client": "website",
            "content": "<p>So today I realized that  I don't know much about how the internet works. Like, I don't know what exactly a router does, nor do I know the difference between HTTPS and SSH (I hear that they are \"protocols\"... but what exactly are protocols?)</p>\n<p>Anyone know of a good resource for me to read/watch to build a basic understanding of how networking works?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216959034,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "jasminermj@gmail.com",
            "sender_full_name": "Jasmine Ren (she/they) (W1'20)",
            "sender_id": 360452,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Networking primer",
            "submessages": [],
            "timestamp": 1605579216,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8e68d48b833a687d791d034b420f7fc1621e0d3c?x=x&version=2",
            "client": "website",
            "content": "<p>Well, <span class=\"user-mention\" data-user-id=\"2863\">@Julia Evans (she) (W1'20)</span> has a great (and free) zine exploring networking concepts. <a href=\"https://wizardzines.com/zines/networking/\">https://wizardzines.com/zines/networking/</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216961640,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "recurse@email.mikkel.ca",
            "sender_full_name": "Mikkel Paulson (he) (W1'20)",
            "sender_id": 360490,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Networking primer",
            "submessages": [],
            "timestamp": 1605582231,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/71e1c5c9d32bdce5ab4ce166c7f35520cbfd3d56?x=x&version=2",
            "client": "ZulipMobile",
            "content": "<p>uwaterloo 436.  this guy is awesome.  I believe its the 2nd lecture that has a really good explanation about how networking works in general.  this guy is really worth a watch though.<br>\n<a href=\"https://www.youtube.com/playlist?list=PLawkBQ15NDEkDJ5IyLIJUTZ1rRM9YQq6N\">https://www.youtube.com/playlist?list=PLawkBQ15NDEkDJ5IyLIJUTZ1rRM9YQq6N</a></p>\n<p>stanford lectures....short. pick and choose your topics:<br>\n<a href=\"https://www.youtube.com/playlist?list=PLEAYkSg4uSQ2dr0XO_Nwa5OcdEcaaELSG\">https://www.youtube.com/playlist?list=PLEAYkSg4uSQ2dr0XO_Nwa5OcdEcaaELSG</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216961689,
            "is_me_message": false,
            "last_edit_timestamp": 1605582313,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "bradyf@hey.com",
            "sender_full_name": "Brady Fontenot (he) (F2'20)",
            "sender_id": 342266,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Networking primer",
            "submessages": [],
            "timestamp": 1605582248,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>My friends and I made <a href=\"https://sketch.systems/\">https://sketch.systems/</a> as a sort of public service to spread the good word about statecharts. It was largely motivated by me showing people statecharts, getting nods of acknowledgement, and then later realizing that they hadn't actually internalized the correct semantics. (Despite reading Harel's paper.) So on the website you get a diagram you can click around on, which helps make it concrete and learnable for some people.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216969446,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Statecharts",
            "submessages": [],
            "timestamp": 1605593332,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Re: using statecharts in a real application, I found them very handing for implementing complex drag and drop in a desktop GUI. Video notes on that here: <a href=\"https://kevinlynagh.com/notes/2017-10-11-statechart-update/\">https://kevinlynagh.com/notes/2017-10-11-statechart-update/</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 216969485,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Statecharts",
            "submessages": [],
            "timestamp": 1605593403,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8e68d48b833a687d791d034b420f7fc1621e0d3c?x=x&version=2",
            "client": "website",
            "content": "<p>Cool, thanks for the  pointers! I'll take a look.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217025749,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "recurse@email.mikkel.ca",
            "sender_full_name": "Mikkel Paulson (he) (W1'20)",
            "sender_id": 360490,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Statecharts",
            "submessages": [],
            "timestamp": 1605630288,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>i\u0343\u0342\u0344\u035d\u030d\u0332\u034e\u033b\u0323\u033c\u034et\u0304\u0311\u034c\u0303\u0346\u032e\u0323\u0324\u0329\u0356\u0324\u0355\u0331\u0332\u0318\u0338 c\u0301\u0312\u035e\u0310\u030c\u034d\u0317\u0330\u0317\u0328\u032a\u0327o\u0302\u0352\u0341\u0308\u0301\u0346\u035b\u0315\u031a\u030d\u0317\u032b\u0333\u0345\u0339\u0325\u032e\u0353\u035c\u0333\u0338m\u030b\u034a\u0344\u0305\u0307\u0313\u0309\u034a\u030d\u033f\u034d\u0347\u0345\u0332\u033a\u0353\u032e\u0325\u034d\u0335e\u0301\u0342\u030d\u0310\u0352\u0342\u030e\u030f\u032a\u034d\u0327\u033b\u0355\u035f\u0356\u0321s\u0357\u033e\u0315\u0342\u034a\u0307\u0306\u030e\u030a\u031c\u0326\u032a\u0339\u035f\u032c\u0354\u033c\u0320</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217028451,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1679",
                    "emoji_name": "christmasparrot",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "julianvmodesto@gmail.com",
                        "full_name": "Julian Modesto (he) (m3'20)",
                        "id": 276201
                    },
                    "user_id": 276201
                },
                {
                    "emoji_code": "1679",
                    "emoji_name": "christmasparrot",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "me@lelandpaul.com",
                        "full_name": "Leland Paul Kusmer (they) (F2'20)",
                        "id": 342407
                    },
                    "user_id": 342407
                },
                {
                    "emoji_code": "1679",
                    "emoji_name": "christmasparrot",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "klf16@my.fsu.edu",
                        "full_name": "Kelly Foulk (she) (W1'20)",
                        "id": 360768
                    },
                    "user_id": 360768
                },
                {
                    "emoji_code": "1679",
                    "emoji_name": "christmasparrot",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "dabbagh.aos@gmail.com",
                        "full_name": "Aos Dabbagh (S2'17)",
                        "id": 101320
                    },
                    "user_id": 101320
                },
                {
                    "emoji_code": "1679",
                    "emoji_name": "christmasparrot",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "mail@nathanael0x4c.com",
                        "full_name": "Nate Lane (he) (W1'20)",
                        "id": 361690
                    },
                    "user_id": 361690
                }
            ],
            "recipient_id": 20203,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "advent of code!",
            "submessages": [],
            "timestamp": 1605631340,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/32721626292fa2708ee74d852696e44f426cd631?x=x&version=2",
            "client": "website",
            "content": "<p>I'm sooooo excited. Will be using Rust this time around. I've only done it in Go and Python before so it's gonna be a fun struggle :-)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217031184,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "dabbagh.aos@gmail.com",
            "sender_full_name": "Aos Dabbagh (S2'17)",
            "sender_id": 101320,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "advent of code!",
            "submessages": [],
            "timestamp": 1605632484,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8e68d48b833a687d791d034b420f7fc1621e0d3c?x=x&version=2",
            "client": "website",
            "content": "<div class=\"message_inline_image\"><a href=\"https://utahvalley360.com/wp-content/uploads/2014/07/Nightmare-Before-Christmas-Whats-this.gif\"><img src=\"https://utahvalley360.com/wp-content/uploads/2014/07/Nightmare-Before-Christmas-Whats-this.gif\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217034617,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "recurse@email.mikkel.ca",
            "sender_full_name": "Mikkel Paulson (he) (W1'20)",
            "sender_id": 360490,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "advent of code!",
            "submessages": [],
            "timestamp": 1605633983,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>heh, for context: <a href=\"https://adventofcode.com/2020/about\">https://adventofcode.com/2020/about</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217034890,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "advent of code!",
            "submessages": [],
            "timestamp": 1605634099,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>the previous years are still up if you want to mess around with it, about half of last year\u2019s problems used an interpreter for an assembly-like language that it guides you through writing by accreting features and refactoring over the first two weeks or so</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217035224,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "advent of code!",
            "submessages": [],
            "timestamp": 1605634240,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8e68d48b833a687d791d034b420f7fc1621e0d3c?x=x&version=2",
            "client": "website",
            "content": "<p>Sounds like fun. I'm into it!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217039949,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "recurse@email.mikkel.ca",
            "sender_full_name": "Mikkel Paulson (he) (W1'20)",
            "sender_id": 360490,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "advent of code!",
            "submessages": [],
            "timestamp": 1605636367,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/35351c8d4dee64d54b92fe38875cb762854d9299?x=x&version=2",
            "client": "website",
            "content": "<p>oh no</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217094676,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ertysdl@gmail.com",
            "sender_full_name": "Erty Seidohl (he) (S'13)",
            "sender_id": 2154,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "advent of code!",
            "submessages": [],
            "timestamp": 1605672912,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/35351c8d4dee64d54b92fe38875cb762854d9299?x=x&version=2",
            "client": "website",
            "content": "<p>last year this is how I got into haskell</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217094680,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ertysdl@gmail.com",
            "sender_full_name": "Erty Seidohl (he) (S'13)",
            "sender_id": 2154,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "advent of code!",
            "submessages": [],
            "timestamp": 1605672917,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/35351c8d4dee64d54b92fe38875cb762854d9299?x=x&version=2",
            "client": "website",
            "content": "<p>I think I gave up on like day 14</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217094685,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ertysdl@gmail.com",
            "sender_full_name": "Erty Seidohl (he) (S'13)",
            "sender_id": 2154,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "advent of code!",
            "submessages": [],
            "timestamp": 1605672923,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/35351c8d4dee64d54b92fe38875cb762854d9299?x=x&version=2",
            "client": "website",
            "content": "<p>Maybe I'll try again ??</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217094690,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ertysdl@gmail.com",
            "sender_full_name": "Erty Seidohl (he) (S'13)",
            "sender_id": 2154,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "advent of code!",
            "submessages": [],
            "timestamp": 1605672930,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm still embarrassed by how poorly I did last year</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217131564,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "15889",
                    "emoji_name": "hard-same",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "shae.erisson@gmail.com",
                        "full_name": "Shae Matijs Erisson (he) (F1'19)",
                        "id": 221819
                    },
                    "user_id": 221819
                },
                {
                    "emoji_code": "15889",
                    "emoji_name": "hard-same",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "dabbagh.aos@gmail.com",
                        "full_name": "Aos Dabbagh (S2'17)",
                        "id": 101320
                    },
                    "user_id": 101320
                },
                {
                    "emoji_code": "15889",
                    "emoji_name": "hard-same",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "nathanisom27@gmail.com",
                        "full_name": "Nathan Isom (he) (W2'20)",
                        "id": 255190
                    },
                    "user_id": 255190
                },
                {
                    "emoji_code": "15889",
                    "emoji_name": "hard-same",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "mail@nathanael0x4c.com",
                        "full_name": "Nate Lane (he) (W1'20)",
                        "id": 361690
                    },
                    "user_id": 361690
                },
                {
                    "emoji_code": "15889",
                    "emoji_name": "hard-same",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "gs051095@gmail.com",
                        "full_name": "Gargi Sharma (she/they) (SP1'19)",
                        "id": 203533
                    },
                    "user_id": 203533
                }
            ],
            "recipient_id": 20203,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "advent of code!",
            "submessages": [],
            "timestamp": 1605704816,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/15579ceab4ebf4f8e3697a9d847d57be931a4da1?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Crossposting this with the ML stream: Hi everyone, I'm looking to get a really good base understanding in ML and am trying to decide what resource to use. I've used tensorflow for an intro computer vision project but I didn't really understand why I was using the different layers (and # of them), activation functions, etc and want to understand the reasoning behind things. If you were just getting started in ML what would you do? I'm looking at potentially starting Andrew Ng's course (<a href=\"https://www.coursera.org/learn/machine-learning#about\">https://www.coursera.org/learn/machine-learning#about</a>) or the <a href=\"http://Fast.ai\">Fast.ai</a> course (<a href=\"https://course.fast.ai/\">https://course.fast.ai/</a>).</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217135510,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "klf16@my.fsu.edu",
            "sender_full_name": "Kelly Foulk (she) (W1'20)",
            "sender_id": 360768,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "understanding ML",
            "submessages": [],
            "timestamp": 1605707060,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/50c0f109320065168bd7a918c9f5e205?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"360768\">@Kelly Foulk (she) (W1'20)</span> ! The coursera course is considered pretty great from everyone I've talked to. Have you tried the Hands-on Machine learning book or the Intro to ML book? I think they're all python heavy but I often like the self paced nature of books: <a href=\"https://www.amazon.com/Introduction-Machine-Learning-Python-Scientists/dp/1449369413/ref=pd_lpo_14_t_2/145-0303498-1457736?_encoding=UTF8&amp;pd_rd_i=1449369413&amp;pd_rd_r=688a75b0-8e34-491f-ba5a-029a18b71f43&amp;pd_rd_w=Ulj2m&amp;pd_rd_wg=NUVB2&amp;pf_rd_p=7b36d496-f366-4631-94d3-61b87b52511b&amp;pf_rd_r=AG1ZYH57CY2KH2QY429N&amp;psc=1&amp;refRID=AG1ZYH57CY2KH2QY429N\">https://www.amazon.com/Introduction-Machine-Learning-Python-Scientists/dp/1449369413/ref=pd_lpo_14_t_2/145-0303498-1457736?_encoding=UTF8&amp;pd_rd_i=1449369413&amp;pd_rd_r=688a75b0-8e34-491f-ba5a-029a18b71f43&amp;pd_rd_w=Ulj2m&amp;pd_rd_wg=NUVB2&amp;pf_rd_p=7b36d496-f366-4631-94d3-61b87b52511b&amp;pf_rd_r=AG1ZYH57CY2KH2QY429N&amp;psc=1&amp;refRID=AG1ZYH57CY2KH2QY429N</a> <a href=\"https://www.amazon.com/Hands-Machine-Learning-Scikit-Learn-TensorFlow/dp/1492032646\">https://www.amazon.com/Hands-Machine-Learning-Scikit-Learn-TensorFlow/dp/1492032646</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217138462,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "imran@imranmalek.com",
            "sender_full_name": "Imran Malek (he) (W1'20)",
            "sender_id": 361178,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "understanding ML",
            "submessages": [],
            "timestamp": 1605708544,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/50c0f109320065168bd7a918c9f5e205?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>There's also the stuff on Kaggle which is cool: <a href=\"https://www.kaggle.com/learn/intro-to-machine-learning\">https://www.kaggle.com/learn/intro-to-machine-learning</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217138543,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "imran@imranmalek.com",
            "sender_full_name": "Imran Malek (he) (W1'20)",
            "sender_id": 361178,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "understanding ML",
            "submessages": [],
            "timestamp": 1605708583,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/af53c1d0c94e69364a3b84e2c7f2006901748a02?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Hi! <span class=\"user-mention\" data-user-id=\"341064\">@Jack Carrick (he) (F2'20)</span> and I are working on an interactive synth (tone.js) controlled with movement detection from the user's camera (just in JS).  we've mostly got it going but need to improve performance.  We're using window.requestAnimationFrame() to draw the user's camera data on a canvas so they see a view of themselves with the least lag possible, but as of now it's causing problems to call the tone.js instrument at intervals as frequent as the frame rate. <br>\nWe want to delay calling our audio function so it can't be called enough times in a row to cause performance problems.  After some research we're thinking <a href=\"https://www.geeksforgeeks.org/debouncing-in-javascript/\">debouncing</a> might be what we want but we haven't been able to implement this successfully.  <br>\nDoes anyone have some advice to offer? if debouncing is the right move here, does someone have experience implementing it? thank you so much!!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217142503,
            "is_me_message": false,
            "last_edit_timestamp": 1605710977,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "amara.jaeger@gmail.com",
            "sender_full_name": "Amara Jaeger (she/they) (W1'20)",
            "sender_id": 360745,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Performance for interactive audiovisuals in browser",
            "submessages": [],
            "timestamp": 1605710426,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/15579ceab4ebf4f8e3697a9d847d57be931a4da1?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Never heard of either of the books! I'll check them out, I prefer python, so python-heavy isn't a bad thing! Would you recommend one over the other?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217142851,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "klf16@my.fsu.edu",
            "sender_full_name": "Kelly Foulk (she) (W1'20)",
            "sender_id": 360768,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "understanding ML",
            "submessages": [],
            "timestamp": 1605710577,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/50c0f109320065168bd7a918c9f5e205?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>The hands on machine learning one is a good one because it's really project based and kind of gives you a survey of all of the different techniques</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217143409,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "imran@imranmalek.com",
            "sender_full_name": "Imran Malek (he) (W1'20)",
            "sender_id": 361178,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "understanding ML",
            "submessages": [],
            "timestamp": 1605710811,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/15579ceab4ebf4f8e3697a9d847d57be931a4da1?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>perfect, I definitely learn best with the projects - thanks!!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217161600,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "klf16@my.fsu.edu",
            "sender_full_name": "Kelly Foulk (she) (W1'20)",
            "sender_id": 360768,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "understanding ML",
            "submessages": [],
            "timestamp": 1605717673,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/e622b23d56ce1dbfd935c38e071636c4a40935e8?x=x&version=2",
            "client": "website",
            "content": "<p>I haven't yet managed to complete a full advent (let alone at a daily cadence). And this year, with the idea of trying out a new language, my chances of completing will surely go down.</p>\n<p>Anyone thinking of using Julia?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217166032,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "eha@posteo.de",
            "sender_full_name": "Eugene Ha (he) (S1'18)",
            "sender_id": 116366,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "advent of code!",
            "submessages": [],
            "timestamp": 1605719424,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8e68d48b833a687d791d034b420f7fc1621e0d3c?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>It very briefly crossed my mind to  attempt a different programming language every day, but I'm pretty sure that's a ridiculous idea.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217167884,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "recurse@email.mikkel.ca",
            "sender_full_name": "Mikkel Paulson (he) (W1'20)",
            "sender_id": 360490,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "advent of code!",
            "submessages": [],
            "timestamp": 1605720192,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3344bde70c1e1010ef326eb078358c71?d=identicon&version=1",
            "client": "website",
            "content": "<p>Many of the exercises build on previous days (as <span class=\"user-mention\" data-user-id=\"221814\">@Nathan Goldbaum (he) (S1'19)</span> mentioned with the VM/interpreter from last year), so you'd probably end up having to reinvent the wheel a bunch</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217168686,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "mail@nathanael0x4c.com",
            "sender_full_name": "Nate Lane (he) (W1'20)",
            "sender_id": 361690,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "advent of code!",
            "submessages": [],
            "timestamp": 1605720512,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8e68d48b833a687d791d034b420f7fc1621e0d3c?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Yeah, that's not so great. Also I'm not wild about getting to the 25th and having to choose between Brainfuck and Whitespace because that's all I've got left.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217169359,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "recurse@email.mikkel.ca",
            "sender_full_name": "Mikkel Paulson (he) (W1'20)",
            "sender_id": 360490,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "advent of code!",
            "submessages": [],
            "timestamp": 1605720823,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8e68d48b833a687d791d034b420f7fc1621e0d3c?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Maybe a slightly less crazy idea: do it as a group, each day everyone checks out the project from the person to their left and builds today's solution on top of that (in whatever language that person happens to be using).</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217169711,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jpholzmann@gmail.com",
                        "full_name": "Justin Holzmann (he) (S2'20)",
                        "id": 315058
                    },
                    "user_id": 315058
                },
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mail@nathanael0x4c.com",
                        "full_name": "Nate Lane (he) (W1'20)",
                        "id": 361690
                    },
                    "user_id": 361690
                }
            ],
            "recipient_id": 20203,
            "sender_email": "recurse@email.mikkel.ca",
            "sender_full_name": "Mikkel Paulson (he) (W1'20)",
            "sender_id": 360490,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "advent of code!",
            "submessages": [],
            "timestamp": 1605720979,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/635ab4f3efb5c26f8276373d9767320104538f85?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>That's a neat idea</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217171394,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "jpholzmann@gmail.com",
            "sender_full_name": "Justin Holzmann (he) (S2'20)",
            "sender_id": 315058,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "advent of code!",
            "submessages": [],
            "timestamp": 1605721703,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/35351c8d4dee64d54b92fe38875cb762854d9299?x=x&version=2",
            "client": "website",
            "content": "<p>Oh I like that</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217172027,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ertysdl@gmail.com",
            "sender_full_name": "Erty Seidohl (he) (S'13)",
            "sender_id": 2154,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "advent of code!",
            "submessages": [],
            "timestamp": 1605721958,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/35351c8d4dee64d54b92fe38875cb762854d9299?x=x&version=2",
            "client": "website",
            "content": "<p>The only problem is if someone can't complete a day, then the next person would have to catch that project up</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217172156,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ertysdl@gmail.com",
            "sender_full_name": "Erty Seidohl (he) (S'13)",
            "sender_id": 2154,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "advent of code!",
            "submessages": [],
            "timestamp": 1605722013,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/35351c8d4dee64d54b92fe38875cb762854d9299?x=x&version=2",
            "client": "website",
            "content": "<p>Or, that one code piece just gets behind by one day, which is fine</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217172185,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ertysdl@gmail.com",
            "sender_full_name": "Erty Seidohl (he) (S'13)",
            "sender_id": 2154,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "advent of code!",
            "submessages": [],
            "timestamp": 1605722029,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>also for current in-batch people: advent of code is a great thing to pair on with someone, it\u2019s also a nice way to warm up in the morning if you enjoy that</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217172304,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "advent of code!",
            "submessages": [],
            "timestamp": 1605722073,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/35351c8d4dee64d54b92fe38875cb762854d9299?x=x&version=2",
            "client": "website",
            "content": "<blockquote>\n<p>Warm up in the morning</p>\n</blockquote>\n<p>/me spends 15 hours debugging a single problem, sweating profusely the whole time :P</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217172579,
            "is_me_message": false,
            "last_edit_timestamp": 1605722210,
            "reactions": [
                {
                    "emoji_code": "1f446",
                    "emoji_name": "point_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "laurent.direr@gmail.com",
                        "full_name": "Laurent Direr (W2'18)",
                        "id": 105084
                    },
                    "user_id": 105084
                },
                {
                    "emoji_code": "1f446",
                    "emoji_name": "point_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mail@nathanael0x4c.com",
                        "full_name": "Nate Lane (he) (W1'20)",
                        "id": 361690
                    },
                    "user_id": 361690
                }
            ],
            "recipient_id": 20203,
            "sender_email": "ertysdl@gmail.com",
            "sender_full_name": "Erty Seidohl (he) (S'13)",
            "sender_id": 2154,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "advent of code!",
            "submessages": [],
            "timestamp": 1605722206,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8e68d48b833a687d791d034b420f7fc1621e0d3c?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Yeah, not being able to complete is a problem I hadn't thought of. I haven't done this before, so I'm not coming at this from a position of knowledge. I'd thought of people dropping out (one of the projects just gets dropped along with them), but it doesn't do a very good job of accounting for people missing a day or being unable to complete. But maybe if you've solved a problem once, doing it again in a different language to \"catch up\" isn't the worst thing.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217173233,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "recurse@email.mikkel.ca",
            "sender_full_name": "Mikkel Paulson (he) (W1'20)",
            "sender_id": 360490,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "advent of code!",
            "submessages": [],
            "timestamp": 1605722508,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>oh yeah, definitely the earlier ones are easier than the later ones</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217182354,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "advent of code!",
            "submessages": [],
            "timestamp": 1605726713,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>the quick warmups come from the first ten days :)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217182414,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "advent of code!",
            "submessages": [],
            "timestamp": 1605726725,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8f3e3f13689ac077fe4ae537e33bde345a57cb22?x=x&version=2",
            "client": "website",
            "content": "<p>I wouldn't say that the difficulty is monotonically increased as you go, though :)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217182651,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "recurse@ardent.nebcorp.com",
            "sender_full_name": "Joe Ardent (he) (SP1'17)",
            "sender_id": 9097,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "advent of code!",
            "submessages": [],
            "timestamp": 1605726836,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cac6d1e6b078dbe912eb03b8d30470787030d330?x=x&version=2",
            "client": "website",
            "content": "<p>I would also recommend <a href=\"http://neuralnetworksanddeeplearning.com\">http://neuralnetworksanddeeplearning.com</a> to have an intuitive understanding of activation functions and number of layers and such.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217183926,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "klf16@my.fsu.edu",
                        "full_name": "Kelly Foulk (she) (W1'20)",
                        "id": 360768
                    },
                    "user_id": 360768
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "jacoblevgw@gmail.com",
                        "full_name": "Jacob Lev Goldman-Wetlzer (he) (m2'20)",
                        "id": 264901
                    },
                    "user_id": 264901
                },
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "eha@posteo.de",
                        "full_name": "Eugene Ha (he) (S1'18)",
                        "id": 116366
                    },
                    "user_id": 116366
                }
            ],
            "recipient_id": 20203,
            "sender_email": "msapaydin@gmail.com",
            "sender_full_name": "Mehmet Serkan Apaydin (SP2'15)",
            "sender_id": 7872,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "understanding ML",
            "submessages": [],
            "timestamp": 1605727410,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a5990ea1928ad47ec4fc3b7998607178?d=identicon&version=1",
            "client": "website",
            "content": "<p>So I'm one of those people who really struggles with async code.  But I find myself wanting to write a small library (in Swift) to wrap an HTTP API where I'm going to have to make a lot of network requests.  And rather than torture myself with chains of nested callbacks, or promises (which hardly seem better) or anything like that, I kind of want to just abstract away the whole thing into the type system plus decouple it into a queue so I never have to think about it. </p>\n<p>Before I start writing code that might be a total mess, I'm curious... does anyone know if what I'm about to describe a normal kind of async pattern?  Is it Known to be a Good Idea, or, alas, a Bad Idea, for Reasons?  </p>\n<p>So here's the idea.  There's only a closed universe of possible network requests to make, and hence a close universe of possible kinds of responses. I.e., one can ask endpoint X for either a Y or a Z, and one is guaranteed to get what one asked for or an error. </p>\n<p>So: what if every possible kind of response is its own type.  And then the callback for every network call just wraps the expected result in a <code>Result&lt;ResponseType&gt;</code> (which, for non swift people, is basically just a version of Haskell's Maybe monad that can wrap an error instead of a lousy <code>Nothing</code>) and shoves it onto a queue.  And then there's a background thread that just watches the queue and whenever some response lands on it, it calls some function appropriate to that type.  </p>\n<p>Actually, could take that even further. Maybe every type has its own <code>.next</code> method, and then the background queue literally just unwraps the <code>Result</code>, handles any errors that need to be handled, and calls the <code>.next</code> method on all the data it sees.</p>\n<p>This sort of feels like some kid of reactive programming thing, but also kinda like Clojure's core.async, but, like, with types doing all the work.  Is that, like, a normal/sensible thing to do?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217229761,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "paul.gowder@gmail.com",
            "sender_full_name": "Paul Gowder (S2'17)",
            "sender_id": 101322,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Abstracting away all the async into the type system?",
            "submessages": [],
            "timestamp": 1605761660,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a5990ea1928ad47ec4fc3b7998607178?d=identicon&version=1",
            "client": "website",
            "content": "<p>(Why do this, you may ask?  Well, the main thing that bugs me about async programming is just having to keep thinking about too many things at once.  When the result of async call x needs to be fed into async call y and then have Z done with that, I find myself getting confused and tangled by having to think about the logic of x, y, and z all at the same time.  So my design goal is, above all else, to be able to forget about the logic of x when its time to think about the logic of y.  And that seems like the sort of thing that type systems and queues that just do one task are custom made for.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217230665,
            "is_me_message": false,
            "last_edit_timestamp": 1605762821,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "paul.gowder@gmail.com",
            "sender_full_name": "Paul Gowder (S2'17)",
            "sender_id": 101322,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Abstracting away all the async into the type system?",
            "submessages": [],
            "timestamp": 1605762789,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a5990ea1928ad47ec4fc3b7998607178?d=identicon&version=1",
            "client": "website",
            "content": "<p>And then!  And then the public API of the library where users would actually get data out of all of these requests could literally just have them extend the underlying types with their own <code>.next</code> methods, bahahaha!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217231516,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "paul.gowder@gmail.com",
            "sender_full_name": "Paul Gowder (S2'17)",
            "sender_id": 101322,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Abstracting away all the async into the type system?",
            "submessages": [],
            "timestamp": 1605764066,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<blockquote>\n<p>Actually, could take that even further. Maybe every type has its own .next method, and then the background queue literally just unwraps the Result, handles any errors that need to be handled, and calls the .next method on all the data it sees.</p>\n</blockquote>\n<p>it's like a burrito</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217259252,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Abstracting away all the async into the type system?",
            "submessages": [],
            "timestamp": 1605786857,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>I don't want to use the M word here but this is how things work in Haskell.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217259417,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Abstracting away all the async into the type system?",
            "submessages": [],
            "timestamp": 1605786965,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://hackage.haskell.org/package/async\">https://hackage.haskell.org/package/async</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217259873,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Abstracting away all the async into the type system?",
            "submessages": [],
            "timestamp": 1605787289,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a5990ea1928ad47ec4fc3b7998607178?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hahaha I like calling the m-word a burrito instead :-)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217272590,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f32f",
                    "emoji_name": "burrito",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vmehta94@gmail.com",
                        "full_name": "Vinayak Mehta (he) (F1'20)",
                        "id": 327359
                    },
                    "user_id": 327359
                },
                {
                    "emoji_code": "1f32f",
                    "emoji_name": "burrito",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                }
            ],
            "recipient_id": 20203,
            "sender_email": "paul.gowder@gmail.com",
            "sender_full_name": "Paul Gowder (S2'17)",
            "sender_id": 101322,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Abstracting away all the async into the type system?",
            "submessages": [],
            "timestamp": 1605794531,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/f6dabe79f4348d5f0e27cd4a75032580526b9c5c?x=x&version=4",
            "client": "ZulipElectron",
            "content": "<p>Hi Recursers, I am creating a  <span aria-label=\"chart\" class=\"emoji emoji-1f4c8\" role=\"img\" title=\"chart\">:chart:</span> - visualization in D3 and am trying to update data (just the data, and not the axes) on click from a separate legend-svg. I am struggling to get the data into my legend function in the first place. Does anybody have some tips on how to do this best or would like to pair on this today?</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217289573,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "melanie@imfeld.info",
            "sender_full_name": "Melanie Imfeld (she) (F2'20)",
            "sender_id": 342311,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "D3/JS - updating data onclick?",
            "submessages": [],
            "timestamp": 1605801565,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Related to detection of termination and primitive recursive functions, you might enjoy reading about <a href=\"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.46.5487&amp;rep=rep1&amp;type=pdf\">Walther Recursion</a>.  There is a really nice paper about it that I'm trying to turn up.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217312533,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Detecting Infinite Recursion",
            "submessages": [],
            "timestamp": 1605811358,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Statecharts are wonderful and still massively underrated.  I really like Miro Samek's book, though it's kind of an embedded-systems perspective.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217313896,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Statecharts",
            "submessages": [],
            "timestamp": 1605811993,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/50c0f109320065168bd7a918c9f5e205?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Does anyone have any recs for a book that kind of breaks down the fundamentals of data structures and algorithms? I realized today that my foundations are pretty shallow and I want to use some time at RC to build them up</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217314217,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "imran@imranmalek.com",
            "sender_full_name": "Imran Malek (he) (W1'20)",
            "sender_id": 361178,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "data structures and algorithms",
            "submessages": [],
            "timestamp": 1605812127,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8e68d48b833a687d791d034b420f7fc1621e0d3c?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Funny thing is I was just talking about how I didn't have a use case for them, then I started writing a document parser and it might in fact be a handy solution for structuring logic related to things like escaped/unescaped, quoted/not quoted, etc.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217315652,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "recurse@email.mikkel.ca",
            "sender_full_name": "Mikkel Paulson (he) (W1'20)",
            "sender_id": 360490,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "Statecharts",
            "submessages": [],
            "timestamp": 1605812866,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>In years that I've tried to do a different language each day, usually the combination of time available and difficulty of problems has lead to the last half of the month being done in a single comfortable language.  But the beginning is so easy, it's a fun way to play with other languages.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217317524,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "advent of code!",
            "submessages": [],
            "timestamp": 1605813727,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/cac6d1e6b078dbe912eb03b8d30470787030d330?x=x&version=2",
            "client": "website",
            "content": "<p>Roughgarden from Stanford has pretty good videos on YouTube. <a href=\"https://www.youtube.com/playlist?list=PLXFMmlk03Dt7Q0xr1PIAriY5623cKiH7V\">https://www.youtube.com/playlist?list=PLXFMmlk03Dt7Q0xr1PIAriY5623cKiH7V</a><br>\nas a book, Algorithm Design Manual is a good one.  Roughgarden's modern algorithmic toolbox is a very practical oriented class  which I would like to study at some point in more detail: <br>\n<a href=\"http://timroughgarden.org/s17/l/\">http://timroughgarden.org/s17/l/</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217317549,
            "is_me_message": false,
            "last_edit_timestamp": 1605813763,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "msapaydin@gmail.com",
            "sender_full_name": "Mehmet Serkan Apaydin (SP2'15)",
            "sender_id": 7872,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "data structures and algorithms",
            "submessages": [],
            "timestamp": 1605813739,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/71e1c5c9d32bdce5ab4ce166c7f35520cbfd3d56?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Intro to Algorithms group just worked through Grokking Algorithms...so maybe someone from that group has comments.  I found this online book to be pretty straightforward approach in python <a href=\"https://runestone.academy/\">Runestone</a>.  Also have a copy of The Algorithm Manual and it's a good read.  Skienna's lectures are also on Youtube.</p>\n<p>Personally, have enjoyed Josh Hug's lectures from his 61b class as well as the lectures from MIT 6.006.  Found these to compliment each other well as hugs is pretty heavy on concrete code examples in Java and MIT is a bit more conceptual.  And if you want to get into the math, MIT also has the recitation lectures online as well.<br>\n<a href=\"http://fa20.datastructur.es/\">Hug 61b</a><br>\n<a href=\"https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-fall-2011/\">MIT 6.006</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217319688,
            "is_me_message": false,
            "last_edit_timestamp": 1605814684,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "imran@imranmalek.com",
                        "full_name": "Imran Malek (he) (W1'20)",
                        "id": 361178
                    },
                    "user_id": 361178
                }
            ],
            "recipient_id": 20203,
            "sender_email": "bradyf@hey.com",
            "sender_full_name": "Brady Fontenot (he) (F2'20)",
            "sender_id": 342266,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "data structures and algorithms",
            "submessages": [],
            "timestamp": 1605814628,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/8e68d48b833a687d791d034b420f7fc1621e0d3c?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Yeah, it sounds like it would be fun to do the simple exercises in more niche languages, but if the later exercises build on code you wrote earlier, I don't want to find out that the code I wrote in COBOL is going to be a necessary building block for future days</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217319698,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "recurse@email.mikkel.ca",
            "sender_full_name": "Mikkel Paulson (he) (W1'20)",
            "sender_id": 360490,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "advent of code!",
            "submessages": [],
            "timestamp": 1605814630,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>load bearing COBOL would be historically appropriate though</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217320080,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "advent of code!",
            "submessages": [],
            "timestamp": 1605814808,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/7857f26c1ef2e9bdbfa843f9087710f7?d=identicon&version=1",
            "client": "ZulipMobile",
            "content": "<p>the theme of your submissions could be repeating the historical mistakes of the industry</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217320174,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f923",
                    "emoji_name": "rolling_on_the_floor_laughing",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "mail@nathanael0x4c.com",
                        "full_name": "Nate Lane (he) (W1'20)",
                        "id": 361690
                    },
                    "user_id": 361690
                }
            ],
            "recipient_id": 20203,
            "sender_email": "nathan12343@gmail.com",
            "sender_full_name": "Nathan Goldbaum (he) (S1'19)",
            "sender_id": 221814,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "advent of code!",
            "submessages": [],
            "timestamp": 1605814857,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/89dca067bdf75771429ee72733022d0d?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm a huge fan of <a href=\"https://algs4.cs.princeton.edu/home/\">Algorithms</a> by Sedgewick. <br>\nThere's also a free accompanying <a href=\"https://www.coursera.org/learn/algorithms-part1\">course on Coursera</a> which has what may well be the best auto-grader I've ever seen in an online course (free or not).</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217320900,
            "is_me_message": false,
            "last_edit_timestamp": 1605815237,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "imran@imranmalek.com",
                        "full_name": "Imran Malek (he) (W1'20)",
                        "id": 361178
                    },
                    "user_id": 361178
                }
            ],
            "recipient_id": 20203,
            "sender_email": "zarak@hey.com",
            "sender_full_name": "Zarak Mahmud (he) (F2'20)",
            "sender_id": 341780,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "data structures and algorithms",
            "submessages": [],
            "timestamp": 1605815199,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>In the same spirit as the aforementioned Algorithm Design Manual, I like the approach that Algorithm Design by Kleinberg and Tardos takes, where algorithms and data structures are built up, motivated by specific problems.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217321300,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "+1",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "eha@posteo.de",
                        "full_name": "Eugene Ha (he) (S1'18)",
                        "id": 116366
                    },
                    "user_id": 116366
                }
            ],
            "recipient_id": 20203,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "data structures and algorithms",
            "submessages": [],
            "timestamp": 1605815388,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'll put in a vote for the classic CLRS -- <a href=\"https://www.amazon.com/Introduction-Algorithms-3rd-MIT-Press/dp/0262033844\">https://www.amazon.com/Introduction-Algorithms-3rd-MIT-Press/dp/0262033844</a></p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217327707,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "12795",
                    "emoji_name": "plus1",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "imran@imranmalek.com",
                        "full_name": "Imran Malek (he) (W1'20)",
                        "id": 361178
                    },
                    "user_id": 361178
                },
                {
                    "emoji_code": "12795",
                    "emoji_name": "plus1",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "mail@nathanael0x4c.com",
                        "full_name": "Nate Lane (he) (W1'20)",
                        "id": 361690
                    },
                    "user_id": 361690
                }
            ],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "data structures and algorithms",
            "submessages": [],
            "timestamp": 1605818574,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>it's a classic for a reason</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217327715,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "data structures and algorithms",
            "submessages": [],
            "timestamp": 1605818577,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/50c0f109320065168bd7a918c9f5e205?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>Thanks everyone for the recs!</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217328413,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "imran@imranmalek.com",
            "sender_full_name": "Imran Malek (he) (W1'20)",
            "sender_id": 361178,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "data structures and algorithms",
            "submessages": [],
            "timestamp": 1605818952,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/673c1adc7e2ff3626062b62bf2da8eef?d=identicon&version=1",
            "client": "website",
            "content": "<p>Hi has anyone ever had gotten this error when trying to use npm to install.  I ran npm install -g @angular/cli <br>\nError: EACCES: permission denied, mkdir</p>\n<p>Here is the full error message: </p>\n<p>*(base) Olubisis-MacBook-Pro:~ olubisiajetunmobi$ npm install -g @angular/cli<br>\nnpm ERR! code EACCES<br>\nnpm ERR! syscall mkdir<br>\nnpm ERR! path /usr/local/lib/node_modules/@angular<br>\nnpm ERR! errno -13<br>\nnpm ERR! Error: EACCES: permission denied, mkdir '/usr/local/lib/node_modules/@angular'<br>\nnpm ERR!  [Error: EACCES: permission denied, mkdir '/usr/local/lib/node_modules/@angular'] {<br>\nnpm ERR!   errno: -13,<br>\nnpm ERR!   code: 'EACCES',<br>\nnpm ERR!   syscall: 'mkdir',<br>\nnpm ERR!   path: '/usr/local/lib/node_modules/@angular'<br>\nnpm ERR! }<br>\nnpm ERR! <br>\nnpm ERR! The operation was rejected by your operating system.<br>\nnpm ERR! It is likely you do not have the permissions to access this file as the current user<br>\nnpm ERR! <br>\nnpm ERR! If you believe this might be a permissions issue, please double-check the<br>\nnpm ERR! permissions of the file and its containing directories, or try running<br>\nnpm ERR! the command again as root/Administrator.</p>\n<p>npm ERR! A complete log of this run can be found in:<br>\nnpm ERR!     /Users/olubisiajetunmobi/.npm/_logs/2020-11-20T19_30_41_078Z-debug.log<br>\n(base) Olubisis-MacBook-Pro:~ olubisiajetunmobi$ \n*</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217449126,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "oajetunm@umich.edu",
            "sender_full_name": "Olubisi B Ajetunmobi (W1'20)",
            "sender_id": 361944,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "data structures and algorithms",
            "submessages": [],
            "timestamp": 1605901110,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>Pretty sure that the answer is in this line of the output:</p>\n<blockquote>\n<p>npm ERR! It is likely you do not have the permissions to access this file as the current user</p>\n</blockquote>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217451256,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "data structures and algorithms",
            "submessages": [],
            "timestamp": 1605902164,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/c6a4682e6a46285de64c97c77b771481?d=identicon&version=1",
            "client": "website",
            "content": "<p>(also, next time you may want to start a new thread instead of replying in an unrelated one)</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217451300,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "ori@eigenstate.org",
            "sender_full_name": "Ori Dean Bernstein (he) (W2'20)",
            "sender_id": 255045,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "data structures and algorithms",
            "submessages": [],
            "timestamp": 1605902186,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/3f6bef626649c46b4cc3fd9f67c151a19170da5e?x=x&version=21",
            "client": "ZulipMobile",
            "content": "<p>Yeah the problem is that you are doing a global install with -g, and that installs stuff to /usr/local/, which your current user may not have permissions on. You can prepend <code>sudo</code> to the command to make it work, but that might clobber other stuff on your system.</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217456303,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "jkozak@fmail.co.uk",
            "sender_full_name": "Jake \u26e4 Prozvyshe (they) (W1'17)",
            "sender_id": 8478,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "data structures and algorithms",
            "submessages": [],
            "timestamp": 1605904933,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5d6a7a4735c43e9dae0e3f9ef82919706728452a?x=x&version=3",
            "client": "ZulipMobile",
            "content": "<p>does npm have an equivalent to <code>virtualenv</code>? i have a <code>shell.nix</code> file that's like that and i assumed there was a way to do it within the npm ecosystem, but maybe i'm wrong there :/</p>",
            "content_type": "text/html",
            "display_recipient": "programming",
            "flags": [
                "read"
            ],
            "id": 217456770,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 20203,
            "sender_email": "me@wesleyac.com",
            "sender_full_name": "Wesley Aptekar-Cassels (they) (m8'20)",
            "sender_id": 101330,
            "sender_realm_str": "recurse",
            "stream_id": 18957,
            "subject": "data structures and algorithms",
            "submessages": [],
            "timestamp": 1605905224,
            "topic_links": [],
            "type": "stream"
        }
    ],
    "msg": "",
    "result": "success"
}
