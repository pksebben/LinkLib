{
    "anchor": 0,
    "found_anchor": false,
    "found_newest": true,
    "found_oldest": true,
    "history_limited": false,
    "messages": [
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d96d4baab5c40af1eda5fd533d650f25?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'm looking at some practice problems in <a href=\"http://www.amazon.com/Computer-Systems-Programmers-Perspective-Edition/dp/0136108040\" target=\"_blank\" title=\"http://www.amazon.com/Computer-Systems-Programmers-Perspective-Edition/dp/0136108040\">this book</a> and am really confused about what constitutes a valid data movement instruction. In problem 3.2 you're asked to name the correct operand for each operation in this list:</p>\n<p>1. <code>mov %eax, (%esp)</code><br>\n2. <code>mov (%eax), %dx</code><br>\netc.</p>\n<p>1 is easy \u2014 <code>%eax</code> is a 32-bit register, and so is <code>%esp</code>, so <code>movl</code> (move double) is correct. The second is not so easy \u2014 <code>%dx</code> is a 16-bit register, so we can only move a single word into it, and <code>%eax</code> is a 32-bit register. According to the author, the correct answer is <code>movw</code> but it's not clear why that works. Does the machine just know to only address the 16-bit register at <code>%ax</code> when you give it the word-length operand (<code>movw</code>)?</p>\n<p>There's a similar thing in the next problem. We're asked to explain what's wrong with the following line of code:</p>\n<p>2. <code>movl %ax, (%esp)</code></p>\n<p>It's a lot like 2 above: here we're trying to read a double (<code>movl</code>) when <code>%ax</code> is only a 16-bit register, but why is this valid in the first example and not in this one? Shouldn't the machine just zero/sign extend the word at <code>%ax</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "assembly languages",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32009956,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 37710,
            "sender_email": "jeffblagdon@gmail.com",
            "sender_full_name": "Jeff Blagdon (F'13)",
            "sender_id": 2878,
            "sender_realm_str": "recurse",
            "stream_id": 26375,
            "subject": "The rules for valid X-86 mov operations",
            "submessages": [],
            "timestamp": 1418049378,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0df254894a5b129d998fcf4a37b8b282?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>(I'm assuming AT&amp;T syntax -- I'm not sure what syntax the book is using.) In the second problem, you are dereferencing <code>%eax</code>.  Thus, the <code>movw</code> will only address the 16-bits at that address.  But for the last problem, you are asking to move 32-bits out of only the first 16-bits of <code>ax</code>.</p>",
            "content_type": "text/html",
            "display_recipient": "assembly languages",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32011839,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 37710,
            "sender_email": "mzlee@umich.edu",
            "sender_full_name": "Michael Lee",
            "sender_id": 6993,
            "sender_realm_str": "recurse",
            "stream_id": 26375,
            "subject": "The rules for valid X-86 mov operations",
            "submessages": [],
            "timestamp": 1418052307,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d96d4baab5c40af1eda5fd533d650f25?d=identicon&version=1",
            "client": "website",
            "content": "<p>Thanks for the answer. One more question though:</p>\n<blockquote>\n<p>In the second problem, you are dereferencing <code>%eax</code>. Thus, the <code>movw</code> will only address the 16-bits at that address.</p>\n</blockquote>\n<p>You mean the first 16 bits at <code>%eax</code>, right?</p>",
            "content_type": "text/html",
            "display_recipient": "assembly languages",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32012899,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 37710,
            "sender_email": "jeffblagdon@gmail.com",
            "sender_full_name": "Jeff Blagdon (F'13)",
            "sender_id": 2878,
            "sender_realm_str": "recurse",
            "stream_id": 26375,
            "subject": "The rules for valid X-86 mov operations",
            "submessages": [],
            "timestamp": 1418053836,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/0df254894a5b129d998fcf4a37b8b282?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Yeah, I mean the first 16 bits at <code>%eax</code> interpretted as an address.</p>",
            "content_type": "text/html",
            "display_recipient": "assembly languages",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32013333,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 37710,
            "sender_email": "mzlee@umich.edu",
            "sender_full_name": "Michael Lee",
            "sender_id": 6993,
            "sender_realm_str": "recurse",
            "stream_id": 26375,
            "subject": "The rules for valid X-86 mov operations",
            "submessages": [],
            "timestamp": 1418054523,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/d96d4baab5c40af1eda5fd533d650f25?d=identicon&version=1",
            "client": "website",
            "content": "<p>Awesome, thanks for the help!</p>",
            "content_type": "text/html",
            "display_recipient": "assembly languages",
            "flags": [
                "read",
                "historical"
            ],
            "id": 32014432,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 37710,
            "sender_email": "jeffblagdon@gmail.com",
            "sender_full_name": "Jeff Blagdon (F'13)",
            "sender_id": 2878,
            "sender_realm_str": "recurse",
            "stream_id": 26375,
            "subject": "The rules for valid X-86 mov operations",
            "submessages": [],
            "timestamp": 1418056100,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/15cc6e65f5cb0faac87d0b88dae865281ba57899?x=x&version=2",
            "client": "website",
            "content": "<p>When compiling C with <code>gcc</code>, there is a <code>-g</code> flag to add debugging symbols to the binary. in <code>gdb</code> I can then set a breakpoint with <code>break main</code>. How do I do the same with <code>nasm</code> and <code>ld</code>? <code>-g</code> did not work as expected.</p>",
            "content_type": "text/html",
            "display_recipient": "assembly languages",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110184500,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 37710,
            "sender_email": "moritz.neeb@posteo.net",
            "sender_full_name": "Moritz Neeb (he) (SP1'17)",
            "sender_id": 100515,
            "sender_realm_str": "recurse",
            "stream_id": 26375,
            "subject": "debug flags for gdb",
            "submessages": [],
            "timestamp": 1493411933,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/15cc6e65f5cb0faac87d0b88dae865281ba57899?x=x&version=2",
            "client": "website",
            "content": "<p>gdb still says \"no debugging symbols found\"</p>",
            "content_type": "text/html",
            "display_recipient": "assembly languages",
            "flags": [
                "read",
                "historical"
            ],
            "id": 110184518,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 37710,
            "sender_email": "moritz.neeb@posteo.net",
            "sender_full_name": "Moritz Neeb (he) (SP1'17)",
            "sender_id": 100515,
            "sender_realm_str": "recurse",
            "stream_id": 26375,
            "subject": "debug flags for gdb",
            "submessages": [],
            "timestamp": 1493411969,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5ab3c0306ee4ef8d2f926da8207cfbec9d4bf6e4?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>I wanted to open a general thread so that people could share any resources they felt were helpful in learning assembly programming. I'm diving into it more and would appreciate any links or otherwise that you felt helped you out.</p>",
            "content_type": "text/html",
            "display_recipient": "assembly languages",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111844895,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 37710,
            "sender_email": "jeffarn12@gmail.com",
            "sender_full_name": "Jeff Arn (S1'17)",
            "sender_id": 101079,
            "sender_realm_str": "recurse",
            "stream_id": 26375,
            "subject": "Good resources for learning assembly",
            "submessages": [],
            "timestamp": 1496942943,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/2de9901913d2f414b7b174d2c2c69a88?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"jeffarn12@gmail.com\" data-user-id=\"101079\">@Jeff Arn (S1'17)</span> Write C code and use gcc -S to see what asm it compiles to.  :)</p>",
            "content_type": "text/html",
            "display_recipient": "assembly languages",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111844911,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 37710,
            "sender_email": "chris@printf.net",
            "sender_full_name": "Chris Ball (SP2'15)",
            "sender_id": 7857,
            "sender_realm_str": "recurse",
            "stream_id": 26375,
            "subject": "Good resources for learning assembly",
            "submessages": [],
            "timestamp": 1496942994,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/78f341b5969eb2baa618953167980815?d=identicon&version=1",
            "client": "website",
            "content": "<p>I did this in my batch and learned a lot from it. I had started with Knuth's MIX assembly before RC. Chapter 1.3 in \"The Art of Computer Programming\" was super helpful to me. The RC library has a copy. The MIX instructions are syntactically different from x64 assembly but conceptually the same in many cases and I could see how assembly evolved. That chapter was published in 1968 for instance. </p>\n<p>From there a few things that were helpful to me:</p>\n<p><a href=\"https://www.recurse.com/blog/7-understanding-c-by-learning-assembly\" target=\"_blank\" title=\"https://www.recurse.com/blog/7-understanding-c-by-learning-assembly\">Dave from RC's post</a><br>\n<a href=\"http://wiki.osdev.org/System_V_ABI\" target=\"_blank\" title=\"http://wiki.osdev.org/System_V_ABI\">Learning the calling conventions on Linux</a><br>\n<a href=\"https://godbolt.org/\" target=\"_blank\" title=\"https://godbolt.org/\">An online disassembler</a></p>\n<p>Lastly, the Intel manuals are enormous but helpful for learning about what a complicated instruction is actually doing. Same goes for things like understanding the flags register. <a href=\"https://software.intel.com/en-us/articles/intel-sdm#three-volume\" target=\"_blank\" title=\"https://software.intel.com/en-us/articles/intel-sdm#three-volume\">Intel Manuals</a></p>\n<p>To avoid thinking I understood what was going on vs actually understanding, I wrote merge sort in assembly with recursive and non recursive versions. Only at that point did I compare my versions in assembly to what my c compiler generated for similar implementations. Comparing my assembly to the compiler's -O3 flag was also fun. There are some cool \"tricks\" that were non obvious to me. </p>\n<p>Other things that were helpful for me - I did my work in a docker container with Debian Jessie so that I had a known good linux system. My computer is OS X and there are sufficient differences at the assembly/syscall level between between OS X and linux to create confusion from my experience. </p>\n<p>Also, I did my assembly work without linking in libc. That way I could do all the syscalls myself (e.g. instead of calling libc's 'puts' to print). That gave me more of an understanding of what was going on, including for instance that \"main\" as the program entry point is a libc convention vs linux's \"_start\".</p>",
            "content_type": "text/html",
            "display_recipient": "assembly languages",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111889609,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f64f",
                    "emoji_name": "thank_you",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "me@ballingt.com",
                        "full_name": "Tom Ballinger (he) (W'12)",
                        "id": 807
                    },
                    "user_id": 807
                }
            ],
            "recipient_id": 37710,
            "sender_email": "robert.h.hunt@gmail.com",
            "sender_full_name": "Robert Hunt (W1'16)",
            "sender_id": 100318,
            "sender_realm_str": "recurse",
            "stream_id": 26375,
            "subject": "Good resources for learning assembly",
            "submessages": [],
            "timestamp": 1497025005,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/5ab3c0306ee4ef8d2f926da8207cfbec9d4bf6e4?x=x&version=2",
            "client": "ZulipElectron",
            "content": "<p>Thank you <span class=\"user-mention\" data-user-email=\"robert.h.hunt@gmail.com\" data-user-id=\"100318\">@Robert Hunt (W1'16)</span> this is really helpful information! I appreciate you taking the the time to put all of that together. Also I've been compiling my C programs and things like Hello World to assembly as you and <span class=\"user-mention\" data-user-email=\"chris@printf.net\" data-user-id=\"7857\">@Chris Ball (SP2'15)</span> have suggested and it has been very interesting to see how GCC constructs things.</p>",
            "content_type": "text/html",
            "display_recipient": "assembly languages",
            "flags": [
                "read",
                "historical"
            ],
            "id": 111890307,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 37710,
            "sender_email": "jeffarn12@gmail.com",
            "sender_full_name": "Jeff Arn (S1'17)",
            "sender_id": 101079,
            "sender_realm_str": "recurse",
            "stream_id": 26375,
            "subject": "Good resources for learning assembly",
            "submessages": [],
            "timestamp": 1497026272,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Inspired by xchg rax, rax 0x1e, which I finally figured out, I dug up this interesting demoscene document on creative uses of the BCD instructions: <a href=\"http://www.hugi.scene.org/online/coding/hugi%2017%20-%20coaax.htm\" target=\"_blank\" title=\"http://www.hugi.scene.org/online/coding/hugi%2017%20-%20coaax.htm\">http://www.hugi.scene.org/online/coding/hugi%2017%20-%20coaax.htm</a></p>",
            "content_type": "text/html",
            "display_recipient": "assembly languages",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116473421,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 37710,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 26375,
            "subject": "x86 (32-bit only) BCD instructions",
            "submessages": [],
            "timestamp": 1506693352,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/a6a0ff0a4a9a86ae7bc4524453d439bd?d=identicon&version=1",
            "client": "website",
            "content": "<p>Fascinating</p>",
            "content_type": "text/html",
            "display_recipient": "assembly languages",
            "flags": [
                "read",
                "historical"
            ],
            "id": 116473809,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 37710,
            "sender_email": "annie.cherk@gmail.com",
            "sender_full_name": "Annie Cherkaev (she/they) (m4'18)",
            "sender_id": 9502,
            "sender_realm_str": "recurse",
            "stream_id": 26375,
            "subject": "x86 (32-bit only) BCD instructions",
            "submessages": [],
            "timestamp": 1506693993,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/81c6c8040fc0263607edd05c09dacf6b?d=identicon&version=1",
            "client": "website",
            "content": "<p>Just noticed I had this starred: <a href=\"https://github.com/larsbrinkhoff/awesome-cpus\" target=\"_blank\" title=\"https://github.com/larsbrinkhoff/awesome-cpus\">https://github.com/larsbrinkhoff/awesome-cpus</a></p>",
            "content_type": "text/html",
            "display_recipient": "assembly languages",
            "flags": [
                "read",
                "historical"
            ],
            "id": 117712381,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 37710,
            "sender_email": "julian@cipht.net",
            "sender_full_name": "Julian Squires (he) (F2'17)",
            "sender_id": 101992,
            "sender_realm_str": "recurse",
            "stream_id": 26375,
            "subject": "Good resources for learning assembly",
            "submessages": [],
            "timestamp": 1509114690,
            "topic_links": [],
            "type": "stream"
        }
    ],
    "msg": "",
    "result": "success"
}
