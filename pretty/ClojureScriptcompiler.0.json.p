{
    "anchor": 0,
    "found_anchor": false,
    "found_newest": true,
    "found_oldest": true,
    "history_limited": false,
    "messages": [
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>Since there's likely to be various discussions about ClojureScript compiler internals I decided to make a dedicated stream. Ask questions, submit ideas, discuss patches, etc.</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11600239,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "New Stream!",
            "submessages": [],
            "timestamp": 1382112787,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"travis.thieman@gmail.com\">@Travis Thieman (F'13)</span> In general I would prefer fewer hard exceptions in the compiler. Tools should get to decide how errors are handled. This way editors and IDE can collect all the things that are wrong in a program without the compiler blowing up. So how <code>warning</code> is handled will be configurable in the future.  The only thing that I believe should be a hard error in the compiler is an error during reading.</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11600314,
            "is_me_message": false,
            "last_edit_timestamp": 1382117197,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-622",
            "submessages": [],
            "timestamp": 1382112912,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e28e6763c390b7a49f17be932d57ad?d=identicon&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>Makes sense, thanks for explaining</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11601951,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "travis.thieman@gmail.com",
            "sender_full_name": "Travis Thieman (F'13)",
            "sender_id": 2881,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-622",
            "submessages": [],
            "timestamp": 1382115907,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e28e6763c390b7a49f17be932d57ad?d=identicon&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p><a href=\"http://dev.clojure.org/jira/browse/CLJS-528\" target=\"_blank\" title=\"http://dev.clojure.org/jira/browse/CLJS-528\">http://dev.clojure.org/jira/browse/CLJS-528</a></p>\n<p><span class=\"user-mention\" data-user-email=\"rupss@cs.stanford.edu\">@Rupa Shankar (F'13)</span> do you want to take another shot at this today?</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11705873,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "travis.thieman@gmail.com",
            "sender_full_name": "Travis Thieman (F'13)",
            "sender_id": 2881,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-528",
            "submessages": [],
            "timestamp": 1382364939,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> <a href=\"http://swannodette.github.io/2013/10/27/the-essence-of-clojurescript/\" target=\"_blank\" title=\"http://swannodette.github.io/2013/10/27/the-essence-of-clojurescript/\">This</a> is awesome!</p>\n<p>If anyone's looking to get up and running with ClojureScript in less than a minute, check out that post!</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11999201,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "Up and running with ClojureScript!",
            "submessages": [],
            "timestamp": 1382968243,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> thanks, been wanting something as easy as this for a very long time - now we have the compiler support for it.</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 11999304,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "Up and running with ClojureScript!",
            "submessages": [],
            "timestamp": 1382968478,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e28e6763c390b7a49f17be932d57ad?d=identicon&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Adding <code>:source-map true</code> to the project.clj of an existing cljs project gives me the following traceback upon compilation, have you seen this before?</p>\n<div class=\"codehilite\"><pre>Compiling &quot;resources/public/js/cljs.js&quot; from [&quot;src/cljs&quot;]...\nCompiling &quot;resources/public/js/cljs.js&quot; failed.\njava.lang.ClassCastException: java.lang.Boolean cannot be cast to java.lang.String\n          closure.clj:104 cljs.closure/make-options\n          closure.clj:706 cljs.closure/optimize\n          RestFn.java:139 clojure.lang.RestFn.applyTo\n             core.clj:619 clojure.core/apply\n          closure.clj:983 cljs.closure/build\n          closure.clj:944 cljs.closure/build\n          compiler.clj:57 cljsbuild.compiler/compile-cljs[fn]\n          compiler.clj:56 cljsbuild.compiler/compile-cljs\n         compiler.clj:140 cljsbuild.compiler/run-compiler\nform-init9076818100097599173.clj:1 user/eval2738[fn]\n          LazySeq.java:42 clojure.lang.LazySeq.sval\n          LazySeq.java:60 clojure.lang.LazySeq.seq\n              RT.java:484 clojure.lang.RT.seq\n             core.clj:133 clojure.core/seq\n            core.clj:2780 clojure.core/dorun\n            core.clj:2796 clojure.core/doall\nform-init9076818100097599173.clj:1 user/eval2738\n       Compiler.java:6619 clojure.lang.Compiler.eval\n       Compiler.java:6609 clojure.lang.Compiler.eval\n       Compiler.java:7064 clojure.lang.Compiler.load\n       Compiler.java:7020 clojure.lang.Compiler.loadFile\n             main.clj:294 clojure.main/load-script\n             main.clj:299 clojure.main/init-opt\n             main.clj:327 clojure.main/initialize\n             main.clj:362 clojure.main/null-opt\n             main.clj:440 clojure.main/main\n          RestFn.java:421 clojure.lang.RestFn.invoke\n             Var.java:419 clojure.lang.Var.invoke\n             AFn.java:163 clojure.lang.AFn.applyToHelper\n             Var.java:532 clojure.lang.Var.applyTo\n             main.java:37 clojure.main.main\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12000050,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "travis.thieman@gmail.com",
            "sender_full_name": "Travis Thieman (F'13)",
            "sender_id": 2881,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "Up and running with ClojureScript!",
            "submessages": [],
            "timestamp": 1382969997,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e28e6763c390b7a49f17be932d57ad?d=identicon&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>It's failing at trying to set the source map output path to true, which makes sense. I must not have an up to date version, let me try updating.</p>\n<div class=\"codehilite\"><pre>      (set! (.sourceMapOutputPath compiler-options)\n            (:source-map opts))  ;; where (:source-map opts) is true\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12000244,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "travis.thieman@gmail.com",
            "sender_full_name": "Travis Thieman (F'13)",
            "sender_id": 2881,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "Up and running with ClojureScript!",
            "submessages": [],
            "timestamp": 1382970309,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/6f331605bee541a4c2c8da37a297786194212c15?x=x&version=2",
            "client": "website",
            "content": "<p>Have you tried specifying the latest version of CLJS in your project.clj?</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12000257,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "zach.allaun+recurse-zulip@gmail.com",
            "sender_full_name": "Zach Allaun (he) (S'12)",
            "sender_id": 808,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "Up and running with ClojureScript!",
            "submessages": [],
            "timestamp": 1382970355,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e28e6763c390b7a49f17be932d57ad?d=identicon&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>Yes, specifying the latest version is now giving me a friendlier error message, just a project.clj spec problem at this point</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12000303,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "travis.thieman@gmail.com",
            "sender_full_name": "Travis Thieman (F'13)",
            "sender_id": 2881,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "Up and running with ClojureScript!",
            "submessages": [],
            "timestamp": 1382970406,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e28e6763c390b7a49f17be932d57ad?d=identicon&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>java.lang.AssertionError: Assert failed: :source-map must name a file when using :whitespace, :simple, or :advanced optimizations<br>\n(string? fname)</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12000307,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "travis.thieman@gmail.com",
            "sender_full_name": "Travis Thieman (F'13)",
            "sender_id": 2881,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "Up and running with ClojureScript!",
            "submessages": [],
            "timestamp": 1382970425,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"travis.thieman@gmail.com\">@Travis Thieman (F'13)</span> yes, but fixed in<code>1978</code></p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12000721,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "Up and running with ClojureScript!",
            "submessages": [],
            "timestamp": 1382971197,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>for optimizations <code>:none</code> a single file name doesn't really make sense since in that case we need to generate a source map for each compiled file.</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12000768,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "Up and running with ClojureScript!",
            "submessages": [],
            "timestamp": 1382971255,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e28e6763c390b7a49f17be932d57ad?d=identicon&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>Does anyone want to help me investigate this elusive bug? <a href=\"http://dev.clojure.org/jira/browse/CLJS-631\" target=\"_blank\" title=\"http://dev.clojure.org/jira/browse/CLJS-631\">http://dev.clojure.org/jira/browse/CLJS-631</a></p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12092882,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "travis.thieman@gmail.com",
            "sender_full_name": "Travis Thieman (F'13)",
            "sender_id": 2881,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-631",
            "submessages": [],
            "timestamp": 1383143097,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"travis.thieman@gmail.com\">@Travis Thieman (F'13)</span> I chimed in on the JIRA ticket, I think you should see if there's a way to make <code>ns-first-segments</code> impervious to incremental compilation.</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12101110,
            "is_me_message": false,
            "last_edit_timestamp": 1383155087,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-631",
            "submessages": [],
            "timestamp": 1383155077,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e28e6763c390b7a49f17be932d57ad?d=identicon&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>Wouldn't the suggested fix address that? Each file would be aware of what it had required in its own ns.</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12101126,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "travis.thieman@gmail.com",
            "sender_full_name": "Travis Thieman (F'13)",
            "sender_id": 2881,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-631",
            "submessages": [],
            "timestamp": 1383155105,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"travis.thieman@gmail.com\">@Travis Thieman (F'13)</span> I don't think that fix is really how we want to do it, too much of workaround. I think first segments should be tracked in the analyzer.</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12101236,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-631",
            "submessages": [],
            "timestamp": 1383155262,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e28e6763c390b7a49f17be932d57ad?d=identicon&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>Alright, that does sound like a better plan. I'll look into it. For my own benefit for understanding the compiler, though, would the more-hacky way proposed have worked? Or do things get analyzed/compiled in such a way that it wouldn't have guaranteed no shadowing within a given file?</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12101314,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "travis.thieman@gmail.com",
            "sender_full_name": "Travis Thieman (F'13)",
            "sender_id": 2881,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-631",
            "submessages": [],
            "timestamp": 1383155351,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"travis.thieman@gmail.com\">@Travis Thieman (F'13)</span> it's hard to say without thinking about it a lot more, the caching behavior adds a lot of stateful complexity to the compiler - which is hard to reason about. The price for fast builds :(</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12101590,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-631",
            "submessages": [],
            "timestamp": 1383155736,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e28e6763c390b7a49f17be932d57ad?d=identicon&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Just to make sure I'm understanding correctly, there's still no guarantee that all files will be analyzed before any of them get compiled, right? So this still needs to work on an individual file basis using the ns declaration in each file?</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12103097,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "travis.thieman@gmail.com",
            "sender_full_name": "Travis Thieman (F'13)",
            "sender_id": 2881,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-631",
            "submessages": [],
            "timestamp": 1383157911,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"travis.thieman@gmail.com\">@Travis Thieman (F'13)</span> all files are always guaranteed to be analyzed in dependency order.</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12103166,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-631",
            "submessages": [],
            "timestamp": 1383157978,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e28e6763c390b7a49f17be932d57ad?d=identicon&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>Brilliant, thanks.</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12103178,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "travis.thieman@gmail.com",
            "sender_full_name": "Travis Thieman (F'13)",
            "sender_id": 2881,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-631",
            "submessages": [],
            "timestamp": 1383157989,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"travis.thieman@gmail.com\">@Travis Thieman (F'13)</span> that looks like a sweet patch :D :D :D</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12105087,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-631",
            "submessages": [],
            "timestamp": 1383160569,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e28e6763c390b7a49f17be932d57ad?d=identicon&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>Five hours of banging head against wall: TOTALLY WORTH IT</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12105104,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "travis.thieman@gmail.com",
            "sender_full_name": "Travis Thieman (F'13)",
            "sender_id": 2881,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-631",
            "submessages": [],
            "timestamp": 1383160591,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"travis.thieman@gmail.com\">@Travis Thieman (F'13)</span> haha, yeah to be honest that's what hacking on the CLJS compiler is often like, 5 hours of trying stuff, and then ... 5 lines of code that does the correct simple thing!</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12105118,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-631",
            "submessages": [],
            "timestamp": 1383160632,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"travis.thieman@gmail.com\">@Travis Thieman (F'13)</span> one little thing that would be useful, can you compare what the compile times are for <code>:optimizations</code> <code>:none</code> pre and post patch, best if you do this via a REPL so JVM boot time and warmup aren't a factor. Thanks.</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12105177,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-631",
            "submessages": [],
            "timestamp": 1383160720,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e28e6763c390b7a49f17be932d57ad?d=identicon&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>Sure, is there a guide to the correct way to do this through the REPL? Or do I just need to go into the closure namespace and call build on things?</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12105193,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "travis.thieman@gmail.com",
            "sender_full_name": "Travis Thieman (F'13)",
            "sender_id": 2881,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-631",
            "submessages": [],
            "timestamp": 1383160784,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"travis.thieman@gmail.com\">@Travis Thieman (F'13)</span> yeah just call <code>cljs.closure/build</code> from the REPL, that's really it.</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12105237,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-631",
            "submessages": [],
            "timestamp": 1383160816,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>something like this:</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"nb\">dotimes </span><span class=\"p\">[</span><span class=\"nv\">_</span> <span class=\"mi\">10</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nb\">time </span><span class=\"p\">(</span><span class=\"nf\">cljs.closure/build</span> <span class=\"s\">&quot;clojurescript/src/cljs&quot;</span> <span class=\"p\">{</span> <span class=\"nv\">...</span> <span class=\"p\">})))</span>\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12105382,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-631",
            "submessages": [],
            "timestamp": 1383161118,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e28e6763c390b7a49f17be932d57ad?d=identicon&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>Is there an option to force a clean compile?</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12106364,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "travis.thieman@gmail.com",
            "sender_full_name": "Travis Thieman (F'13)",
            "sender_id": 2881,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-631",
            "submessages": [],
            "timestamp": 1383162370,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e28e6763c390b7a49f17be932d57ad?d=identicon&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>Ah, you throw true at the end of the call to build, very good.</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12106612,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "travis.thieman@gmail.com",
            "sender_full_name": "Travis Thieman (F'13)",
            "sender_id": 2881,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-631",
            "submessages": [],
            "timestamp": 1383162700,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"travis.thieman@gmail.com\">@Travis Thieman (F'13)</span> are those reported timings for compiling <code>core.cljs</code>?</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12107020,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-631",
            "submessages": [],
            "timestamp": 1383163272,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e28e6763c390b7a49f17be932d57ad?d=identicon&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>It's compiling a tiny cljs file. I could point it directly at core if you'd like.</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12107035,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "travis.thieman@gmail.com",
            "sender_full_name": "Travis Thieman (F'13)",
            "sender_id": 2881,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-631",
            "submessages": [],
            "timestamp": 1383163317,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e28e6763c390b7a49f17be932d57ad?d=identicon&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>Does passing reset to build not cause core.cljs to get recompiled? My mistake.</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12107083,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "travis.thieman@gmail.com",
            "sender_full_name": "Travis Thieman (F'13)",
            "sender_id": 2881,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-631",
            "submessages": [],
            "timestamp": 1383163354,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"travis.thieman@gmail.com\">@Travis Thieman (F'13)</span> this looks good.</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12107758,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-631",
            "submessages": [],
            "timestamp": 1383164317,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>I've made a bunch of optimization tickets around protocols that would be both fun, informative, and impactful - <a href=\"http://dev.clojure.org/jira/browse/CLJS\" target=\"_blank\" title=\"http://dev.clojure.org/jira/browse/CLJS\">http://dev.clojure.org/jira/browse/CLJS</a></p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12194494,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "Optimization Spree",
            "submessages": [],
            "timestamp": 1383327126,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e28e6763c390b7a49f17be932d57ad?d=identicon&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Here's a fun one that I think encompasses a few issues. The first is that <code>js-obj</code> exists in two places: in <code>clj/core.clj</code> as a macro, and in <code>cljs/core.cljs</code> as a function. George can't pass an expression because he's talking to js-obj the macro. However, when he assigns it to another var called <code>object</code>, this works. This is a bug itself, since this should return the \"can't take value of a macro\" error. Once he's done that, the call to <code>object</code> now references <code>js-obj</code> *the function*, so his call works.</p>\n<p>What's the best resolution here? I'm interested in the original reason for having these functions shadow each other like this, there are a few other examples like <code>make-array</code> that have both macro and function definitions.</p>\n<p><a href=\"http://dev.clojure.org/jira/browse/CLJS-647\" target=\"_blank\" title=\"http://dev.clojure.org/jira/browse/CLJS-647\">http://dev.clojure.org/jira/browse/CLJS-647</a></p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12316762,
            "is_me_message": false,
            "last_edit_timestamp": 1383595040,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "travis.thieman@gmail.com",
            "sender_full_name": "Travis Thieman (F'13)",
            "sender_id": 2881,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-647",
            "submessages": [],
            "timestamp": 1383595017,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"travis.thieman@gmail.com\">@Travis Thieman (F'13)</span> it's just an inlining macro, as JS engines likely to optimize JSON literals - the only thing that needs to be done is that the inlining macro version of <code>js-obj</code> should evaluate non-string/symbol keys.</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12316879,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-647",
            "submessages": [],
            "timestamp": 1383595188,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e28e6763c390b7a49f17be932d57ad?d=identicon&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>Should <code>(def object js-obj)</code> work? It would throw an error in Clojure, right?</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12316937,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "travis.thieman@gmail.com",
            "sender_full_name": "Travis Thieman (F'13)",
            "sender_id": 2881,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-647",
            "submessages": [],
            "timestamp": 1383595234,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"travis@mcdem.us\">@Travis McDemus (S'13)</span> it will work just like the arithmetic inlining macros work with the runtime function versions, see <code>+</code>, <code>-</code> etc</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12317093,
            "is_me_message": false,
            "last_edit_timestamp": 1383595518,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-647",
            "submessages": [],
            "timestamp": 1383595493,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e28e6763c390b7a49f17be932d57ad?d=identicon&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Is it worth it to only eval non-string and symbol, or should we just eval everything since the result would be the same? Seems to have no impact on build times based on some quick benchmarking. Is this bad?</p>\n<div class=\"codehilite\"><pre>(defmacro js-obj [&amp; rest]\n  (let [kvs-str (-&gt;&gt; (repeat &quot;~{}:~{}&quot;)\n                     (take (quot (count rest) 2))\n                     (interpose &quot;,&quot;)\n                     (apply core/str))]\n    (list* &#39;js* (core/str &quot;{&quot; kvs-str &quot;}&quot;) (map eval rest))))\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12318139,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "travis.thieman@gmail.com",
            "sender_full_name": "Travis Thieman (F'13)",
            "sender_id": 2881,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-647",
            "submessages": [],
            "timestamp": 1383597084,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"travis.thieman@gmail.com\">@Travis Thieman (F'13)</span> <code>eval</code> won't work here because you are eval'ing in Clojure which doesn't know anything about ClojureScript :) What you want to do is pull out non string/symbol keys and rewrite to a <code>let</code> expression something like:</p>\n<div class=\"codehilite\"><pre>`(let [~@bindings]\n   (js-obj\n      ...))\n</pre></div>\n\n\n<p>It's an interesting macro to write so I'll leave the details up to you :)</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12318725,
            "is_me_message": false,
            "last_edit_timestamp": 1383598048,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-647",
            "submessages": [],
            "timestamp": 1383598037,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e28e6763c390b7a49f17be932d57ad?d=identicon&version=1",
            "client": "desktop app Mac 0.3.8",
            "content": "<p>Ah, okay, I thought this part was running in pure Clojure. Thanks for the clarification.</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12318835,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "travis.thieman@gmail.com",
            "sender_full_name": "Travis Thieman (F'13)",
            "sender_id": 2881,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-647",
            "submessages": [],
            "timestamp": 1383598190,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e28e6763c390b7a49f17be932d57ad?d=identicon&version=1",
            "client": "desktop app Mac 0.3.9",
            "content": "<p>Can anyone explain to me what is different about these two macros? The first one works fine, and the second one makes the CLJS compiler explode into a thousand tiny pieces.</p>\n<div class=\"codehilite\"><pre>(defmacro js-obj [&amp; rest]\n `(js-obj* ~@rest))\n\n(defmacro js-obj [&amp; rest]\n  `(let [bindings# ~rest]\n     (js-obj* ~@bindings#)))\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12323928,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "travis.thieman@gmail.com",
            "sender_full_name": "Travis Thieman (F'13)",
            "sender_id": 2881,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "Macro Hell",
            "submessages": [],
            "timestamp": 1383604923,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"travis.thieman@gmail.com\">@Travis Thieman (F'13)</span> macros are tricky. Your second one doesn't make sense, you're trying to do a unquote splicing on something that's part of the CLJS source.</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12324145,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "Macro Hell",
            "submessages": [],
            "timestamp": 1383605218,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e28e6763c390b7a49f17be932d57ad?d=identicon&version=1",
            "client": "desktop app Mac 0.3.9",
            "content": "<p>Is there no way to unpack a vector other than unquote splicing? apply doesn't work since I'm working with macros rather than functions</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12324169,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "travis.thieman@gmail.com",
            "sender_full_name": "Travis Thieman (F'13)",
            "sender_id": 2881,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "Macro Hell",
            "submessages": [],
            "timestamp": 1383605258,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"travis.thieman@gmail.com\">@Travis Thieman (F'13)</span> what I'm saying is your macro exhibits some confusion between <strong>compile time</strong> and <strong>run time</strong>. You're gensyming <code>bindings#</code> for use at <strong>run time</strong> in ClojureScript, you cannot access that at <strong>compile time</strong> in the macro.</p>\n<p>Before digging too deep into <code>js-obj*</code> I'd step back and try to understand why the second one cannot work.</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12324221,
            "is_me_message": false,
            "last_edit_timestamp": 1383607154,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "Macro Hell",
            "submessages": [],
            "timestamp": 1383605318,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e28e6763c390b7a49f17be932d57ad?d=identicon&version=1",
            "client": "desktop app Mac 0.3.9",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Trying out a simpler patch for this after trying to go down the path of a runtime macro and failing. This patch will continue to use the fast js-obj macro when all of the keys are strings and dispatches to the slower js-obj function (which calls goog.object/create) otherwise.</p>\n<p>I originally tried a few different methods of solving the problem using the let binding you suggested, but was unable to come to a solution since I needed to evaluate the args within the macro and then pass their values as literals to the parser. I'd be happy to talk about it more or to get some clarification on a better way to solve the problem.</p>\n<p><a href=\"https://github.com/tthieman/clojurescript/commit/6784378b74a2fd0890edff5fcc9032675f10b1da\" target=\"_blank\" title=\"https://github.com/tthieman/clojurescript/commit/6784378b74a2fd0890edff5fcc9032675f10b1da\">https://github.com/tthieman/clojurescript/commit/6784378b74a2fd0890edff5fcc9032675f10b1da</a></p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12371299,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "travis.thieman@gmail.com",
            "sender_full_name": "Travis Thieman (F'13)",
            "sender_id": 2881,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-647",
            "submessages": [],
            "timestamp": 1383689682,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"travis.thieman@gmail.com\">@Travis Thieman (F'13)</span> here's how I would do it so we always get the most efficient code.</p>\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"kd\">defn </span><span class=\"nv\">js-obj*</span> <span class=\"p\">[</span><span class=\"nv\">kvs</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">kvs-str</span> <span class=\"p\">(</span><span class=\"nf\">-&gt;&gt;</span> <span class=\"p\">(</span><span class=\"nb\">repeat </span><span class=\"s\">&quot;~{}:~{}&quot;</span><span class=\"p\">)</span>\n                  <span class=\"p\">(</span><span class=\"nb\">take </span><span class=\"p\">(</span><span class=\"nb\">count </span><span class=\"nv\">kvs</span><span class=\"p\">))</span>\n                  <span class=\"p\">(</span><span class=\"nf\">interpose</span> <span class=\"s\">&quot;,&quot;</span><span class=\"p\">)</span>\n                  <span class=\"p\">(</span><span class=\"nb\">apply </span><span class=\"nv\">core/str</span><span class=\"p\">))]</span>\n    <span class=\"p\">(</span><span class=\"nb\">list* </span><span class=\"ss\">&#39;js*</span> <span class=\"p\">(</span><span class=\"nf\">core/str</span> <span class=\"s\">&quot;{&quot;</span> <span class=\"nv\">kvs-str</span> <span class=\"s\">&quot;}&quot;</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">apply concat </span><span class=\"nv\">kvs</span><span class=\"p\">))))</span>\n\n<span class=\"p\">(</span><span class=\"kd\">defmacro </span><span class=\"nv\">js-obj</span> <span class=\"p\">[</span><span class=\"o\">&amp;</span> <span class=\"nv\">rest</span><span class=\"p\">]</span>\n  <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nv\">sym-or-str?</span> <span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[</span><span class=\"nv\">x</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nb\">or </span><span class=\"p\">(</span><span class=\"nf\">core/symbol?</span> <span class=\"nv\">x</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">core/string?</span> <span class=\"nv\">x</span><span class=\"p\">)))</span>\n        <span class=\"nv\">kvs</span>         <span class=\"p\">(</span><span class=\"nb\">into </span><span class=\"p\">{}</span> <span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"nv\">vec</span> <span class=\"p\">(</span><span class=\"nf\">partition</span> <span class=\"mi\">2</span> <span class=\"nv\">rest</span><span class=\"p\">)))</span>\n        <span class=\"nv\">expr-&gt;local</span> <span class=\"p\">(</span><span class=\"nf\">zipmap</span>\n                      <span class=\"p\">(</span><span class=\"nb\">filter </span><span class=\"p\">(</span><span class=\"nb\">complement </span><span class=\"nv\">sym-or-str?</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">keys </span><span class=\"nv\">kvs</span><span class=\"p\">))</span>\n                      <span class=\"p\">(</span><span class=\"nf\">repeatedly</span> <span class=\"nv\">gensym</span><span class=\"p\">))</span>\n        <span class=\"nv\">obj</span>         <span class=\"p\">(</span><span class=\"nb\">gensym </span><span class=\"s\">&quot;obj&quot;</span><span class=\"p\">)]</span>\n    <span class=\"o\">`</span><span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"o\">~@</span><span class=\"p\">(</span><span class=\"nb\">apply concat </span><span class=\"p\">(</span><span class=\"nf\">set/map-invert</span> <span class=\"nv\">expr-&gt;local</span><span class=\"p\">))</span>\n           <span class=\"o\">~</span><span class=\"nv\">obj</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nf\">js-obj*</span>\n                   <span class=\"p\">(</span><span class=\"nf\">-&gt;&gt;</span> <span class=\"nv\">kvs</span>\n                     <span class=\"p\">(</span><span class=\"nb\">filter </span><span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[[</span><span class=\"nv\">k</span> <span class=\"nv\">_</span><span class=\"p\">]]</span> <span class=\"p\">(</span><span class=\"nf\">sym-or-str?</span> <span class=\"nv\">k</span><span class=\"p\">)))</span>\n                     <span class=\"p\">(</span><span class=\"nb\">into </span><span class=\"p\">{})))]</span>\n       <span class=\"o\">~@</span><span class=\"p\">(</span><span class=\"nb\">map </span><span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[[</span><span class=\"nv\">k</span> <span class=\"nv\">v</span><span class=\"p\">]]</span> <span class=\"o\">`</span><span class=\"p\">(</span><span class=\"nb\">aset </span><span class=\"o\">~</span><span class=\"nv\">obj</span> <span class=\"o\">~</span><span class=\"nv\">v</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"nf\">core/get</span> <span class=\"nv\">kvs</span> <span class=\"nv\">k</span><span class=\"p\">)))</span> <span class=\"nv\">expr-&gt;local</span><span class=\"p\">)</span>\n       <span class=\"o\">~</span><span class=\"nv\">obj</span><span class=\"p\">)))</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span class=\"p\">(</span><span class=\"k\">fn </span><span class=\"p\">[]</span> <span class=\"p\">(</span><span class=\"nf\">js-obj</span> <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"s\">&quot;foo&quot;</span> <span class=\"p\">(</span><span class=\"nb\">+ </span><span class=\"mi\">3</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"s\">&quot;bar&quot;</span> <span class=\"s\">&quot;wu&quot;</span> <span class=\"s\">&quot;fu&quot;</span><span class=\"p\">))</span>\n</pre></div>\n\n\n<p>generates</p>\n<div class=\"codehilite\"><pre><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">G__5915</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">G__5916</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"mi\">4</span><span class=\"p\">);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">obj5918</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;wu&quot;</span><span class=\"o\">:</span><span class=\"s2\">&quot;fu&quot;</span><span class=\"p\">};</span>\n    <span class=\"p\">(</span><span class=\"nx\">obj5918</span><span class=\"p\">[</span><span class=\"nx\">G__5916</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;bar&quot;</span><span class=\"p\">);</span>\n    <span class=\"p\">(</span><span class=\"nx\">obj5918</span><span class=\"p\">[</span><span class=\"nx\">G__5915</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"nx\">obj5918</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>There's a lot to see here as far as fancy macro writing.</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12373329,
            "is_me_message": false,
            "last_edit_timestamp": 1383692712,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-647",
            "submessages": [],
            "timestamp": 1383692602,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e28e6763c390b7a49f17be932d57ad?d=identicon&version=1",
            "client": "desktop app Mac 0.3.9",
            "content": "<p>cc <span class=\"user-mention\" data-user-email=\"zach@hackerschool.com\">@Zach Allaun</span> </p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12373341,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "travis.thieman@gmail.com",
            "sender_full_name": "Travis Thieman (F'13)",
            "sender_id": 2881,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-647",
            "submessages": [],
            "timestamp": 1383692623,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>Questions welcome of course.</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12373446,
            "is_me_message": false,
            "last_edit_timestamp": 1383692756,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-647",
            "submessages": [],
            "timestamp": 1383692751,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e28e6763c390b7a49f17be932d57ad?d=identicon&version=1",
            "client": "desktop app Mac 0.3.9",
            "content": "<p>That makes a lot of sense to me, the part that kept tripping me up was trying to construct the object in one shot.</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12373513,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "travis.thieman@gmail.com",
            "sender_full_name": "Travis Thieman (F'13)",
            "sender_id": 2881,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-647",
            "submessages": [],
            "timestamp": 1383692823,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e28e6763c390b7a49f17be932d57ad?d=identicon&version=1",
            "client": "desktop app Mac 0.3.9",
            "content": "<p>I'll submit a patch tomorrow morning if you haven't already taken care of it by then. Thanks for helping me out here!</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12373666,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "travis.thieman@gmail.com",
            "sender_full_name": "Travis Thieman (F'13)",
            "sender_id": 2881,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-647",
            "submessages": [],
            "timestamp": 1383693028,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"travis.thieman@gmail.com\">@Travis Thieman (F'13)</span> no problem, this one is a bit fun since we allow JS object construction in a way that's considerably more expressive than JS w/ little performance hit :D</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12373749,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-647",
            "submessages": [],
            "timestamp": 1383693144,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>Feel free to submit this as a patch, we should get tests from the ticket in there as well.</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12373779,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-647",
            "submessages": [],
            "timestamp": 1383693214,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e28e6763c390b7a49f17be932d57ad?d=identicon&version=1",
            "client": "desktop app Mac 0.3.9",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Since symbols aren't self-evaluating, right? So we shouldn't necessarily treat them as literals?</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12404507,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "travis.thieman@gmail.com",
            "sender_full_name": "Travis Thieman (F'13)",
            "sender_id": 2881,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-647",
            "submessages": [],
            "timestamp": 1383756538,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"travis.thieman@gmail.com\">@Travis Thieman (F'13)</span> remember those are symbols at *compile-time* and runtime they'll refer to some JS variable. We should optimize the symbol case as well though, they just don't need to be evaluated like forms do. So we have three cases, expressions, strings, and symbols. string can be inlined into the object directly, symbol needs to be aset on the object but don't need to be bound to a local like expressions do.</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12406035,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-647",
            "submessages": [],
            "timestamp": 1383758932,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e28e6763c390b7a49f17be932d57ad?d=identicon&version=1",
            "client": "desktop app Mac 0.3.9",
            "content": "<p>Ah, yes. I'll fix it. This has certainly been an educational bug.</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12406134,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "travis.thieman@gmail.com",
            "sender_full_name": "Travis Thieman (F'13)",
            "sender_id": 2881,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "CLJS-647",
            "submessages": [],
            "timestamp": 1383759024,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e28e6763c390b7a49f17be932d57ad?d=identicon&version=1",
            "client": "desktop app Mac 0.3.9",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> I used to be able to go into a cider REPL and run the following to see the AST for a form. I'm getting this error from   <code>analyze</code> as of today. First question: is there a better way I should be doing this? Second: are you already aware of this change? If not, I'll dig around to see what caused it.</p>\n<div class=\"codehilite\"><pre>cljs.core&gt; (cljs.analyzer/analyze {} (read-string &quot;(str 1)&quot;))\nClassCastException clojure.lang.Var$Unbound cannot be cast to java.util.concurrent.Future  clojure.core/deref-future (core.clj:2108)\n</pre></div>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12407449,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "travis.thieman@gmail.com",
            "sender_full_name": "Travis Thieman (F'13)",
            "sender_id": 2881,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "Analyzing in REPL?",
            "submessages": [],
            "timestamp": 1383760873,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"travis.thieman@gmail.com\">@Travis Thieman (F'13)</span> how you interact with the compiler has changed, the analyzer previously was not threadsafe. Howver it makes things a bit more tedious. I'm working on it and I'll get back to you in a bit.</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12407515,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "Analyzing in REPL?",
            "submessages": [],
            "timestamp": 1383760948,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"travis.thieman@gmail.com\">@Travis Thieman (F'13)</span> fixed as of this commit <a href=\"https://github.com/clojure/clojurescript/commit/43a420550eda2fd3f4d1601b90733775151c11b9\" target=\"_blank\" title=\"https://github.com/clojure/clojurescript/commit/43a420550eda2fd3f4d1601b90733775151c11b9\">https://github.com/clojure/clojurescript/commit/43a420550eda2fd3f4d1601b90733775151c11b9</a></p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12409080,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "Analyzing in REPL?",
            "submessages": [],
            "timestamp": 1383763323,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e6e28e6763c390b7a49f17be932d57ad?d=identicon&version=1",
            "client": "desktop app Mac 0.3.9",
            "content": "<p>Many thanks.</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12409117,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "travis.thieman@gmail.com",
            "sender_full_name": "Travis Thieman (F'13)",
            "sender_id": 2881,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "Analyzing in REPL?",
            "submessages": [],
            "timestamp": 1383763332,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"rupss@cs.stanford.edu\">@Rupa Shankar (F'13)</span> thanks for this patch, addresses an issue somebody encountered today and reported on the ClojureScript mailing list!</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12462688,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "warn on JS native extension",
            "submessages": [],
            "timestamp": 1383858167,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>If anyone feels like lending a helping hand <a href=\"http://dev.clojure.org/jira/browse/CLJS-674\" target=\"_blank\" title=\"http://dev.clojure.org/jira/browse/CLJS-674\">http://dev.clojure.org/jira/browse/CLJS-674</a>, <a href=\"http://dev.clojure.org/jira/browse/CLJS-681\" target=\"_blank\" title=\"http://dev.clojure.org/jira/browse/CLJS-681\">http://dev.clojure.org/jira/browse/CLJS-681</a> are the two things I would like to get in before cutting the next release of ClojureScript. Lots of enhancements in this version with regards to source map reliability and data structure performance.</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 12952966,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "Next Release",
            "submessages": [],
            "timestamp": 1384787723,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> I've been looking into using Closure's JS warnings and analysis system when compiling ClojureScript. Right now it emits tons of warnings about use of cljs.* stuff without goog.requires and goog.provides statements</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25635021,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "google closure namespace statements",
            "submessages": [],
            "timestamp": 1406907674,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Looking through the cljs compiler the only place I see those emitted are for cljs namespaces---not for types or records.</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25635028,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "google closure namespace statements",
            "submessages": [],
            "timestamp": 1406907690,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Is there any reason goog statements aren't emitted for types and records?</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25635039,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "google closure namespace statements",
            "submessages": [],
            "timestamp": 1406907708,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> we did this at one point and it causes more problems then it's worth. What the use case?</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25635083,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "google closure namespace statements",
            "submessages": [],
            "timestamp": 1406907731,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> I'm picking up my project from last year to build a filesystem-free ClojureScript compiler</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25635121,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "google closure namespace statements",
            "submessages": [],
            "timestamp": 1406907803,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> right, this is not something that's on the roadmap unless it can be demonstrated there's a performance win.</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25635191,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "google closure namespace statements",
            "submessages": [],
            "timestamp": 1406907851,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>Right now I'm just exploring what the minimal fns I need from the cljs compiler are, and so I'm using Closure directly rather than going through cljs.closure</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25635200,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "google closure namespace statements",
            "submessages": [],
            "timestamp": 1406907865,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>In particular I'm hoping to get all of the errors/warnings together from Closure as data</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25635236,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "google closure namespace statements",
            "submessages": [],
            "timestamp": 1406907907,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Do you recall what the problems were when emitting goog provide/require statements for cljs types and records?</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25635257,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "google closure namespace statements",
            "submessages": [],
            "timestamp": 1406907950,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> cool, though this isn't hard to do w/ ClojureScript today</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25635260,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "google closure namespace statements",
            "submessages": [],
            "timestamp": 1406907953,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> to be honest I do not, but it's not something we're going to look at again unless it can be demonstrated to be worthwhile</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25635309,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "google closure namespace statements",
            "submessages": [],
            "timestamp": 1406907979,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> yeah, sure. I don't have strong feelings about any of this, very much still in the exploratory phase</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25635321,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "google closure namespace statements",
            "submessages": [],
            "timestamp": 1406908003,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> pretty much the only thing I'm actually interested in Closure automating for us is dependency graph stuff</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25635349,
            "is_me_message": false,
            "last_edit_timestamp": 1406908050,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "google closure namespace statements",
            "submessages": [],
            "timestamp": 1406908041,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Yeah, that's one of the reasons I'm calling it directly</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25635362,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "google closure namespace statements",
            "submessages": [],
            "timestamp": 1406908074,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> also I have plans to make ClojureScript more, not less dependent on the file system for performance reasons - i.e. caching analysis of cljs/core.cljs to disk to improve cold start.</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25635416,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "google closure namespace statements",
            "submessages": [],
            "timestamp": 1406908118,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span>: <a href=\"https://github.com/lynaghk/clojurescript-compiler-proposal/blob/2ca6cd62995d95f1eac095854b9b4e6ef2742264/src/com/keminglabs/cljs_proposal/condense.clj#L26\" target=\"_blank\" title=\"https://github.com/lynaghk/clojurescript-compiler-proposal/blob/2ca6cd62995d95f1eac095854b9b4e6ef2742264/src/com/keminglabs/cljs_proposal/condense.clj#L26\">https://github.com/lynaghk/clojurescript-compiler-proposal/blob/2ca6cd62995d95f1eac095854b9b4e6ef2742264/src/com/keminglabs/cljs_proposal/condense.clj#L26</a></p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25635424,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "google closure namespace statements",
            "submessages": [],
            "timestamp": 1406908138,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> yeah that's the type of thing I'd take a patch for immediately.</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25635448,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "google closure namespace statements",
            "submessages": [],
            "timestamp": 1406908202,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> I have similar ideas. I just want the filesystem/caching bits to be controllable by the caller so that people have the option to do what they need to</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25635467,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "google closure namespace statements",
            "submessages": [],
            "timestamp": 1406908205,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span>: If you want Closure to handle namespaces and dependency sorting, won't that require more goog provide/require statements?</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25635588,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "google closure namespace statements",
            "submessages": [],
            "timestamp": 1406908357,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> I see the utility for such knobs - but this is not the kind of thing ClojureScript users are asking for.</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25635595,
            "is_me_message": false,
            "last_edit_timestamp": 1406908405,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "google closure namespace statements",
            "submessages": [],
            "timestamp": 1406908369,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> I don't see why you need more. We emit all the necessary provides/requires for sorting</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25635611,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "google closure namespace statements",
            "submessages": [],
            "timestamp": 1406908394,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span>: I feel like asking Closure to do the dep sorting but ignoring its warnings is a recipe for trouble---in that case might as well continue to do cljs dependency sorting within the cljs compiler</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25635682,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "google closure namespace statements",
            "submessages": [],
            "timestamp": 1406908469,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> oh you just mean the implicit require of core. Of course. We don't want more spurious warnings ;)</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25635700,
            "is_me_message": false,
            "last_edit_timestamp": 1406908543,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "google closure namespace statements",
            "submessages": [],
            "timestamp": 1406908506,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span>: I'll keep looking into it. But yeah, I'm just trying to build the compiler API that we need. Emphasis is on \"simple\". All of the \"easy\" stuff can live in lein-cljsbuild or whatever.</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25635766,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "google closure namespace statements",
            "submessages": [],
            "timestamp": 1406908610,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>^ we = keming labs</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25635771,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "google closure namespace statements",
            "submessages": [],
            "timestamp": 1406908620,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Do you have a public roadmap / requirements document / wishlist of where you want ClojureScript to go?</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25635972,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "google closure namespace statements",
            "submessages": [],
            "timestamp": 1406908913,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> I do not. But the roadmap is simple - make compilation faster, boostrappability</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25636042,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "google closure namespace statements",
            "submessages": [],
            "timestamp": 1406909000,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p>that is outside of changes to Clojure which must cascade into ClojureScript of course</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25636103,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "google closure namespace statements",
            "submessages": [],
            "timestamp": 1406909081,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"david.nolen@gmail.com\">@David Nolen</span> Okay, faster is definitely the goal for us as well. Bootstrapping is above my pay grade</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25636107,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "google closure namespace statements",
            "submessages": [],
            "timestamp": 1406909094,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/55ddf2ec93de8a2a31a0f99d0e874ff9?d=identicon&version=1",
            "client": "website",
            "content": "<p>I'll keep futzing around with some possible designs and ping you with a writeup when I feel like it's worth sharing.</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25636120,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "kevin@keminglabs.com",
            "sender_full_name": "Kevin Lynagh (he)",
            "sender_id": 2172,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "google closure namespace statements",
            "submessages": [],
            "timestamp": 1406909127,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/eac0aafb77a926e0ef53779ce873a472?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"kevin@keminglabs.com\">@Kevin Lynagh</span> cached analyses will largely eliminate analysis/compilation time</p>",
            "content_type": "text/html",
            "display_recipient": "ClojureScript compiler",
            "flags": [
                "read",
                "historical"
            ],
            "id": 25636132,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 25726,
            "sender_email": "david.nolen@gmail.com",
            "sender_full_name": "David Nolen",
            "sender_id": 931,
            "sender_realm_str": "recurse",
            "stream_id": 21778,
            "subject": "google closure namespace statements",
            "submessages": [],
            "timestamp": 1406909156,
            "topic_links": [],
            "type": "stream"
        }
    ],
    "msg": "",
    "result": "success"
}
