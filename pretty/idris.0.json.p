{
    "anchor": 0,
    "found_anchor": false,
    "found_newest": true,
    "found_oldest": true,
    "history_limited": false,
    "messages": [
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>i actually don't know anything about idris yet.</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28773482,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "fromHaskell",
            "submessages": [],
            "timestamp": 1412704110,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/3ca604eb0c0cfa22b4a10fc739c056c8?d=identicon&version=1",
            "client": "website",
            "content": "<p>I know almost nothing about it either, but having an Idris stream is shiny. :)</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28773495,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "lukeadba@gmail.com",
            "sender_full_name": "Luke Barone-Adesi (he) (F'13)",
            "sender_id": 2903,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "fromHaskell",
            "submessages": [],
            "timestamp": 1412704132,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>i think i read an announcement about it and a little more awhile back and haven't dug into it..</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28773499,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "fromHaskell",
            "submessages": [],
            "timestamp": 1412704141,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"katerinab@gmail.com\">@Katerina Barone-Adesi (F'13)</span> yeah, i think the churn here would be slow enough that good links will stay surfaced longer.. thanks to <span class=\"user-mention\" data-user-email=\"trillionalyssa@gmail.com\">@Alyssa Carter (F1'14)</span> :P</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28773529,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "fromHaskell",
            "submessages": [],
            "timestamp": 1412704191,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/61226ce011ec53a878f3accd5726c0b8?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"http://eb.host.cs.st-andrews.ac.uk/writings/idris-tutorial.pdf\" target=\"_blank\" title=\"http://eb.host.cs.st-andrews.ac.uk/writings/idris-tutorial.pdf\">This</a> should be a pretty good introduction if you're familiar with Haskell.</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28773576,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "trillionalyssa@gmail.com",
            "sender_full_name": "Alyssa Carter (F1'14)",
            "sender_id": 6414,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "fromHaskell",
            "submessages": [],
            "timestamp": 1412704211,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/61226ce011ec53a878f3accd5726c0b8?d=identicon&version=1",
            "client": "website",
            "content": "<p>And I'm happy to answer questions on anything the tutorial isn't clear about</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28773597,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "trillionalyssa@gmail.com",
            "sender_full_name": "Alyssa Carter (F1'14)",
            "sender_id": 6414,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "fromHaskell",
            "submessages": [],
            "timestamp": 1412704238,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/556318094ee6dbabf9570403d54e02f3?d=identicon&version=1",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>Hey, I don't know if it's relevant and I really don't know a thing about idris, but it seems New York Haskell Users Group is having a meetup about dependent types about 2 weeks from now (<a href=\"http://www.meetup.com/NY-Haskell/events/209245642/\" target=\"_blank\" title=\"http://www.meetup.com/NY-Haskell/events/209245642/\">http://www.meetup.com/NY-Haskell/events/209245642/</a>) </p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28774031,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "tacla.yamada@gmail.com",
            "sender_full_name": "Pedro Tacla Yamada (F2'14)",
            "sender_id": 6682,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "fromHaskell",
            "submessages": [],
            "timestamp": 1412704613,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/61226ce011ec53a878f3accd5726c0b8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Probably at least tangentially related! Dependent types are the biggest difference between haskell and idris (perhaps unsurprisingly), so an introduction to dependent types from a haskeller's point of view should be a big help.</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28774126,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "trillionalyssa@gmail.com",
            "sender_full_name": "Alyssa Carter (F1'14)",
            "sender_id": 6414,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "fromHaskell",
            "submessages": [],
            "timestamp": 1412704734,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/61226ce011ec53a878f3accd5726c0b8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Other people who might be interested: <span class=\"user-mention\" data-user-email=\"cerekh@gmail.com\">@Cerek Hillen (F2'14)</span>, <span class=\"user-mention\" data-user-email=\"alan@hackerschool.com\">@Alan O'Donnell</span> </p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28778253,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "trillionalyssa@gmail.com",
            "sender_full_name": "Alyssa Carter (F1'14)",
            "sender_id": 6414,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "fromHaskell",
            "submessages": [],
            "timestamp": 1412709413,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/61226ce011ec53a878f3accd5726c0b8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Idris takes about 5 minutes to typecheck my two-page module. I think it's because of my liberally nested fancy sequent syntax -- I imagine it's not easy to write an efficient parser when the end user can add new syntax rules.<br>\nOh, the joys of working with a developing language! <img alt=\":unamused:\" class=\"emoji\" src=\"static/third/gemoji/images/emoji/unamused.png\" title=\":unamused:\"> </p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28798730,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "trillionalyssa@gmail.com",
            "sender_full_name": "Alyssa Carter (F1'14)",
            "sender_id": 6414,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "slow parsing",
            "submessages": [],
            "timestamp": 1412740095,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/61226ce011ec53a878f3accd5726c0b8?d=identicon&version=1",
            "client": "website",
            "content": "<p>(I plan to look into this tomorrow, since I can't really continue working on OTT until the problem is resolved. Perhaps if anyone is interested in Idris's guts I can pair on it!)</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28798747,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "trillionalyssa@gmail.com",
            "sender_full_name": "Alyssa Carter (F1'14)",
            "sender_id": 6414,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "slow parsing",
            "submessages": [],
            "timestamp": 1412740145,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>is this on github?<br>\nwhat's your module doing?</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28924914,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "slow parsing",
            "submessages": [],
            "timestamp": 1412961659,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p>(i don't know idris, but it might be fun to read some code)</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28924921,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "slow parsing",
            "submessages": [],
            "timestamp": 1412961674,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/61226ce011ec53a878f3accd5726c0b8?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"PLRedmond@gmail.com\">@Patrick Redmond (W'14)</span> It's not on Github yet, but I might post it soon if people are interested. It's building up a model of <a href=\"http://www.cs.nott.ac.uk/~txa/publ/obseqnow.pdf\" target=\"_blank\" title=\"http://www.cs.nott.ac.uk/~txa/publ/obseqnow.pdf\">observational type theory</a> using techniques I learned from <a href=\"http://www.cis.upenn.edu/~bcpierce/sf/current/toc.html\" target=\"_blank\" title=\"http://www.cis.upenn.edu/~bcpierce/sf/current/toc.html\">Software Foundations</a> -- the idea is that instead of directly writing typechecking and evaluation functions for the language you're modeling, you write evaluation and typechecking <strong>relations</strong>. That way, you avoid implicitly assuming that the semantics you have in mind correspond to a well-defined language that supports all the operations we'd expect a language to support.</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28925484,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "trillionalyssa@gmail.com",
            "sender_full_name": "Alyssa Carter (F1'14)",
            "sender_id": 6414,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "slow parsing",
            "submessages": [],
            "timestamp": 1412962575,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/61226ce011ec53a878f3accd5726c0b8?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"http://www.cis.upenn.edu/~bcpierce/sf/current/Smallstep.html\" target=\"_blank\" title=\"http://www.cis.upenn.edu/~bcpierce/sf/current/Smallstep.html\">Here's</a> the chapter of SF that introduces the techniques I'm using, and <a href=\"http://www.cis.upenn.edu/~bcpierce/sf/current/StlcProp.html\" target=\"_blank\" title=\"http://www.cis.upenn.edu/~bcpierce/sf/current/StlcProp.html\">this chapter</a> applies them to simply-typed lambda calculus.</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 28925568,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "trillionalyssa@gmail.com",
            "sender_full_name": "Alyssa Carter (F1'14)",
            "sender_id": 6414,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "slow parsing",
            "submessages": [],
            "timestamp": 1412962709,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/61226ce011ec53a878f3accd5726c0b8?d=identicon&version=1",
            "client": "website",
            "content": "<p>The discussion about markov chains made me want to write a paragraph scrambler thingy, so I'm starting on one in Idris (just because some of my friends have the misconception that dependent types make it harder to write non-dependent programs). I'll probably be working on <a href=\"https://github.com/trillioneyes/marko\" target=\"_blank\" title=\"https://github.com/trillioneyes/marko\">this</a> next week at Hacker School.<br>\nSo far I have basic trie lenses and a function to process a list into a trie of n-gram frequencies.</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29319340,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "trillionalyssa@gmail.com",
            "sender_full_name": "Alyssa Carter (F1'14)",
            "sender_id": 6414,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "dissociated press",
            "submessages": [],
            "timestamp": 1413687527,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/61226ce011ec53a878f3accd5726c0b8?d=identicon&version=1",
            "client": "website",
            "content": "<p>I kind of feel like my tries should have been depth-indexed, but I ended up not needing that statically tracked and there are already so many ways you can write a tree-like data type that I ended up getting rid of the index just so there were fewer degrees of freedom in my type definition.</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29319440,
            "is_me_message": false,
            "last_edit_timestamp": 1413687773,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "trillionalyssa@gmail.com",
            "sender_full_name": "Alyssa Carter (F1'14)",
            "sender_id": 6414,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "dissociated press",
            "submessages": [],
            "timestamp": 1413687729,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/612c7c2a108d7850c62d1d2293a481aa42855408?x=x&version=2",
            "client": "desktop app Mac 0.4.4",
            "content": "<p><span class=\"user-mention\" data-user-email=\"trillionalyssa@gmail.com\">@Alyssa Carter (F1'14)</span> i've been reading the <a href=\"http://eb.host.cs.st-andrews.ac.uk/writings/idris-tutorial.pdf\" target=\"_blank\" title=\"http://eb.host.cs.st-andrews.ac.uk/writings/idris-tutorial.pdf\">tutorial</a> and it seems like a really awesome language! the differences from haskell are all improvements, but it gets really serious with the implicit arguments and dependent types (which are very new to me).. it's pretty exciting!</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29701298,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "PLRedmond@gmail.com",
            "sender_full_name": "Patrick Redmond (W'14)",
            "sender_id": 5014,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "fromHaskell",
            "submessages": [],
            "timestamp": 1414374351,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/61226ce011ec53a878f3accd5726c0b8?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-email=\"PLRedmond@gmail.com\">@Patrick Redmond (W'14)</span> I'm glad to hear you like it! If you have any questions I'd be happy to answer them.</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29707369,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "trillionalyssa@gmail.com",
            "sender_full_name": "Alyssa Carter (F1'14)",
            "sender_id": 6414,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "fromHaskell",
            "submessages": [],
            "timestamp": 1414386313,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/61226ce011ec53a878f3accd5726c0b8?d=identicon&version=1",
            "client": "website",
            "content": "<p>The recent Idris release supports <a href=\"https://github.com/idris-lang/Idris-dev/wiki/Static-Arguments-and-Partial-Evaluation\" target=\"_blank\" title=\"https://github.com/idris-lang/Idris-dev/wiki/Static-Arguments-and-Partial-Evaluation\">a new family of optimizations</a>. Partial evaluation is a bit like inlining in that it simplifies function calls using the definition of the function, but it's used in different cases: its purpose is to propagate knowledge of compile-time constant arguments through all the function calls (including recursive calls) in a function. This can make some function calls disappear, having been reduced away at compile time (a bit like a lisp macro). Unlike inlining (which basically acts as loop unrolling on recursive calls), the partial evaluation optimization replaces any recursive calls with recursive calls to the partially-evaluated optimized function, making the optimization automatically \"deep\".</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29845441,
            "is_me_message": false,
            "last_edit_timestamp": 1414584370,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "trillionalyssa@gmail.com",
            "sender_full_name": "Alyssa Carter (F1'14)",
            "sender_id": 6414,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "partial evaluation",
            "submessages": [],
            "timestamp": 1414584280,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/61226ce011ec53a878f3accd5726c0b8?d=identicon&version=1",
            "client": "website",
            "content": "<p>One of the most striking use cases for this optimization is for defining embedded domain specific languages with an interpreter written in Idris. An EDSL is a bit like an Idris data type that represents programs in some hypothetical language, and an interpreter transforms those into Idris programs. However, without some kind of compiler support, interpreting an EDSL can have a significant amount of overhead: for example, usually the EDSL's variables and variable state are represented by a linked list, and every time your EDSL program wants to access a variable, the list needs to be traversed. With partial evaluation, the interpreter can be optimized away for statically-known programs, meaning that you could potentially define a library function using an EDSL (such as <code>factorial = interpret factorialProgram</code>, where <code>factorialProgram</code> is a constant) without any overhead versus a native Idris function.</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29845685,
            "is_me_message": false,
            "last_edit_timestamp": 1414584766,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "trillionalyssa@gmail.com",
            "sender_full_name": "Alyssa Carter (F1'14)",
            "sender_id": 6414,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "partial evaluation",
            "submessages": [],
            "timestamp": 1414584700,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/61226ce011ec53a878f3accd5726c0b8?d=identicon&version=1",
            "client": "website",
            "content": "<p>Wow, that was a lot more text than I realized I'd need to write.</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29845693,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "trillionalyssa@gmail.com",
            "sender_full_name": "Alyssa Carter (F1'14)",
            "sender_id": 6414,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "partial evaluation",
            "submessages": [],
            "timestamp": 1414584720,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/61226ce011ec53a878f3accd5726c0b8?d=identicon&version=1",
            "client": "website",
            "content": "<p>I got excited reading about EDSLs and partial evaluation, and I want to work on a simple EDSL for manipulating lists and statically track some ambitious extra-functional properties. I might also go through some of the evaluation semantics things from Software Foundations. Is anyone interested in this?</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 29864964,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "trillionalyssa@gmail.com",
            "sender_full_name": "Alyssa Carter (F1'14)",
            "sender_id": 6414,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "playing with EDSLs",
            "submessages": [],
            "timestamp": 1414607061,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e9f1cc1c1e2c79ae473abfa0ea69a434?d=identicon&version=1",
            "client": "website",
            "content": "<p>Here's the code for the presentation I did this evening: <a href=\"https://github.com/nabilhassein/idris-meap/blob/master/ch6.idr\" target=\"_blank\" title=\"https://github.com/nabilhassein/idris-meap/blob/master/ch6.idr\">https://github.com/nabilhassein/idris-meap/blob/master/ch6.idr</a></p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 58663047,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "nabil.hassein@gmail.com",
            "sender_full_name": "Nabil Hassein (he/they) (S2'16)",
            "sender_id": 2143,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "printf",
            "submessages": [],
            "timestamp": 1464320620,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/e9f1cc1c1e2c79ae473abfa0ea69a434?d=identicon&version=1",
            "client": "website",
            "content": "<p>spoiler alert: this is a repo of my solutions to exercises in \"Type-Driven Development with Idris\" by Edwin Brady, the Idris creator</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 58663151,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "nabil.hassein@gmail.com",
            "sender_full_name": "Nabil Hassein (he/they) (S2'16)",
            "sender_id": 2143,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "printf",
            "submessages": [],
            "timestamp": 1464320703,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://www.youtube.com/watch?v=AWeT_G04a0A\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=AWeT_G04a0A\">https://www.youtube.com/watch?v=AWeT_G04a0A</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"AWeT_G04a0A\" href=\"https://www.youtube.com/watch?v=AWeT_G04a0A\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=AWeT_G04a0A\"><img src=\"https://i.ytimg.com/vi/AWeT_G04a0A/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118283043,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "Coding for Types: The Universe Pattern in Idris",
            "submessages": [],
            "timestamp": 1510280477,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p><a href=\"https://www.youtube.com/watch?v=4i7KrG1Afbk\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=4i7KrG1Afbk\">https://www.youtube.com/watch?v=4i7KrG1Afbk</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"4i7KrG1Afbk\" href=\"https://www.youtube.com/watch?v=4i7KrG1Afbk\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=4i7KrG1Afbk\"><img src=\"https://i.ytimg.com/vi/4i7KrG1Afbk/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 118283090,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f44d",
                    "emoji_name": "thumbs_up",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "julian@cipht.net",
                        "full_name": "Julian Squires (he) (F2'17)",
                        "id": 101992
                    },
                    "user_id": 101992
                }
            ],
            "recipient_id": 36710,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "Idris: Practical Dependent Types with Practical Examples",
            "submessages": [],
            "timestamp": 1510280528,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/8da25fc620831b661b032ac34b666707?d=identicon&version=1",
            "client": "website",
            "content": "<p>Is anyone interested in implementing something like <a href=\"https://github.com/llvm-hs/llvm-hs/\" target=\"_blank\" title=\"https://github.com/llvm-hs/llvm-hs/\">https://github.com/llvm-hs/llvm-hs/</a> in idris? A \"typed\" version of the bindings already exist in Haskell (<a href=\"https://github.com/llvm-hs/llvm-hs-typed\" target=\"_blank\" title=\"https://github.com/llvm-hs/llvm-hs-typed\">https://github.com/llvm-hs/llvm-hs-typed</a>), but the code is very complicated, as pseudo-dependently-typed Haskell gets, and I think that doing a typed version in Idris would be more idiomatic and even useful.</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158916416,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "sefim96@gmail.com",
            "sender_full_name": "Joseph Morag (he) (SP1'19)",
            "sender_id": 203861,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "llvm-hs-pure in Idris",
            "submessages": [],
            "timestamp": 1550608254,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>that sounds like a massive undertaking</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158917923,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "llvm-hs-pure in Idris",
            "submessages": [],
            "timestamp": 1550609464,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d16cd71b27dfd2af0f84e16276c00b61314db772?x=x&version=3",
            "client": "ZulipMobile",
            "content": "<p>I dunno if I want to spend the time doing the implementation but I\u2019d love to chat about it for a bit. Curious what properties you\u2019d want to express with dependent types</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 158918208,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "to@akiva.email",
            "sender_full_name": "Akiva Leffert (he) (W2'19)",
            "sender_id": 198444,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "llvm-hs-pure in Idris",
            "submessages": [],
            "timestamp": 1550609735,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ae3ded07fcf2d22039e8bdb6a9ff9249ddec42e8?x=x&version=5",
            "client": "website",
            "content": "<p><a href=\"https://groups.google.com/forum/#!topic/idris-lang/VZVpi-QUyUc\" title=\"https://groups.google.com/forum/#!topic/idris-lang/VZVpi-QUyUc\">I made a proposal about verified interfaces.</a></p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 194051349,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "nicholasdrozd@gmail.com",
            "sender_full_name": "Nick Drozd (SP2'16)",
            "sender_id": 9260,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "Proposal: Verify algebra interfaces by default",
            "submessages": [],
            "timestamp": 1586965773,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/40e1eb4186c76edfecca264f74e088ed0e62af25?x=x&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"203861\">@Joseph Morag (he) (SP1'19)</span> I'd love to give this a try, but I have a feeling that this is going to be a pretty hard challenge. I've spent a lot of time thinking about expressing ASTs in a type safe way, but all solutions I know of are pretty hard.</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197390012,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "jaseemabid@gmail.com",
            "sender_full_name": "Jaseem Abid (he) (S1'17)",
            "sender_id": 101128,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "llvm-hs-pure in Idris",
            "submessages": [],
            "timestamp": 1589363494,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4c6c33ba34805ad702799c529d0cdce4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>It just feels like dependent types are universally acknowledged as cool, but they\u2019re only still in academic languages</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197576542,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "adampalay@gmail.com",
            "sender_full_name": "Adam Palay (he) (SP2'18)",
            "sender_id": 111960,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "dependent types and proofs",
            "submessages": [],
            "timestamp": 1589471839,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4c6c33ba34805ad702799c529d0cdce4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>What would it take to bring them into a language like typescript? Or are they just too heavy and cumbersome for real world use?</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197576686,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "adampalay@gmail.com",
            "sender_full_name": "Adam Palay (he) (SP2'18)",
            "sender_id": 111960,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "dependent types and proofs",
            "submessages": [],
            "timestamp": 1589471893,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4c6c33ba34805ad702799c529d0cdce4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"100041\">@Vaibhav Sagar (he) (F1'16)</span> , you mentioned haskell has dependent types, but they're a pain in the butt to use?</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197576833,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "adampalay@gmail.com",
            "sender_full_name": "Adam Palay (he) (SP2'18)",
            "sender_id": 111960,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "dependent types and proofs",
            "submessages": [],
            "timestamp": 1589471957,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>yup!</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197576848,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "dependent types and proofs",
            "submessages": [],
            "timestamp": 1589471970,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4d074af6cc341ef51b25bb2f738cdb11?d=identicon&version=1",
            "client": "website",
            "content": "<p>here's the first of a multi part series: <a href=\"https://blog.jle.im/entry/introduction-to-singletons-1.html\">https://blog.jle.im/entry/introduction-to-singletons-1.html</a></p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197577279,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "adampalay@gmail.com",
                        "full_name": "Adam Palay (he) (SP2'18)",
                        "id": 111960
                    },
                    "user_id": 111960
                }
            ],
            "recipient_id": 36710,
            "sender_email": "vaibhavsagar@gmail.com",
            "sender_full_name": "Vaibhav Sagar (he) (F1'16)",
            "sender_id": 100041,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "dependent types and proofs",
            "submessages": [],
            "timestamp": 1589472145,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2a6b06ba040fd7f7c2acd4d1440e7de?d=identicon&version=1",
            "client": "website",
            "content": "<p>I guess there are several things people are referring to when they say \"dependent types\", one being stuff like \"encoding state machines\" and \"Vec n\" and another being \"proving stuff in a Curry-Howard style\", as Nick did. I guess Haskell is aiming for the first one?</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197582137,
            "is_me_message": false,
            "last_edit_timestamp": 1589474138,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "mauricio@collares.org",
            "sender_full_name": "Mauricio Collares (he) (W2'19)",
            "sender_id": 158563,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "dependent types and proofs",
            "submessages": [],
            "timestamp": 1589474086,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d16cd71b27dfd2af0f84e16276c00b61314db772?x=x&version=3",
            "client": "ZulipElectron",
            "content": "<p>oh hi <span class=\"user-mention\" data-user-id=\"111960\">@Adam Palay (he) (SP2'18)</span> for something like adding to typescript, if you think about dependent types as term level code existing at the type level, then what does it mean for code with side effects to happen in the type system?</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197582194,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "to@akiva.email",
            "sender_full_name": "Akiva Leffert (he) (W2'19)",
            "sender_id": 198444,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "dependent types and proofs",
            "submessages": [],
            "timestamp": 1589474111,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ae3ded07fcf2d22039e8bdb6a9ff9249ddec42e8?x=x&version=5",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"158563\">@Mauricio Collares (he) (W2'19)</span> I think the main motivation for Idris is to do that <code>Vec</code> stuff as well. <em><a href=\"https://www.manning.com/books/type-driven-development-with-idris\">Type-Driven Development</a></em> uses a similar door state machine example, but only barely touches on CH proofs. That's just a matter of mindset though; the language itself affords both.</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197583577,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "nicholasdrozd@gmail.com",
            "sender_full_name": "Nick Drozd (SP2'16)",
            "sender_id": 9260,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "dependent types and proofs",
            "submessages": [],
            "timestamp": 1589474669,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4c6c33ba34805ad702799c529d0cdce4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"198444\">@Akiva Leffert (he) (W2'19)</span> that's a great point\u2014I guess I was thinking you could separate out the \"pure\" parts of your JS from your impure parts, and prove things about the pure parts</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197583592,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "adampalay@gmail.com",
            "sender_full_name": "Adam Palay (he) (SP2'18)",
            "sender_id": 111960,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "dependent types and proofs",
            "submessages": [],
            "timestamp": 1589474678,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/b2a6b06ba040fd7f7c2acd4d1440e7de?d=identicon&version=1",
            "client": "website",
            "content": "<p><span class=\"user-mention\" data-user-id=\"9260\">@Nick Drozd (SP2'16)</span> I see, thanks! But type inference (as opposed to type checking) is much easier for <code>Vec</code> and state machines. Does Haskell still want everything to be type-inferrable?</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197583773,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "mauricio@collares.org",
            "sender_full_name": "Mauricio Collares (he) (W2'19)",
            "sender_id": 158563,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "dependent types and proofs",
            "submessages": [],
            "timestamp": 1589474762,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d16cd71b27dfd2af0f84e16276c00b61314db772?x=x&version=3",
            "client": "ZulipElectron",
            "content": "<p>yeah, that's a thing people do, but you would end up with a pretty different language pretty fast</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197583907,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "to@akiva.email",
            "sender_full_name": "Akiva Leffert (he) (W2'19)",
            "sender_id": 198444,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "dependent types and proofs",
            "submessages": [],
            "timestamp": 1589474819,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d16cd71b27dfd2af0f84e16276c00b61314db772?x=x&version=3",
            "client": "ZulipElectron",
            "content": "<p>I rather like what typescript is doing, where because singleton types, the types are pretty detailed, and then you can do some computation on them at the type level\u2014I'd love to see them support more type level computation</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197584083,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "to@akiva.email",
            "sender_full_name": "Akiva Leffert (he) (W2'19)",
            "sender_id": 198444,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "dependent types and proofs",
            "submessages": [],
            "timestamp": 1589474896,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d16cd71b27dfd2af0f84e16276c00b61314db772?x=x&version=3",
            "client": "ZulipElectron",
            "content": "<p>which, general dependency is probably a nicer mechanism, but results in a lot of restrictions you might be able to avoid</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197584135,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "to@akiva.email",
            "sender_full_name": "Akiva Leffert (he) (W2'19)",
            "sender_id": 198444,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "dependent types and proofs",
            "submessages": [],
            "timestamp": 1589474930,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4c6c33ba34805ad702799c529d0cdce4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p>I agree with <span class=\"user-mention\" data-user-id=\"9260\">@Nick Drozd (SP2'16)</span> that most programs need proofs, but wouldn't we have peace of mind if more did (like banks, or defense stuff, or other safety critical things)? The thing I'm trying to get at is what are the frictions preventing proofs from entering actual industrial coding?</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197584216,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "adampalay@gmail.com",
            "sender_full_name": "Adam Palay (he) (SP2'18)",
            "sender_id": 111960,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "dependent types and proofs",
            "submessages": [],
            "timestamp": 1589474979,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ae3ded07fcf2d22039e8bdb6a9ff9249ddec42e8?x=x&version=5",
            "client": "website",
            "content": "<p>A lot of existing bank code, for instance, is COBOL code that is decades old. It was written mostly by people who are now retired or dead, and even if it actually did do what it was supposed to do (which it almost certainly does not), literally nobody knows what it actually does or what it is supposed to do. Absolutely nothing can be proved about code like that. On the other hand, the CompCert compiler was written from  scratch (I think) with a eye towards verification.</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197585537,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "nicholasdrozd@gmail.com",
            "sender_full_name": "Nick Drozd (SP2'16)",
            "sender_id": 9260,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "dependent types and proofs",
            "submessages": [],
            "timestamp": 1589475555,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/d16cd71b27dfd2af0f84e16276c00b61314db772?x=x&version=3",
            "client": "ZulipElectron",
            "content": "<p>so I work on payments now, and I think there are some core places where dependency might be useful\u2014or at least model checking, but even then there's a lot of complexity you'd have to figure out how to represent\u2014like we queue every intermediate step in the database and pull it back out\u2014we deal with timeouts for downstream providers, so you need to understand time. it gets very complicated very fast</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197585753,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f389",
                    "emoji_name": "tada",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "adampalay@gmail.com",
                        "full_name": "Adam Palay (he) (SP2'18)",
                        "id": 111960
                    },
                    "user_id": 111960
                }
            ],
            "recipient_id": 36710,
            "sender_email": "to@akiva.email",
            "sender_full_name": "Akiva Leffert (he) (W2'19)",
            "sender_id": 198444,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "dependent types and proofs",
            "submessages": [],
            "timestamp": 1589475636,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ae3ded07fcf2d22039e8bdb6a9ff9249ddec42e8?x=x&version=5",
            "client": "website",
            "content": "<p><a href=\"https://www.youtube.com/watch?v=yVuEPwNuCHw\">https://www.youtube.com/watch?v=yVuEPwNuCHw</a> describes how OCaml is used to ensure correctness of finance stuff. That seems like an environment where proofs would be nice to have.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"yVuEPwNuCHw\" href=\"https://www.youtube.com/watch?v=yVuEPwNuCHw\"><img src=\"https://i.ytimg.com/vi/yVuEPwNuCHw/default.jpg\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197586460,
            "is_me_message": false,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "adampalay@gmail.com",
                        "full_name": "Adam Palay (he) (SP2'18)",
                        "id": 111960
                    },
                    "user_id": 111960
                }
            ],
            "recipient_id": 36710,
            "sender_email": "nicholasdrozd@gmail.com",
            "sender_full_name": "Nick Drozd (SP2'16)",
            "sender_id": 9260,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "dependent types and proofs",
            "submessages": [],
            "timestamp": 1589475883,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/1a7b7bb06ea84ea8aa68986ba5a3d936?d=identicon&version=2",
            "client": "website",
            "content": "<p><span class=\"user-mention silent\" data-user-id=\"198444\">Akiva Leffert (he) (W2'19)</span> <a href=\"#narrow/stream/26195-idris/topic/dependent.20types.20and.20proofs/near/197585753\">said</a>:</p>\n<blockquote>\n<p>so I work on payments now, and I think there are some core places where dependency might be useful\u2014or at least model checking, but even then there's a lot of complexity you'd have to figure out how to represent\u2014like we queue every intermediate step in the database and pull it back out\u2014we deal with timeouts for downstream providers, so you need to understand time. it gets very complicated very fast</p>\n</blockquote>\n<p>Cool problem!  It sounds like model checking could be useful. There is a whole theory of timed autonoma that deals with proving things in systems with time. As far as particular tools go, I think <a href=\"http://www.uppaal.org/\">http://www.uppaal.org/</a> is very cool.</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197589810,
            "is_me_message": false,
            "last_edit_timestamp": 1589477335,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "clample@crimson.ua.edu",
            "sender_full_name": "Chris Lample (he) (W2'17)",
            "sender_id": 100452,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "dependent types and proofs",
            "submessages": [],
            "timestamp": 1589477318,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>funny that you mentioned typescript, some time ago I was imagining (half joking, half serious) that at some point somebody would invent dependentlytypescript where you could <code>npm install</code> theorems. I thought it would be a language I'd actually use and I was even trying to imagine a js-like syntax for a dependently-typed language. I found some of the fictitious code snippets I wrote back then <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> <a href=\"/user_uploads/13/WoESQQd6jJDn9WQgjJwYSOuj/deptypescript.png\">deptypescript.png</a> <a href=\"/user_uploads/13/QF4VHsWqlgisjcO5pNAuJgd8/vec.png\">vec.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/13/WoESQQd6jJDn9WQgjJwYSOuj/deptypescript.png\" title=\"deptypescript.png\"><img src=\"/user_uploads/13/WoESQQd6jJDn9WQgjJwYSOuj/deptypescript.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/13/QF4VHsWqlgisjcO5pNAuJgd8/vec.png\" title=\"vec.png\"><img src=\"/user_uploads/13/QF4VHsWqlgisjcO5pNAuJgd8/vec.png\"></a></div>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197697437,
            "is_me_message": false,
            "last_edit_timestamp": 1589555405,
            "reactions": [
                {
                    "emoji_code": "15913",
                    "emoji_name": "100-party",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "adampalay@gmail.com",
                        "full_name": "Adam Palay (he) (SP2'18)",
                        "id": 111960
                    },
                    "user_id": 111960
                },
                {
                    "emoji_code": "15913",
                    "emoji_name": "100-party",
                    "reaction_type": "realm_emoji",
                    "user": {
                        "email": "vaibhavsagar@gmail.com",
                        "full_name": "Vaibhav Sagar (he) (F1'16)",
                        "id": 100041
                    },
                    "user_id": 100041
                }
            ],
            "recipient_id": 36710,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "dependent types and proofs",
            "submessages": [],
            "timestamp": 1589552274,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/2cb1be5d79e3399f3076397240566bedb2a13582?x=x&version=1",
            "client": "website",
            "content": "<p>I think that with the increasing popularity of things like machine learning which for some advanced use cases requires doing math by hand on paper (which is very unsatisfying to me), people will start looking into practical alternatives to automate or verify the tedious and error-prone symbolic manipulations required to \"do the math\". An interesting project in that direction is Certigrad implemented in Lean.</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197700375,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "jrojasdavalos@gmail.com",
            "sender_full_name": "Junior Rojas (he) (S1'16)",
            "sender_id": 9347,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "dependent types and proofs",
            "submessages": [],
            "timestamp": 1589553344,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://zulip-avatars.s3.amazonaws.com/13/ae3ded07fcf2d22039e8bdb6a9ff9249ddec42e8?x=x&version=5",
            "client": "website",
            "content": "<blockquote>\n<p>doing math by hand on paper (which is very unsatisfying to me)</p>\n</blockquote>\n<p>I agree, anything that happens outside of the code should be pushed into the code, whether that's real math or mundane business logic</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 197712854,
            "is_me_message": false,
            "last_edit_timestamp": 1589558302,
            "reactions": [
                {
                    "emoji_code": "1f419",
                    "emoji_name": "octopus",
                    "reaction_type": "unicode_emoji",
                    "user": {
                        "email": "adampalay@gmail.com",
                        "full_name": "Adam Palay (he) (SP2'18)",
                        "id": 111960
                    },
                    "user_id": 111960
                }
            ],
            "recipient_id": 36710,
            "sender_email": "nicholasdrozd@gmail.com",
            "sender_full_name": "Nick Drozd (SP2'16)",
            "sender_id": 9260,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "dependent types and proofs",
            "submessages": [],
            "timestamp": 1589558293,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4c6c33ba34805ad702799c529d0cdce4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span aria-label=\"100\" class=\"emoji emoji-1f4af\" role=\"img\" title=\"100\">:100:</span></p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199015698,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "adampalay@gmail.com",
            "sender_full_name": "Adam Palay (he) (SP2'18)",
            "sender_id": 111960,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "dependent types and proofs",
            "submessages": [],
            "timestamp": 1590669346,
            "topic_links": [],
            "type": "stream"
        },
        {
            "avatar_url": "https://secure.gravatar.com/avatar/4c6c33ba34805ad702799c529d0cdce4?d=identicon&version=1",
            "client": "ZulipElectron",
            "content": "<p><span class=\"user-mention\" data-user-id=\"9347\">@Junior Rojas (he) (S1'16)</span> that's super cool</p>",
            "content_type": "text/html",
            "display_recipient": "idris",
            "flags": [
                "read",
                "historical"
            ],
            "id": 199015714,
            "is_me_message": false,
            "reactions": [],
            "recipient_id": 36710,
            "sender_email": "adampalay@gmail.com",
            "sender_full_name": "Adam Palay (he) (SP2'18)",
            "sender_id": 111960,
            "sender_realm_str": "recurse",
            "stream_id": 26195,
            "subject": "dependent types and proofs",
            "submessages": [],
            "timestamp": 1590669355,
            "topic_links": [],
            "type": "stream"
        }
    ],
    "msg": "",
    "result": "success"
}
